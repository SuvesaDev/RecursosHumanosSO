'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2407
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DataSetAccionPersonal
    Inherits DataSet
    
    Private tableEmpleado As EmpleadoDataTable
    
    Private tableAccion As AccionDataTable
    
    Private tableUsuarios As UsuariosDataTable
    
    Private tableAccionPersonal As AccionPersonalDataTable
    
    Private relationEmpleadoAccionPersonal As DataRelation
    
    Private relationAccionAccionPersonal As DataRelation
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Empleado")) Is Nothing) Then
                Me.Tables.Add(New EmpleadoDataTable(ds.Tables("Empleado")))
            End If
            If (Not (ds.Tables("Accion")) Is Nothing) Then
                Me.Tables.Add(New AccionDataTable(ds.Tables("Accion")))
            End If
            If (Not (ds.Tables("Usuarios")) Is Nothing) Then
                Me.Tables.Add(New UsuariosDataTable(ds.Tables("Usuarios")))
            End If
            If (Not (ds.Tables("AccionPersonal")) Is Nothing) Then
                Me.Tables.Add(New AccionPersonalDataTable(ds.Tables("AccionPersonal")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Empleado As EmpleadoDataTable
        Get
            Return Me.tableEmpleado
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Accion As AccionDataTable
        Get
            Return Me.tableAccion
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Usuarios As UsuariosDataTable
        Get
            Return Me.tableUsuarios
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property AccionPersonal As AccionPersonalDataTable
        Get
            Return Me.tableAccionPersonal
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DataSetAccionPersonal = CType(MyBase.Clone,DataSetAccionPersonal)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("Empleado")) Is Nothing) Then
            Me.Tables.Add(New EmpleadoDataTable(ds.Tables("Empleado")))
        End If
        If (Not (ds.Tables("Accion")) Is Nothing) Then
            Me.Tables.Add(New AccionDataTable(ds.Tables("Accion")))
        End If
        If (Not (ds.Tables("Usuarios")) Is Nothing) Then
            Me.Tables.Add(New UsuariosDataTable(ds.Tables("Usuarios")))
        End If
        If (Not (ds.Tables("AccionPersonal")) Is Nothing) Then
            Me.Tables.Add(New AccionPersonalDataTable(ds.Tables("AccionPersonal")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableEmpleado = CType(Me.Tables("Empleado"),EmpleadoDataTable)
        If (Not (Me.tableEmpleado) Is Nothing) Then
            Me.tableEmpleado.InitVars
        End If
        Me.tableAccion = CType(Me.Tables("Accion"),AccionDataTable)
        If (Not (Me.tableAccion) Is Nothing) Then
            Me.tableAccion.InitVars
        End If
        Me.tableUsuarios = CType(Me.Tables("Usuarios"),UsuariosDataTable)
        If (Not (Me.tableUsuarios) Is Nothing) Then
            Me.tableUsuarios.InitVars
        End If
        Me.tableAccionPersonal = CType(Me.Tables("AccionPersonal"),AccionPersonalDataTable)
        If (Not (Me.tableAccionPersonal) Is Nothing) Then
            Me.tableAccionPersonal.InitVars
        End If
        Me.relationEmpleadoAccionPersonal = Me.Relations("EmpleadoAccionPersonal")
        Me.relationAccionAccionPersonal = Me.Relations("AccionAccionPersonal")
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DataSetAccionPersonal"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DataSetAccionPersonal.xsd"
        Me.Locale = New System.Globalization.CultureInfo("es-ES")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableEmpleado = New EmpleadoDataTable
        Me.Tables.Add(Me.tableEmpleado)
        Me.tableAccion = New AccionDataTable
        Me.Tables.Add(Me.tableAccion)
        Me.tableUsuarios = New UsuariosDataTable
        Me.Tables.Add(Me.tableUsuarios)
        Me.tableAccionPersonal = New AccionPersonalDataTable
        Me.Tables.Add(Me.tableAccionPersonal)
        Dim fkc As ForeignKeyConstraint
        fkc = New ForeignKeyConstraint("EmpleadoAccionPersonal", New DataColumn() {Me.tableEmpleado.IdentificacionColumn}, New DataColumn() {Me.tableAccionPersonal.Id_EmpleadoColumn})
        Me.tableAccionPersonal.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("AccionAccionPersonal", New DataColumn() {Me.tableAccion.CodigoColumn}, New DataColumn() {Me.tableAccionPersonal.Id_AccionColumn})
        Me.tableAccionPersonal.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        Me.relationEmpleadoAccionPersonal = New DataRelation("EmpleadoAccionPersonal", New DataColumn() {Me.tableEmpleado.IdentificacionColumn}, New DataColumn() {Me.tableAccionPersonal.Id_EmpleadoColumn}, false)
        Me.Relations.Add(Me.relationEmpleadoAccionPersonal)
        Me.relationAccionAccionPersonal = New DataRelation("AccionAccionPersonal", New DataColumn() {Me.tableAccion.CodigoColumn}, New DataColumn() {Me.tableAccionPersonal.Id_AccionColumn}, false)
        Me.Relations.Add(Me.relationAccionAccionPersonal)
    End Sub
    
    Private Function ShouldSerializeEmpleado() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeAccion() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeUsuarios() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeAccionPersonal() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub EmpleadoRowChangeEventHandler(ByVal sender As Object, ByVal e As EmpleadoRowChangeEvent)
    
    Public Delegate Sub AccionRowChangeEventHandler(ByVal sender As Object, ByVal e As AccionRowChangeEvent)
    
    Public Delegate Sub UsuariosRowChangeEventHandler(ByVal sender As Object, ByVal e As UsuariosRowChangeEvent)
    
    Public Delegate Sub AccionPersonalRowChangeEventHandler(ByVal sender As Object, ByVal e As AccionPersonalRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class EmpleadoDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnIdentificacion As DataColumn
        
        Private columnNombre As DataColumn
        
        Private columnEstado_Civil As DataColumn
        
        Private columnHijos As DataColumn
        
        Private columnCod_Nacionalidad As DataColumn
        
        Private columnFecha_Nacimiento As DataColumn
        
        Private columnEdad As DataColumn
        
        Private columnTelefono1 As DataColumn
        
        Private columnTelefono2 As DataColumn
        
        Private columnEmail As DataColumn
        
        Private columnDireccion As DataColumn
        
        Private columnPuesto As DataColumn
        
        Private columnFecha_Ingreso As DataColumn
        
        Private columnFecha_Salida As DataColumn
        
        Private columnSalario As DataColumn
        
        Private columnCod_Departamento As DataColumn
        
        Private columnMasculino As DataColumn
        
        Private columnFemenino As DataColumn
        
        Private columnCod_Moneda As DataColumn
        
        Private columnHora As DataColumn
        
        Private columnDiario As DataColumn
        
        Private columnSemana As DataColumn
        
        Private columnQuincena As DataColumn
        
        Private columnMensual As DataColumn
        
        Private columnCod_Estado As DataColumn
        
        Private columnFoto As DataColumn
        
        Friend Sub New()
            MyBase.New("Empleado")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IdentificacionColumn As DataColumn
            Get
                Return Me.columnIdentificacion
            End Get
        End Property
        
        Friend ReadOnly Property NombreColumn As DataColumn
            Get
                Return Me.columnNombre
            End Get
        End Property
        
        Friend ReadOnly Property Estado_CivilColumn As DataColumn
            Get
                Return Me.columnEstado_Civil
            End Get
        End Property
        
        Friend ReadOnly Property HijosColumn As DataColumn
            Get
                Return Me.columnHijos
            End Get
        End Property
        
        Friend ReadOnly Property Cod_NacionalidadColumn As DataColumn
            Get
                Return Me.columnCod_Nacionalidad
            End Get
        End Property
        
        Friend ReadOnly Property Fecha_NacimientoColumn As DataColumn
            Get
                Return Me.columnFecha_Nacimiento
            End Get
        End Property
        
        Friend ReadOnly Property EdadColumn As DataColumn
            Get
                Return Me.columnEdad
            End Get
        End Property
        
        Friend ReadOnly Property Telefono1Column As DataColumn
            Get
                Return Me.columnTelefono1
            End Get
        End Property
        
        Friend ReadOnly Property Telefono2Column As DataColumn
            Get
                Return Me.columnTelefono2
            End Get
        End Property
        
        Friend ReadOnly Property EmailColumn As DataColumn
            Get
                Return Me.columnEmail
            End Get
        End Property
        
        Friend ReadOnly Property DireccionColumn As DataColumn
            Get
                Return Me.columnDireccion
            End Get
        End Property
        
        Friend ReadOnly Property PuestoColumn As DataColumn
            Get
                Return Me.columnPuesto
            End Get
        End Property
        
        Friend ReadOnly Property Fecha_IngresoColumn As DataColumn
            Get
                Return Me.columnFecha_Ingreso
            End Get
        End Property
        
        Friend ReadOnly Property Fecha_SalidaColumn As DataColumn
            Get
                Return Me.columnFecha_Salida
            End Get
        End Property
        
        Friend ReadOnly Property SalarioColumn As DataColumn
            Get
                Return Me.columnSalario
            End Get
        End Property
        
        Friend ReadOnly Property Cod_DepartamentoColumn As DataColumn
            Get
                Return Me.columnCod_Departamento
            End Get
        End Property
        
        Friend ReadOnly Property MasculinoColumn As DataColumn
            Get
                Return Me.columnMasculino
            End Get
        End Property
        
        Friend ReadOnly Property FemeninoColumn As DataColumn
            Get
                Return Me.columnFemenino
            End Get
        End Property
        
        Friend ReadOnly Property Cod_MonedaColumn As DataColumn
            Get
                Return Me.columnCod_Moneda
            End Get
        End Property
        
        Friend ReadOnly Property HoraColumn As DataColumn
            Get
                Return Me.columnHora
            End Get
        End Property
        
        Friend ReadOnly Property DiarioColumn As DataColumn
            Get
                Return Me.columnDiario
            End Get
        End Property
        
        Friend ReadOnly Property SemanaColumn As DataColumn
            Get
                Return Me.columnSemana
            End Get
        End Property
        
        Friend ReadOnly Property QuincenaColumn As DataColumn
            Get
                Return Me.columnQuincena
            End Get
        End Property
        
        Friend ReadOnly Property MensualColumn As DataColumn
            Get
                Return Me.columnMensual
            End Get
        End Property
        
        Friend ReadOnly Property Cod_EstadoColumn As DataColumn
            Get
                Return Me.columnCod_Estado
            End Get
        End Property
        
        Friend ReadOnly Property FotoColumn As DataColumn
            Get
                Return Me.columnFoto
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As EmpleadoRow
            Get
                Return CType(Me.Rows(index),EmpleadoRow)
            End Get
        End Property
        
        Public Event EmpleadoRowChanged As EmpleadoRowChangeEventHandler
        
        Public Event EmpleadoRowChanging As EmpleadoRowChangeEventHandler
        
        Public Event EmpleadoRowDeleted As EmpleadoRowChangeEventHandler
        
        Public Event EmpleadoRowDeleting As EmpleadoRowChangeEventHandler
        
        Public Overloads Sub AddEmpleadoRow(ByVal row As EmpleadoRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddEmpleadoRow( _
                    ByVal Identificacion As String,  _
                    ByVal Nombre As String,  _
                    ByVal Estado_Civil As String,  _
                    ByVal Hijos As Integer,  _
                    ByVal Cod_Nacionalidad As Integer,  _
                    ByVal Fecha_Nacimiento As Date,  _
                    ByVal Edad As Integer,  _
                    ByVal Telefono1 As String,  _
                    ByVal Telefono2 As String,  _
                    ByVal Email As String,  _
                    ByVal Direccion As String,  _
                    ByVal Puesto As String,  _
                    ByVal Fecha_Ingreso As Date,  _
                    ByVal Fecha_Salida As Date,  _
                    ByVal Salario As Double,  _
                    ByVal Cod_Departamento As Integer,  _
                    ByVal Masculino As Boolean,  _
                    ByVal Femenino As Boolean,  _
                    ByVal Cod_Moneda As Integer,  _
                    ByVal Hora As Boolean,  _
                    ByVal Diario As Boolean,  _
                    ByVal Semana As Boolean,  _
                    ByVal Quincena As Boolean,  _
                    ByVal Mensual As Boolean,  _
                    ByVal Cod_Estado As Integer,  _
                    ByVal Foto() As Byte) As EmpleadoRow
            Dim rowEmpleadoRow As EmpleadoRow = CType(Me.NewRow,EmpleadoRow)
            rowEmpleadoRow.ItemArray = New Object() {Identificacion, Nombre, Estado_Civil, Hijos, Cod_Nacionalidad, Fecha_Nacimiento, Edad, Telefono1, Telefono2, Email, Direccion, Puesto, Fecha_Ingreso, Fecha_Salida, Salario, Cod_Departamento, Masculino, Femenino, Cod_Moneda, Hora, Diario, Semana, Quincena, Mensual, Cod_Estado, Foto}
            Me.Rows.Add(rowEmpleadoRow)
            Return rowEmpleadoRow
        End Function
        
        Public Function FindByIdentificacion(ByVal Identificacion As String) As EmpleadoRow
            Return CType(Me.Rows.Find(New Object() {Identificacion}),EmpleadoRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As EmpleadoDataTable = CType(MyBase.Clone,EmpleadoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New EmpleadoDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnIdentificacion = Me.Columns("Identificacion")
            Me.columnNombre = Me.Columns("Nombre")
            Me.columnEstado_Civil = Me.Columns("Estado_Civil")
            Me.columnHijos = Me.Columns("Hijos")
            Me.columnCod_Nacionalidad = Me.Columns("Cod_Nacionalidad")
            Me.columnFecha_Nacimiento = Me.Columns("Fecha_Nacimiento")
            Me.columnEdad = Me.Columns("Edad")
            Me.columnTelefono1 = Me.Columns("Telefono1")
            Me.columnTelefono2 = Me.Columns("Telefono2")
            Me.columnEmail = Me.Columns("Email")
            Me.columnDireccion = Me.Columns("Direccion")
            Me.columnPuesto = Me.Columns("Puesto")
            Me.columnFecha_Ingreso = Me.Columns("Fecha_Ingreso")
            Me.columnFecha_Salida = Me.Columns("Fecha_Salida")
            Me.columnSalario = Me.Columns("Salario")
            Me.columnCod_Departamento = Me.Columns("Cod_Departamento")
            Me.columnMasculino = Me.Columns("Masculino")
            Me.columnFemenino = Me.Columns("Femenino")
            Me.columnCod_Moneda = Me.Columns("Cod_Moneda")
            Me.columnHora = Me.Columns("Hora")
            Me.columnDiario = Me.Columns("Diario")
            Me.columnSemana = Me.Columns("Semana")
            Me.columnQuincena = Me.Columns("Quincena")
            Me.columnMensual = Me.Columns("Mensual")
            Me.columnCod_Estado = Me.Columns("Cod_Estado")
            Me.columnFoto = Me.Columns("Foto")
        End Sub
        
        Private Sub InitClass()
            Me.columnIdentificacion = New DataColumn("Identificacion", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdentificacion)
            Me.columnNombre = New DataColumn("Nombre", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNombre)
            Me.columnEstado_Civil = New DataColumn("Estado_Civil", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEstado_Civil)
            Me.columnHijos = New DataColumn("Hijos", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHijos)
            Me.columnCod_Nacionalidad = New DataColumn("Cod_Nacionalidad", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCod_Nacionalidad)
            Me.columnFecha_Nacimiento = New DataColumn("Fecha_Nacimiento", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFecha_Nacimiento)
            Me.columnEdad = New DataColumn("Edad", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEdad)
            Me.columnTelefono1 = New DataColumn("Telefono1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTelefono1)
            Me.columnTelefono2 = New DataColumn("Telefono2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTelefono2)
            Me.columnEmail = New DataColumn("Email", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEmail)
            Me.columnDireccion = New DataColumn("Direccion", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDireccion)
            Me.columnPuesto = New DataColumn("Puesto", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPuesto)
            Me.columnFecha_Ingreso = New DataColumn("Fecha_Ingreso", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFecha_Ingreso)
            Me.columnFecha_Salida = New DataColumn("Fecha_Salida", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFecha_Salida)
            Me.columnSalario = New DataColumn("Salario", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSalario)
            Me.columnCod_Departamento = New DataColumn("Cod_Departamento", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCod_Departamento)
            Me.columnMasculino = New DataColumn("Masculino", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMasculino)
            Me.columnFemenino = New DataColumn("Femenino", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFemenino)
            Me.columnCod_Moneda = New DataColumn("Cod_Moneda", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCod_Moneda)
            Me.columnHora = New DataColumn("Hora", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHora)
            Me.columnDiario = New DataColumn("Diario", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDiario)
            Me.columnSemana = New DataColumn("Semana", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSemana)
            Me.columnQuincena = New DataColumn("Quincena", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnQuincena)
            Me.columnMensual = New DataColumn("Mensual", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMensual)
            Me.columnCod_Estado = New DataColumn("Cod_Estado", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCod_Estado)
            Me.columnFoto = New DataColumn("Foto", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFoto)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnIdentificacion}, true))
            Me.columnIdentificacion.AllowDBNull = false
            Me.columnIdentificacion.Unique = true
            Me.columnNombre.AllowDBNull = false
            Me.columnEstado_Civil.AllowDBNull = false
            Me.columnHijos.AllowDBNull = false
            Me.columnCod_Nacionalidad.AllowDBNull = false
            Me.columnFecha_Nacimiento.AllowDBNull = false
            Me.columnEdad.AllowDBNull = false
            Me.columnTelefono1.AllowDBNull = false
            Me.columnTelefono2.AllowDBNull = false
            Me.columnEmail.AllowDBNull = false
            Me.columnDireccion.AllowDBNull = false
            Me.columnPuesto.AllowDBNull = false
            Me.columnFecha_Ingreso.AllowDBNull = false
            Me.columnFecha_Salida.AllowDBNull = false
            Me.columnSalario.AllowDBNull = false
            Me.columnCod_Departamento.AllowDBNull = false
            Me.columnMasculino.AllowDBNull = false
            Me.columnFemenino.AllowDBNull = false
            Me.columnCod_Moneda.AllowDBNull = false
            Me.columnHora.AllowDBNull = false
            Me.columnDiario.AllowDBNull = false
            Me.columnSemana.AllowDBNull = false
            Me.columnQuincena.AllowDBNull = false
            Me.columnMensual.AllowDBNull = false
            Me.columnCod_Estado.AllowDBNull = false
        End Sub
        
        Public Function NewEmpleadoRow() As EmpleadoRow
            Return CType(Me.NewRow,EmpleadoRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New EmpleadoRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(EmpleadoRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EmpleadoRowChangedEvent) Is Nothing) Then
                RaiseEvent EmpleadoRowChanged(Me, New EmpleadoRowChangeEvent(CType(e.Row,EmpleadoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EmpleadoRowChangingEvent) Is Nothing) Then
                RaiseEvent EmpleadoRowChanging(Me, New EmpleadoRowChangeEvent(CType(e.Row,EmpleadoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EmpleadoRowDeletedEvent) Is Nothing) Then
                RaiseEvent EmpleadoRowDeleted(Me, New EmpleadoRowChangeEvent(CType(e.Row,EmpleadoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EmpleadoRowDeletingEvent) Is Nothing) Then
                RaiseEvent EmpleadoRowDeleting(Me, New EmpleadoRowChangeEvent(CType(e.Row,EmpleadoRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveEmpleadoRow(ByVal row As EmpleadoRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class EmpleadoRow
        Inherits DataRow
        
        Private tableEmpleado As EmpleadoDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableEmpleado = CType(Me.Table,EmpleadoDataTable)
        End Sub
        
        Public Property Identificacion As String
            Get
                Return CType(Me(Me.tableEmpleado.IdentificacionColumn),String)
            End Get
            Set
                Me(Me.tableEmpleado.IdentificacionColumn) = value
            End Set
        End Property
        
        Public Property Nombre As String
            Get
                Return CType(Me(Me.tableEmpleado.NombreColumn),String)
            End Get
            Set
                Me(Me.tableEmpleado.NombreColumn) = value
            End Set
        End Property
        
        Public Property Estado_Civil As String
            Get
                Return CType(Me(Me.tableEmpleado.Estado_CivilColumn),String)
            End Get
            Set
                Me(Me.tableEmpleado.Estado_CivilColumn) = value
            End Set
        End Property
        
        Public Property Hijos As Integer
            Get
                Return CType(Me(Me.tableEmpleado.HijosColumn),Integer)
            End Get
            Set
                Me(Me.tableEmpleado.HijosColumn) = value
            End Set
        End Property
        
        Public Property Cod_Nacionalidad As Integer
            Get
                Return CType(Me(Me.tableEmpleado.Cod_NacionalidadColumn),Integer)
            End Get
            Set
                Me(Me.tableEmpleado.Cod_NacionalidadColumn) = value
            End Set
        End Property
        
        Public Property Fecha_Nacimiento As Date
            Get
                Return CType(Me(Me.tableEmpleado.Fecha_NacimientoColumn),Date)
            End Get
            Set
                Me(Me.tableEmpleado.Fecha_NacimientoColumn) = value
            End Set
        End Property
        
        Public Property Edad As Integer
            Get
                Return CType(Me(Me.tableEmpleado.EdadColumn),Integer)
            End Get
            Set
                Me(Me.tableEmpleado.EdadColumn) = value
            End Set
        End Property
        
        Public Property Telefono1 As String
            Get
                Return CType(Me(Me.tableEmpleado.Telefono1Column),String)
            End Get
            Set
                Me(Me.tableEmpleado.Telefono1Column) = value
            End Set
        End Property
        
        Public Property Telefono2 As String
            Get
                Return CType(Me(Me.tableEmpleado.Telefono2Column),String)
            End Get
            Set
                Me(Me.tableEmpleado.Telefono2Column) = value
            End Set
        End Property
        
        Public Property Email As String
            Get
                Return CType(Me(Me.tableEmpleado.EmailColumn),String)
            End Get
            Set
                Me(Me.tableEmpleado.EmailColumn) = value
            End Set
        End Property
        
        Public Property Direccion As String
            Get
                Return CType(Me(Me.tableEmpleado.DireccionColumn),String)
            End Get
            Set
                Me(Me.tableEmpleado.DireccionColumn) = value
            End Set
        End Property
        
        Public Property Puesto As String
            Get
                Return CType(Me(Me.tableEmpleado.PuestoColumn),String)
            End Get
            Set
                Me(Me.tableEmpleado.PuestoColumn) = value
            End Set
        End Property
        
        Public Property Fecha_Ingreso As Date
            Get
                Return CType(Me(Me.tableEmpleado.Fecha_IngresoColumn),Date)
            End Get
            Set
                Me(Me.tableEmpleado.Fecha_IngresoColumn) = value
            End Set
        End Property
        
        Public Property Fecha_Salida As Date
            Get
                Return CType(Me(Me.tableEmpleado.Fecha_SalidaColumn),Date)
            End Get
            Set
                Me(Me.tableEmpleado.Fecha_SalidaColumn) = value
            End Set
        End Property
        
        Public Property Salario As Double
            Get
                Return CType(Me(Me.tableEmpleado.SalarioColumn),Double)
            End Get
            Set
                Me(Me.tableEmpleado.SalarioColumn) = value
            End Set
        End Property
        
        Public Property Cod_Departamento As Integer
            Get
                Return CType(Me(Me.tableEmpleado.Cod_DepartamentoColumn),Integer)
            End Get
            Set
                Me(Me.tableEmpleado.Cod_DepartamentoColumn) = value
            End Set
        End Property
        
        Public Property Masculino As Boolean
            Get
                Return CType(Me(Me.tableEmpleado.MasculinoColumn),Boolean)
            End Get
            Set
                Me(Me.tableEmpleado.MasculinoColumn) = value
            End Set
        End Property
        
        Public Property Femenino As Boolean
            Get
                Return CType(Me(Me.tableEmpleado.FemeninoColumn),Boolean)
            End Get
            Set
                Me(Me.tableEmpleado.FemeninoColumn) = value
            End Set
        End Property
        
        Public Property Cod_Moneda As Integer
            Get
                Return CType(Me(Me.tableEmpleado.Cod_MonedaColumn),Integer)
            End Get
            Set
                Me(Me.tableEmpleado.Cod_MonedaColumn) = value
            End Set
        End Property
        
        Public Property Hora As Boolean
            Get
                Return CType(Me(Me.tableEmpleado.HoraColumn),Boolean)
            End Get
            Set
                Me(Me.tableEmpleado.HoraColumn) = value
            End Set
        End Property
        
        Public Property Diario As Boolean
            Get
                Return CType(Me(Me.tableEmpleado.DiarioColumn),Boolean)
            End Get
            Set
                Me(Me.tableEmpleado.DiarioColumn) = value
            End Set
        End Property
        
        Public Property Semana As Boolean
            Get
                Return CType(Me(Me.tableEmpleado.SemanaColumn),Boolean)
            End Get
            Set
                Me(Me.tableEmpleado.SemanaColumn) = value
            End Set
        End Property
        
        Public Property Quincena As Boolean
            Get
                Return CType(Me(Me.tableEmpleado.QuincenaColumn),Boolean)
            End Get
            Set
                Me(Me.tableEmpleado.QuincenaColumn) = value
            End Set
        End Property
        
        Public Property Mensual As Boolean
            Get
                Return CType(Me(Me.tableEmpleado.MensualColumn),Boolean)
            End Get
            Set
                Me(Me.tableEmpleado.MensualColumn) = value
            End Set
        End Property
        
        Public Property Cod_Estado As Integer
            Get
                Return CType(Me(Me.tableEmpleado.Cod_EstadoColumn),Integer)
            End Get
            Set
                Me(Me.tableEmpleado.Cod_EstadoColumn) = value
            End Set
        End Property
        
        Public Property Foto As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableEmpleado.FotoColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEmpleado.FotoColumn) = value
            End Set
        End Property
        
        Public Function IsFotoNull() As Boolean
            Return Me.IsNull(Me.tableEmpleado.FotoColumn)
        End Function
        
        Public Sub SetFotoNull()
            Me(Me.tableEmpleado.FotoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetAccionPersonalRows() As AccionPersonalRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("EmpleadoAccionPersonal")),AccionPersonalRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class EmpleadoRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As EmpleadoRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As EmpleadoRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As EmpleadoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AccionDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCodigo As DataColumn
        
        Private columnDescripcion As DataColumn
        
        Private columnRangoFecha As DataColumn
        
        Private columnNombre As DataColumn
        
        Friend Sub New()
            MyBase.New("Accion")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property CodigoColumn As DataColumn
            Get
                Return Me.columnCodigo
            End Get
        End Property
        
        Friend ReadOnly Property DescripcionColumn As DataColumn
            Get
                Return Me.columnDescripcion
            End Get
        End Property
        
        Friend ReadOnly Property RangoFechaColumn As DataColumn
            Get
                Return Me.columnRangoFecha
            End Get
        End Property
        
        Friend ReadOnly Property NombreColumn As DataColumn
            Get
                Return Me.columnNombre
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As AccionRow
            Get
                Return CType(Me.Rows(index),AccionRow)
            End Get
        End Property
        
        Public Event AccionRowChanged As AccionRowChangeEventHandler
        
        Public Event AccionRowChanging As AccionRowChangeEventHandler
        
        Public Event AccionRowDeleted As AccionRowChangeEventHandler
        
        Public Event AccionRowDeleting As AccionRowChangeEventHandler
        
        Public Overloads Sub AddAccionRow(ByVal row As AccionRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddAccionRow(ByVal Descripcion As String, ByVal RangoFecha As Boolean, ByVal Nombre As String) As AccionRow
            Dim rowAccionRow As AccionRow = CType(Me.NewRow,AccionRow)
            rowAccionRow.ItemArray = New Object() {Nothing, Descripcion, RangoFecha, Nombre}
            Me.Rows.Add(rowAccionRow)
            Return rowAccionRow
        End Function
        
        Public Function FindByCodigo(ByVal Codigo As Integer) As AccionRow
            Return CType(Me.Rows.Find(New Object() {Codigo}),AccionRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As AccionDataTable = CType(MyBase.Clone,AccionDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New AccionDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCodigo = Me.Columns("Codigo")
            Me.columnDescripcion = Me.Columns("Descripcion")
            Me.columnRangoFecha = Me.Columns("RangoFecha")
            Me.columnNombre = Me.Columns("Nombre")
        End Sub
        
        Private Sub InitClass()
            Me.columnCodigo = New DataColumn("Codigo", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCodigo)
            Me.columnDescripcion = New DataColumn("Descripcion", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescripcion)
            Me.columnRangoFecha = New DataColumn("RangoFecha", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRangoFecha)
            Me.columnNombre = New DataColumn("Nombre", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNombre)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnCodigo}, true))
            Me.columnCodigo.AutoIncrement = true
            Me.columnCodigo.AllowDBNull = false
            Me.columnCodigo.ReadOnly = true
            Me.columnCodigo.Unique = true
            Me.columnDescripcion.AllowDBNull = false
            Me.columnRangoFecha.AllowDBNull = false
            Me.columnNombre.AllowDBNull = false
        End Sub
        
        Public Function NewAccionRow() As AccionRow
            Return CType(Me.NewRow,AccionRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New AccionRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(AccionRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AccionRowChangedEvent) Is Nothing) Then
                RaiseEvent AccionRowChanged(Me, New AccionRowChangeEvent(CType(e.Row,AccionRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AccionRowChangingEvent) Is Nothing) Then
                RaiseEvent AccionRowChanging(Me, New AccionRowChangeEvent(CType(e.Row,AccionRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AccionRowDeletedEvent) Is Nothing) Then
                RaiseEvent AccionRowDeleted(Me, New AccionRowChangeEvent(CType(e.Row,AccionRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AccionRowDeletingEvent) Is Nothing) Then
                RaiseEvent AccionRowDeleting(Me, New AccionRowChangeEvent(CType(e.Row,AccionRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveAccionRow(ByVal row As AccionRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AccionRow
        Inherits DataRow
        
        Private tableAccion As AccionDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableAccion = CType(Me.Table,AccionDataTable)
        End Sub
        
        Public Property Codigo As Integer
            Get
                Return CType(Me(Me.tableAccion.CodigoColumn),Integer)
            End Get
            Set
                Me(Me.tableAccion.CodigoColumn) = value
            End Set
        End Property
        
        Public Property Descripcion As String
            Get
                Return CType(Me(Me.tableAccion.DescripcionColumn),String)
            End Get
            Set
                Me(Me.tableAccion.DescripcionColumn) = value
            End Set
        End Property
        
        Public Property RangoFecha As Boolean
            Get
                Return CType(Me(Me.tableAccion.RangoFechaColumn),Boolean)
            End Get
            Set
                Me(Me.tableAccion.RangoFechaColumn) = value
            End Set
        End Property
        
        Public Property Nombre As String
            Get
                Return CType(Me(Me.tableAccion.NombreColumn),String)
            End Get
            Set
                Me(Me.tableAccion.NombreColumn) = value
            End Set
        End Property
        
        Public Function GetAccionPersonalRows() As AccionPersonalRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("AccionAccionPersonal")),AccionPersonalRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AccionRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As AccionRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As AccionRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As AccionRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class UsuariosDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCedula As DataColumn
        
        Private columnNombre As DataColumn
        
        Private columnClave_Interna As DataColumn
        
        Private columnClave_Entrada As DataColumn
        
        Private columnPerfil As DataColumn
        
        Private columnAnu_Venta As DataColumn
        
        Private columnAnu_Cotizacion As DataColumn
        
        Private columnCambiarPrecio As DataColumn
        
        Private columnAplicar_Desc As DataColumn
        
        Private columnExist_Negativa As DataColumn
        
        Private columnRecibosDinero As DataColumn
        
        Private columnAnuRecibos As DataColumn
        
        Private columnVariarIntereses As DataColumn
        
        Private columnPorc_Desc As DataColumn
        
        Private columnPorc_Precio As DataColumn
        
        Private columnFoto As DataColumn
        
        Private columnAbrir_Credito As DataColumn
        
        Friend Sub New()
            MyBase.New("Usuarios")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property CedulaColumn As DataColumn
            Get
                Return Me.columnCedula
            End Get
        End Property
        
        Friend ReadOnly Property NombreColumn As DataColumn
            Get
                Return Me.columnNombre
            End Get
        End Property
        
        Friend ReadOnly Property Clave_InternaColumn As DataColumn
            Get
                Return Me.columnClave_Interna
            End Get
        End Property
        
        Friend ReadOnly Property Clave_EntradaColumn As DataColumn
            Get
                Return Me.columnClave_Entrada
            End Get
        End Property
        
        Friend ReadOnly Property PerfilColumn As DataColumn
            Get
                Return Me.columnPerfil
            End Get
        End Property
        
        Friend ReadOnly Property Anu_VentaColumn As DataColumn
            Get
                Return Me.columnAnu_Venta
            End Get
        End Property
        
        Friend ReadOnly Property Anu_CotizacionColumn As DataColumn
            Get
                Return Me.columnAnu_Cotizacion
            End Get
        End Property
        
        Friend ReadOnly Property CambiarPrecioColumn As DataColumn
            Get
                Return Me.columnCambiarPrecio
            End Get
        End Property
        
        Friend ReadOnly Property Aplicar_DescColumn As DataColumn
            Get
                Return Me.columnAplicar_Desc
            End Get
        End Property
        
        Friend ReadOnly Property Exist_NegativaColumn As DataColumn
            Get
                Return Me.columnExist_Negativa
            End Get
        End Property
        
        Friend ReadOnly Property RecibosDineroColumn As DataColumn
            Get
                Return Me.columnRecibosDinero
            End Get
        End Property
        
        Friend ReadOnly Property AnuRecibosColumn As DataColumn
            Get
                Return Me.columnAnuRecibos
            End Get
        End Property
        
        Friend ReadOnly Property VariarInteresesColumn As DataColumn
            Get
                Return Me.columnVariarIntereses
            End Get
        End Property
        
        Friend ReadOnly Property Porc_DescColumn As DataColumn
            Get
                Return Me.columnPorc_Desc
            End Get
        End Property
        
        Friend ReadOnly Property Porc_PrecioColumn As DataColumn
            Get
                Return Me.columnPorc_Precio
            End Get
        End Property
        
        Friend ReadOnly Property FotoColumn As DataColumn
            Get
                Return Me.columnFoto
            End Get
        End Property
        
        Friend ReadOnly Property Abrir_CreditoColumn As DataColumn
            Get
                Return Me.columnAbrir_Credito
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As UsuariosRow
            Get
                Return CType(Me.Rows(index),UsuariosRow)
            End Get
        End Property
        
        Public Event UsuariosRowChanged As UsuariosRowChangeEventHandler
        
        Public Event UsuariosRowChanging As UsuariosRowChangeEventHandler
        
        Public Event UsuariosRowDeleted As UsuariosRowChangeEventHandler
        
        Public Event UsuariosRowDeleting As UsuariosRowChangeEventHandler
        
        Public Overloads Sub AddUsuariosRow(ByVal row As UsuariosRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddUsuariosRow( _
                    ByVal Cedula As String,  _
                    ByVal Nombre As String,  _
                    ByVal Clave_Interna As String,  _
                    ByVal Clave_Entrada As String,  _
                    ByVal Perfil As String,  _
                    ByVal Anu_Venta As Boolean,  _
                    ByVal Anu_Cotizacion As Boolean,  _
                    ByVal CambiarPrecio As Boolean,  _
                    ByVal Aplicar_Desc As Boolean,  _
                    ByVal Exist_Negativa As Boolean,  _
                    ByVal RecibosDinero As Boolean,  _
                    ByVal AnuRecibos As Boolean,  _
                    ByVal VariarIntereses As Boolean,  _
                    ByVal Porc_Desc As Double,  _
                    ByVal Porc_Precio As Double,  _
                    ByVal Foto() As Byte,  _
                    ByVal Abrir_Credito As Boolean) As UsuariosRow
            Dim rowUsuariosRow As UsuariosRow = CType(Me.NewRow,UsuariosRow)
            rowUsuariosRow.ItemArray = New Object() {Cedula, Nombre, Clave_Interna, Clave_Entrada, Perfil, Anu_Venta, Anu_Cotizacion, CambiarPrecio, Aplicar_Desc, Exist_Negativa, RecibosDinero, AnuRecibos, VariarIntereses, Porc_Desc, Porc_Precio, Foto, Abrir_Credito}
            Me.Rows.Add(rowUsuariosRow)
            Return rowUsuariosRow
        End Function
        
        Public Function FindByCedula(ByVal Cedula As String) As UsuariosRow
            Return CType(Me.Rows.Find(New Object() {Cedula}),UsuariosRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As UsuariosDataTable = CType(MyBase.Clone,UsuariosDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New UsuariosDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCedula = Me.Columns("Cedula")
            Me.columnNombre = Me.Columns("Nombre")
            Me.columnClave_Interna = Me.Columns("Clave_Interna")
            Me.columnClave_Entrada = Me.Columns("Clave_Entrada")
            Me.columnPerfil = Me.Columns("Perfil")
            Me.columnAnu_Venta = Me.Columns("Anu_Venta")
            Me.columnAnu_Cotizacion = Me.Columns("Anu_Cotizacion")
            Me.columnCambiarPrecio = Me.Columns("CambiarPrecio")
            Me.columnAplicar_Desc = Me.Columns("Aplicar_Desc")
            Me.columnExist_Negativa = Me.Columns("Exist_Negativa")
            Me.columnRecibosDinero = Me.Columns("RecibosDinero")
            Me.columnAnuRecibos = Me.Columns("AnuRecibos")
            Me.columnVariarIntereses = Me.Columns("VariarIntereses")
            Me.columnPorc_Desc = Me.Columns("Porc_Desc")
            Me.columnPorc_Precio = Me.Columns("Porc_Precio")
            Me.columnFoto = Me.Columns("Foto")
            Me.columnAbrir_Credito = Me.Columns("Abrir_Credito")
        End Sub
        
        Private Sub InitClass()
            Me.columnCedula = New DataColumn("Cedula", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCedula)
            Me.columnNombre = New DataColumn("Nombre", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNombre)
            Me.columnClave_Interna = New DataColumn("Clave_Interna", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnClave_Interna)
            Me.columnClave_Entrada = New DataColumn("Clave_Entrada", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnClave_Entrada)
            Me.columnPerfil = New DataColumn("Perfil", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPerfil)
            Me.columnAnu_Venta = New DataColumn("Anu_Venta", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAnu_Venta)
            Me.columnAnu_Cotizacion = New DataColumn("Anu_Cotizacion", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAnu_Cotizacion)
            Me.columnCambiarPrecio = New DataColumn("CambiarPrecio", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCambiarPrecio)
            Me.columnAplicar_Desc = New DataColumn("Aplicar_Desc", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAplicar_Desc)
            Me.columnExist_Negativa = New DataColumn("Exist_Negativa", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnExist_Negativa)
            Me.columnRecibosDinero = New DataColumn("RecibosDinero", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRecibosDinero)
            Me.columnAnuRecibos = New DataColumn("AnuRecibos", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAnuRecibos)
            Me.columnVariarIntereses = New DataColumn("VariarIntereses", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVariarIntereses)
            Me.columnPorc_Desc = New DataColumn("Porc_Desc", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPorc_Desc)
            Me.columnPorc_Precio = New DataColumn("Porc_Precio", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPorc_Precio)
            Me.columnFoto = New DataColumn("Foto", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFoto)
            Me.columnAbrir_Credito = New DataColumn("Abrir_Credito", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAbrir_Credito)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnCedula}, true))
            Me.columnCedula.AllowDBNull = false
            Me.columnCedula.Unique = true
            Me.columnNombre.AllowDBNull = false
            Me.columnClave_Interna.AllowDBNull = false
            Me.columnClave_Entrada.AllowDBNull = false
            Me.columnPerfil.AllowDBNull = false
            Me.columnAnu_Venta.AllowDBNull = false
            Me.columnAnu_Cotizacion.AllowDBNull = false
            Me.columnCambiarPrecio.AllowDBNull = false
            Me.columnAplicar_Desc.AllowDBNull = false
            Me.columnExist_Negativa.AllowDBNull = false
            Me.columnRecibosDinero.AllowDBNull = false
            Me.columnAnuRecibos.AllowDBNull = false
            Me.columnVariarIntereses.AllowDBNull = false
            Me.columnPorc_Desc.AllowDBNull = false
            Me.columnPorc_Precio.AllowDBNull = false
            Me.columnAbrir_Credito.AllowDBNull = false
        End Sub
        
        Public Function NewUsuariosRow() As UsuariosRow
            Return CType(Me.NewRow,UsuariosRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New UsuariosRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(UsuariosRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.UsuariosRowChangedEvent) Is Nothing) Then
                RaiseEvent UsuariosRowChanged(Me, New UsuariosRowChangeEvent(CType(e.Row,UsuariosRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.UsuariosRowChangingEvent) Is Nothing) Then
                RaiseEvent UsuariosRowChanging(Me, New UsuariosRowChangeEvent(CType(e.Row,UsuariosRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.UsuariosRowDeletedEvent) Is Nothing) Then
                RaiseEvent UsuariosRowDeleted(Me, New UsuariosRowChangeEvent(CType(e.Row,UsuariosRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.UsuariosRowDeletingEvent) Is Nothing) Then
                RaiseEvent UsuariosRowDeleting(Me, New UsuariosRowChangeEvent(CType(e.Row,UsuariosRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveUsuariosRow(ByVal row As UsuariosRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class UsuariosRow
        Inherits DataRow
        
        Private tableUsuarios As UsuariosDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableUsuarios = CType(Me.Table,UsuariosDataTable)
        End Sub
        
        Public Property Cedula As String
            Get
                Return CType(Me(Me.tableUsuarios.CedulaColumn),String)
            End Get
            Set
                Me(Me.tableUsuarios.CedulaColumn) = value
            End Set
        End Property
        
        Public Property Nombre As String
            Get
                Return CType(Me(Me.tableUsuarios.NombreColumn),String)
            End Get
            Set
                Me(Me.tableUsuarios.NombreColumn) = value
            End Set
        End Property
        
        Public Property Clave_Interna As String
            Get
                Return CType(Me(Me.tableUsuarios.Clave_InternaColumn),String)
            End Get
            Set
                Me(Me.tableUsuarios.Clave_InternaColumn) = value
            End Set
        End Property
        
        Public Property Clave_Entrada As String
            Get
                Return CType(Me(Me.tableUsuarios.Clave_EntradaColumn),String)
            End Get
            Set
                Me(Me.tableUsuarios.Clave_EntradaColumn) = value
            End Set
        End Property
        
        Public Property Perfil As String
            Get
                Return CType(Me(Me.tableUsuarios.PerfilColumn),String)
            End Get
            Set
                Me(Me.tableUsuarios.PerfilColumn) = value
            End Set
        End Property
        
        Public Property Anu_Venta As Boolean
            Get
                Return CType(Me(Me.tableUsuarios.Anu_VentaColumn),Boolean)
            End Get
            Set
                Me(Me.tableUsuarios.Anu_VentaColumn) = value
            End Set
        End Property
        
        Public Property Anu_Cotizacion As Boolean
            Get
                Return CType(Me(Me.tableUsuarios.Anu_CotizacionColumn),Boolean)
            End Get
            Set
                Me(Me.tableUsuarios.Anu_CotizacionColumn) = value
            End Set
        End Property
        
        Public Property CambiarPrecio As Boolean
            Get
                Return CType(Me(Me.tableUsuarios.CambiarPrecioColumn),Boolean)
            End Get
            Set
                Me(Me.tableUsuarios.CambiarPrecioColumn) = value
            End Set
        End Property
        
        Public Property Aplicar_Desc As Boolean
            Get
                Return CType(Me(Me.tableUsuarios.Aplicar_DescColumn),Boolean)
            End Get
            Set
                Me(Me.tableUsuarios.Aplicar_DescColumn) = value
            End Set
        End Property
        
        Public Property Exist_Negativa As Boolean
            Get
                Return CType(Me(Me.tableUsuarios.Exist_NegativaColumn),Boolean)
            End Get
            Set
                Me(Me.tableUsuarios.Exist_NegativaColumn) = value
            End Set
        End Property
        
        Public Property RecibosDinero As Boolean
            Get
                Return CType(Me(Me.tableUsuarios.RecibosDineroColumn),Boolean)
            End Get
            Set
                Me(Me.tableUsuarios.RecibosDineroColumn) = value
            End Set
        End Property
        
        Public Property AnuRecibos As Boolean
            Get
                Return CType(Me(Me.tableUsuarios.AnuRecibosColumn),Boolean)
            End Get
            Set
                Me(Me.tableUsuarios.AnuRecibosColumn) = value
            End Set
        End Property
        
        Public Property VariarIntereses As Boolean
            Get
                Return CType(Me(Me.tableUsuarios.VariarInteresesColumn),Boolean)
            End Get
            Set
                Me(Me.tableUsuarios.VariarInteresesColumn) = value
            End Set
        End Property
        
        Public Property Porc_Desc As Double
            Get
                Return CType(Me(Me.tableUsuarios.Porc_DescColumn),Double)
            End Get
            Set
                Me(Me.tableUsuarios.Porc_DescColumn) = value
            End Set
        End Property
        
        Public Property Porc_Precio As Double
            Get
                Return CType(Me(Me.tableUsuarios.Porc_PrecioColumn),Double)
            End Get
            Set
                Me(Me.tableUsuarios.Porc_PrecioColumn) = value
            End Set
        End Property
        
        Public Property Foto As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableUsuarios.FotoColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUsuarios.FotoColumn) = value
            End Set
        End Property
        
        Public Property Abrir_Credito As Boolean
            Get
                Return CType(Me(Me.tableUsuarios.Abrir_CreditoColumn),Boolean)
            End Get
            Set
                Me(Me.tableUsuarios.Abrir_CreditoColumn) = value
            End Set
        End Property
        
        Public Function IsFotoNull() As Boolean
            Return Me.IsNull(Me.tableUsuarios.FotoColumn)
        End Function
        
        Public Sub SetFotoNull()
            Me(Me.tableUsuarios.FotoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class UsuariosRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As UsuariosRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As UsuariosRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As UsuariosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AccionPersonalDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnNum_Accion As DataColumn
        
        Private columnId_Empleado As DataColumn
        
        Private columnNombre_Empleado As DataColumn
        
        Private columnPuesto As DataColumn
        
        Private columnId_Accion As DataColumn
        
        Private columnFecha As DataColumn
        
        Private columnObservaciones As DataColumn
        
        Private columnRigeDesde As DataColumn
        
        Private columnRigeHasta As DataColumn
        
        Private columnDiasaDescontar As DataColumn
        
        Private columnHechoPor As DataColumn
        
        Private columnNombreUsuario As DataColumn
        
        Private columnAnula As DataColumn
        
        Private columnEstadoCambio As DataColumn
        
        Private columnCod_Estado As DataColumn
        
        Friend Sub New()
            MyBase.New("AccionPersonal")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property Num_AccionColumn As DataColumn
            Get
                Return Me.columnNum_Accion
            End Get
        End Property
        
        Friend ReadOnly Property Id_EmpleadoColumn As DataColumn
            Get
                Return Me.columnId_Empleado
            End Get
        End Property
        
        Friend ReadOnly Property Nombre_EmpleadoColumn As DataColumn
            Get
                Return Me.columnNombre_Empleado
            End Get
        End Property
        
        Friend ReadOnly Property PuestoColumn As DataColumn
            Get
                Return Me.columnPuesto
            End Get
        End Property
        
        Friend ReadOnly Property Id_AccionColumn As DataColumn
            Get
                Return Me.columnId_Accion
            End Get
        End Property
        
        Friend ReadOnly Property FechaColumn As DataColumn
            Get
                Return Me.columnFecha
            End Get
        End Property
        
        Friend ReadOnly Property ObservacionesColumn As DataColumn
            Get
                Return Me.columnObservaciones
            End Get
        End Property
        
        Friend ReadOnly Property RigeDesdeColumn As DataColumn
            Get
                Return Me.columnRigeDesde
            End Get
        End Property
        
        Friend ReadOnly Property RigeHastaColumn As DataColumn
            Get
                Return Me.columnRigeHasta
            End Get
        End Property
        
        Friend ReadOnly Property DiasaDescontarColumn As DataColumn
            Get
                Return Me.columnDiasaDescontar
            End Get
        End Property
        
        Friend ReadOnly Property HechoPorColumn As DataColumn
            Get
                Return Me.columnHechoPor
            End Get
        End Property
        
        Friend ReadOnly Property NombreUsuarioColumn As DataColumn
            Get
                Return Me.columnNombreUsuario
            End Get
        End Property
        
        Friend ReadOnly Property AnulaColumn As DataColumn
            Get
                Return Me.columnAnula
            End Get
        End Property
        
        Friend ReadOnly Property EstadoCambioColumn As DataColumn
            Get
                Return Me.columnEstadoCambio
            End Get
        End Property
        
        Friend ReadOnly Property Cod_EstadoColumn As DataColumn
            Get
                Return Me.columnCod_Estado
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As AccionPersonalRow
            Get
                Return CType(Me.Rows(index),AccionPersonalRow)
            End Get
        End Property
        
        Public Event AccionPersonalRowChanged As AccionPersonalRowChangeEventHandler
        
        Public Event AccionPersonalRowChanging As AccionPersonalRowChangeEventHandler
        
        Public Event AccionPersonalRowDeleted As AccionPersonalRowChangeEventHandler
        
        Public Event AccionPersonalRowDeleting As AccionPersonalRowChangeEventHandler
        
        Public Overloads Sub AddAccionPersonalRow(ByVal row As AccionPersonalRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddAccionPersonalRow(ByVal parentEmpleadoRowByEmpleadoAccionPersonal As EmpleadoRow, ByVal Nombre_Empleado As String, ByVal Puesto As String, ByVal parentAccionRowByAccionAccionPersonal As AccionRow, ByVal Fecha As Date, ByVal Observaciones As String, ByVal RigeDesde As Date, ByVal RigeHasta As Date, ByVal DiasaDescontar As Double, ByVal HechoPor As String, ByVal NombreUsuario As String, ByVal Anula As Boolean, ByVal EstadoCambio As Boolean, ByVal Cod_Estado As Integer) As AccionPersonalRow
            Dim rowAccionPersonalRow As AccionPersonalRow = CType(Me.NewRow,AccionPersonalRow)
            rowAccionPersonalRow.ItemArray = New Object() {Nothing, parentEmpleadoRowByEmpleadoAccionPersonal(0), Nombre_Empleado, Puesto, parentAccionRowByAccionAccionPersonal(0), Fecha, Observaciones, RigeDesde, RigeHasta, DiasaDescontar, HechoPor, NombreUsuario, Anula, EstadoCambio, Cod_Estado}
            Me.Rows.Add(rowAccionPersonalRow)
            Return rowAccionPersonalRow
        End Function
        
        Public Function FindByNum_Accion(ByVal Num_Accion As Long) As AccionPersonalRow
            Return CType(Me.Rows.Find(New Object() {Num_Accion}),AccionPersonalRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As AccionPersonalDataTable = CType(MyBase.Clone,AccionPersonalDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New AccionPersonalDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnNum_Accion = Me.Columns("Num_Accion")
            Me.columnId_Empleado = Me.Columns("Id_Empleado")
            Me.columnNombre_Empleado = Me.Columns("Nombre_Empleado")
            Me.columnPuesto = Me.Columns("Puesto")
            Me.columnId_Accion = Me.Columns("Id_Accion")
            Me.columnFecha = Me.Columns("Fecha")
            Me.columnObservaciones = Me.Columns("Observaciones")
            Me.columnRigeDesde = Me.Columns("RigeDesde")
            Me.columnRigeHasta = Me.Columns("RigeHasta")
            Me.columnDiasaDescontar = Me.Columns("DiasaDescontar")
            Me.columnHechoPor = Me.Columns("HechoPor")
            Me.columnNombreUsuario = Me.Columns("NombreUsuario")
            Me.columnAnula = Me.Columns("Anula")
            Me.columnEstadoCambio = Me.Columns("EstadoCambio")
            Me.columnCod_Estado = Me.Columns("Cod_Estado")
        End Sub
        
        Private Sub InitClass()
            Me.columnNum_Accion = New DataColumn("Num_Accion", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNum_Accion)
            Me.columnId_Empleado = New DataColumn("Id_Empleado", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId_Empleado)
            Me.columnNombre_Empleado = New DataColumn("Nombre_Empleado", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNombre_Empleado)
            Me.columnPuesto = New DataColumn("Puesto", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPuesto)
            Me.columnId_Accion = New DataColumn("Id_Accion", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId_Accion)
            Me.columnFecha = New DataColumn("Fecha", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFecha)
            Me.columnObservaciones = New DataColumn("Observaciones", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnObservaciones)
            Me.columnRigeDesde = New DataColumn("RigeDesde", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRigeDesde)
            Me.columnRigeHasta = New DataColumn("RigeHasta", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRigeHasta)
            Me.columnDiasaDescontar = New DataColumn("DiasaDescontar", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDiasaDescontar)
            Me.columnHechoPor = New DataColumn("HechoPor", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHechoPor)
            Me.columnNombreUsuario = New DataColumn("NombreUsuario", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNombreUsuario)
            Me.columnAnula = New DataColumn("Anula", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAnula)
            Me.columnEstadoCambio = New DataColumn("EstadoCambio", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEstadoCambio)
            Me.columnCod_Estado = New DataColumn("Cod_Estado", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCod_Estado)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnNum_Accion}, true))
            Me.columnNum_Accion.AutoIncrement = true
            Me.columnNum_Accion.AllowDBNull = false
            Me.columnNum_Accion.ReadOnly = true
            Me.columnNum_Accion.Unique = true
            Me.columnId_Empleado.AllowDBNull = false
            Me.columnNombre_Empleado.AllowDBNull = false
            Me.columnPuesto.AllowDBNull = false
            Me.columnId_Accion.AllowDBNull = false
            Me.columnFecha.AllowDBNull = false
            Me.columnObservaciones.AllowDBNull = false
            Me.columnRigeDesde.AllowDBNull = false
            Me.columnRigeHasta.AllowDBNull = false
            Me.columnDiasaDescontar.AllowDBNull = false
            Me.columnHechoPor.AllowDBNull = false
            Me.columnNombreUsuario.AllowDBNull = false
            Me.columnAnula.AllowDBNull = false
            Me.columnEstadoCambio.AllowDBNull = false
            Me.columnCod_Estado.AllowDBNull = false
        End Sub
        
        Public Function NewAccionPersonalRow() As AccionPersonalRow
            Return CType(Me.NewRow,AccionPersonalRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New AccionPersonalRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(AccionPersonalRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AccionPersonalRowChangedEvent) Is Nothing) Then
                RaiseEvent AccionPersonalRowChanged(Me, New AccionPersonalRowChangeEvent(CType(e.Row,AccionPersonalRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AccionPersonalRowChangingEvent) Is Nothing) Then
                RaiseEvent AccionPersonalRowChanging(Me, New AccionPersonalRowChangeEvent(CType(e.Row,AccionPersonalRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AccionPersonalRowDeletedEvent) Is Nothing) Then
                RaiseEvent AccionPersonalRowDeleted(Me, New AccionPersonalRowChangeEvent(CType(e.Row,AccionPersonalRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AccionPersonalRowDeletingEvent) Is Nothing) Then
                RaiseEvent AccionPersonalRowDeleting(Me, New AccionPersonalRowChangeEvent(CType(e.Row,AccionPersonalRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveAccionPersonalRow(ByVal row As AccionPersonalRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AccionPersonalRow
        Inherits DataRow
        
        Private tableAccionPersonal As AccionPersonalDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableAccionPersonal = CType(Me.Table,AccionPersonalDataTable)
        End Sub
        
        Public Property Num_Accion As Long
            Get
                Return CType(Me(Me.tableAccionPersonal.Num_AccionColumn),Long)
            End Get
            Set
                Me(Me.tableAccionPersonal.Num_AccionColumn) = value
            End Set
        End Property
        
        Public Property Id_Empleado As String
            Get
                Return CType(Me(Me.tableAccionPersonal.Id_EmpleadoColumn),String)
            End Get
            Set
                Me(Me.tableAccionPersonal.Id_EmpleadoColumn) = value
            End Set
        End Property
        
        Public Property Nombre_Empleado As String
            Get
                Return CType(Me(Me.tableAccionPersonal.Nombre_EmpleadoColumn),String)
            End Get
            Set
                Me(Me.tableAccionPersonal.Nombre_EmpleadoColumn) = value
            End Set
        End Property
        
        Public Property Puesto As String
            Get
                Return CType(Me(Me.tableAccionPersonal.PuestoColumn),String)
            End Get
            Set
                Me(Me.tableAccionPersonal.PuestoColumn) = value
            End Set
        End Property
        
        Public Property Id_Accion As Integer
            Get
                Return CType(Me(Me.tableAccionPersonal.Id_AccionColumn),Integer)
            End Get
            Set
                Me(Me.tableAccionPersonal.Id_AccionColumn) = value
            End Set
        End Property
        
        Public Property Fecha As Date
            Get
                Return CType(Me(Me.tableAccionPersonal.FechaColumn),Date)
            End Get
            Set
                Me(Me.tableAccionPersonal.FechaColumn) = value
            End Set
        End Property
        
        Public Property Observaciones As String
            Get
                Return CType(Me(Me.tableAccionPersonal.ObservacionesColumn),String)
            End Get
            Set
                Me(Me.tableAccionPersonal.ObservacionesColumn) = value
            End Set
        End Property
        
        Public Property RigeDesde As Date
            Get
                Return CType(Me(Me.tableAccionPersonal.RigeDesdeColumn),Date)
            End Get
            Set
                Me(Me.tableAccionPersonal.RigeDesdeColumn) = value
            End Set
        End Property
        
        Public Property RigeHasta As Date
            Get
                Return CType(Me(Me.tableAccionPersonal.RigeHastaColumn),Date)
            End Get
            Set
                Me(Me.tableAccionPersonal.RigeHastaColumn) = value
            End Set
        End Property
        
        Public Property DiasaDescontar As Double
            Get
                Return CType(Me(Me.tableAccionPersonal.DiasaDescontarColumn),Double)
            End Get
            Set
                Me(Me.tableAccionPersonal.DiasaDescontarColumn) = value
            End Set
        End Property
        
        Public Property HechoPor As String
            Get
                Return CType(Me(Me.tableAccionPersonal.HechoPorColumn),String)
            End Get
            Set
                Me(Me.tableAccionPersonal.HechoPorColumn) = value
            End Set
        End Property
        
        Public Property NombreUsuario As String
            Get
                Return CType(Me(Me.tableAccionPersonal.NombreUsuarioColumn),String)
            End Get
            Set
                Me(Me.tableAccionPersonal.NombreUsuarioColumn) = value
            End Set
        End Property
        
        Public Property Anula As Boolean
            Get
                Return CType(Me(Me.tableAccionPersonal.AnulaColumn),Boolean)
            End Get
            Set
                Me(Me.tableAccionPersonal.AnulaColumn) = value
            End Set
        End Property
        
        Public Property EstadoCambio As Boolean
            Get
                Return CType(Me(Me.tableAccionPersonal.EstadoCambioColumn),Boolean)
            End Get
            Set
                Me(Me.tableAccionPersonal.EstadoCambioColumn) = value
            End Set
        End Property
        
        Public Property Cod_Estado As Integer
            Get
                Return CType(Me(Me.tableAccionPersonal.Cod_EstadoColumn),Integer)
            End Get
            Set
                Me(Me.tableAccionPersonal.Cod_EstadoColumn) = value
            End Set
        End Property
        
        Public Property EmpleadoRow As EmpleadoRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("EmpleadoAccionPersonal")),EmpleadoRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("EmpleadoAccionPersonal"))
            End Set
        End Property
        
        Public Property AccionRow As AccionRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("AccionAccionPersonal")),AccionRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("AccionAccionPersonal"))
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AccionPersonalRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As AccionPersonalRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As AccionPersonalRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As AccionPersonalRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
