'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2407
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DsBancos
    Inherits DataSet
    
    Private tableBancos As BancosDataTable
    
    Private tableCuentas_bancarias As Cuentas_bancariasDataTable
    
    Private tableconfiguraciones As configuracionesDataTable
    
    Private tableCheques As ChequesDataTable
    
    Private relationBancosCuentas_bancarias As DataRelation
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Bancos")) Is Nothing) Then
                Me.Tables.Add(New BancosDataTable(ds.Tables("Bancos")))
            End If
            If (Not (ds.Tables("Cuentas_bancarias")) Is Nothing) Then
                Me.Tables.Add(New Cuentas_bancariasDataTable(ds.Tables("Cuentas_bancarias")))
            End If
            If (Not (ds.Tables("configuraciones")) Is Nothing) Then
                Me.Tables.Add(New configuracionesDataTable(ds.Tables("configuraciones")))
            End If
            If (Not (ds.Tables("Cheques")) Is Nothing) Then
                Me.Tables.Add(New ChequesDataTable(ds.Tables("Cheques")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Bancos As BancosDataTable
        Get
            Return Me.tableBancos
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Cuentas_bancarias As Cuentas_bancariasDataTable
        Get
            Return Me.tableCuentas_bancarias
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property configuraciones As configuracionesDataTable
        Get
            Return Me.tableconfiguraciones
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Cheques As ChequesDataTable
        Get
            Return Me.tableCheques
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DsBancos = CType(MyBase.Clone,DsBancos)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("Bancos")) Is Nothing) Then
            Me.Tables.Add(New BancosDataTable(ds.Tables("Bancos")))
        End If
        If (Not (ds.Tables("Cuentas_bancarias")) Is Nothing) Then
            Me.Tables.Add(New Cuentas_bancariasDataTable(ds.Tables("Cuentas_bancarias")))
        End If
        If (Not (ds.Tables("configuraciones")) Is Nothing) Then
            Me.Tables.Add(New configuracionesDataTable(ds.Tables("configuraciones")))
        End If
        If (Not (ds.Tables("Cheques")) Is Nothing) Then
            Me.Tables.Add(New ChequesDataTable(ds.Tables("Cheques")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableBancos = CType(Me.Tables("Bancos"),BancosDataTable)
        If (Not (Me.tableBancos) Is Nothing) Then
            Me.tableBancos.InitVars
        End If
        Me.tableCuentas_bancarias = CType(Me.Tables("Cuentas_bancarias"),Cuentas_bancariasDataTable)
        If (Not (Me.tableCuentas_bancarias) Is Nothing) Then
            Me.tableCuentas_bancarias.InitVars
        End If
        Me.tableconfiguraciones = CType(Me.Tables("configuraciones"),configuracionesDataTable)
        If (Not (Me.tableconfiguraciones) Is Nothing) Then
            Me.tableconfiguraciones.InitVars
        End If
        Me.tableCheques = CType(Me.Tables("Cheques"),ChequesDataTable)
        If (Not (Me.tableCheques) Is Nothing) Then
            Me.tableCheques.InitVars
        End If
        Me.relationBancosCuentas_bancarias = Me.Relations("BancosCuentas_bancarias")
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DsBancos"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DsBancos.xsd"
        Me.Locale = New System.Globalization.CultureInfo("es-CR")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableBancos = New BancosDataTable
        Me.Tables.Add(Me.tableBancos)
        Me.tableCuentas_bancarias = New Cuentas_bancariasDataTable
        Me.Tables.Add(Me.tableCuentas_bancarias)
        Me.tableconfiguraciones = New configuracionesDataTable
        Me.Tables.Add(Me.tableconfiguraciones)
        Me.tableCheques = New ChequesDataTable
        Me.Tables.Add(Me.tableCheques)
        Dim fkc As ForeignKeyConstraint
        fkc = New ForeignKeyConstraint("BancosCuentas_bancarias", New DataColumn() {Me.tableBancos.Codigo_bancoColumn}, New DataColumn() {Me.tableCuentas_bancarias.Codigo_bancoColumn})
        Me.tableCuentas_bancarias.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        Me.relationBancosCuentas_bancarias = New DataRelation("BancosCuentas_bancarias", New DataColumn() {Me.tableBancos.Codigo_bancoColumn}, New DataColumn() {Me.tableCuentas_bancarias.Codigo_bancoColumn}, false)
        Me.Relations.Add(Me.relationBancosCuentas_bancarias)
    End Sub
    
    Private Function ShouldSerializeBancos() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeCuentas_bancarias() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeconfiguraciones() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeCheques() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub BancosRowChangeEventHandler(ByVal sender As Object, ByVal e As BancosRowChangeEvent)
    
    Public Delegate Sub Cuentas_bancariasRowChangeEventHandler(ByVal sender As Object, ByVal e As Cuentas_bancariasRowChangeEvent)
    
    Public Delegate Sub configuracionesRowChangeEventHandler(ByVal sender As Object, ByVal e As configuracionesRowChangeEvent)
    
    Public Delegate Sub ChequesRowChangeEventHandler(ByVal sender As Object, ByVal e As ChequesRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BancosDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCodigo_banco As DataColumn
        
        Private columnDescripcion As DataColumn
        
        Friend Sub New()
            MyBase.New("Bancos")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property Codigo_bancoColumn As DataColumn
            Get
                Return Me.columnCodigo_banco
            End Get
        End Property
        
        Friend ReadOnly Property DescripcionColumn As DataColumn
            Get
                Return Me.columnDescripcion
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As BancosRow
            Get
                Return CType(Me.Rows(index),BancosRow)
            End Get
        End Property
        
        Public Event BancosRowChanged As BancosRowChangeEventHandler
        
        Public Event BancosRowChanging As BancosRowChangeEventHandler
        
        Public Event BancosRowDeleted As BancosRowChangeEventHandler
        
        Public Event BancosRowDeleting As BancosRowChangeEventHandler
        
        Public Overloads Sub AddBancosRow(ByVal row As BancosRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddBancosRow(ByVal Descripcion As String) As BancosRow
            Dim rowBancosRow As BancosRow = CType(Me.NewRow,BancosRow)
            rowBancosRow.ItemArray = New Object() {Nothing, Descripcion}
            Me.Rows.Add(rowBancosRow)
            Return rowBancosRow
        End Function
        
        Public Function FindByCodigo_banco(ByVal Codigo_banco As Long) As BancosRow
            Return CType(Me.Rows.Find(New Object() {Codigo_banco}),BancosRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As BancosDataTable = CType(MyBase.Clone,BancosDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New BancosDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCodigo_banco = Me.Columns("Codigo_banco")
            Me.columnDescripcion = Me.Columns("Descripcion")
        End Sub
        
        Private Sub InitClass()
            Me.columnCodigo_banco = New DataColumn("Codigo_banco", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCodigo_banco)
            Me.columnDescripcion = New DataColumn("Descripcion", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescripcion)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnCodigo_banco}, true))
            Me.columnCodigo_banco.AutoIncrement = true
            Me.columnCodigo_banco.AllowDBNull = false
            Me.columnCodigo_banco.ReadOnly = true
            Me.columnCodigo_banco.Unique = true
            Me.columnDescripcion.AllowDBNull = false
        End Sub
        
        Public Function NewBancosRow() As BancosRow
            Return CType(Me.NewRow,BancosRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New BancosRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(BancosRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.BancosRowChangedEvent) Is Nothing) Then
                RaiseEvent BancosRowChanged(Me, New BancosRowChangeEvent(CType(e.Row,BancosRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.BancosRowChangingEvent) Is Nothing) Then
                RaiseEvent BancosRowChanging(Me, New BancosRowChangeEvent(CType(e.Row,BancosRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.BancosRowDeletedEvent) Is Nothing) Then
                RaiseEvent BancosRowDeleted(Me, New BancosRowChangeEvent(CType(e.Row,BancosRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.BancosRowDeletingEvent) Is Nothing) Then
                RaiseEvent BancosRowDeleting(Me, New BancosRowChangeEvent(CType(e.Row,BancosRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveBancosRow(ByVal row As BancosRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BancosRow
        Inherits DataRow
        
        Private tableBancos As BancosDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableBancos = CType(Me.Table,BancosDataTable)
        End Sub
        
        Public Property Codigo_banco As Long
            Get
                Return CType(Me(Me.tableBancos.Codigo_bancoColumn),Long)
            End Get
            Set
                Me(Me.tableBancos.Codigo_bancoColumn) = value
            End Set
        End Property
        
        Public Property Descripcion As String
            Get
                Return CType(Me(Me.tableBancos.DescripcionColumn),String)
            End Get
            Set
                Me(Me.tableBancos.DescripcionColumn) = value
            End Set
        End Property
        
        Public Function GetCuentas_bancariasRows() As Cuentas_bancariasRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("BancosCuentas_bancarias")),Cuentas_bancariasRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BancosRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As BancosRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As BancosRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As BancosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Cuentas_bancariasDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCodigo_banco As DataColumn
        
        Private columnId_CuentaBancaria As DataColumn
        
        Private columntipoCuenta As DataColumn
        
        Private columnNombreCuenta As DataColumn
        
        Private columnCuenta As DataColumn
        
        Private columnCod_Moneda As DataColumn
        
        Friend Sub New()
            MyBase.New("Cuentas_bancarias")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property Codigo_bancoColumn As DataColumn
            Get
                Return Me.columnCodigo_banco
            End Get
        End Property
        
        Friend ReadOnly Property Id_CuentaBancariaColumn As DataColumn
            Get
                Return Me.columnId_CuentaBancaria
            End Get
        End Property
        
        Friend ReadOnly Property tipoCuentaColumn As DataColumn
            Get
                Return Me.columntipoCuenta
            End Get
        End Property
        
        Friend ReadOnly Property NombreCuentaColumn As DataColumn
            Get
                Return Me.columnNombreCuenta
            End Get
        End Property
        
        Friend ReadOnly Property CuentaColumn As DataColumn
            Get
                Return Me.columnCuenta
            End Get
        End Property
        
        Friend ReadOnly Property Cod_MonedaColumn As DataColumn
            Get
                Return Me.columnCod_Moneda
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Cuentas_bancariasRow
            Get
                Return CType(Me.Rows(index),Cuentas_bancariasRow)
            End Get
        End Property
        
        Public Event Cuentas_bancariasRowChanged As Cuentas_bancariasRowChangeEventHandler
        
        Public Event Cuentas_bancariasRowChanging As Cuentas_bancariasRowChangeEventHandler
        
        Public Event Cuentas_bancariasRowDeleted As Cuentas_bancariasRowChangeEventHandler
        
        Public Event Cuentas_bancariasRowDeleting As Cuentas_bancariasRowChangeEventHandler
        
        Public Overloads Sub AddCuentas_bancariasRow(ByVal row As Cuentas_bancariasRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddCuentas_bancariasRow(ByVal parentBancosRowByBancosCuentas_bancarias As BancosRow, ByVal tipoCuenta As String, ByVal NombreCuenta As String, ByVal Cuenta As String, ByVal Cod_Moneda As Integer) As Cuentas_bancariasRow
            Dim rowCuentas_bancariasRow As Cuentas_bancariasRow = CType(Me.NewRow,Cuentas_bancariasRow)
            rowCuentas_bancariasRow.ItemArray = New Object() {parentBancosRowByBancosCuentas_bancarias(0), Nothing, tipoCuenta, NombreCuenta, Cuenta, Cod_Moneda}
            Me.Rows.Add(rowCuentas_bancariasRow)
            Return rowCuentas_bancariasRow
        End Function
        
        Public Function FindById_CuentaBancaria(ByVal Id_CuentaBancaria As Integer) As Cuentas_bancariasRow
            Return CType(Me.Rows.Find(New Object() {Id_CuentaBancaria}),Cuentas_bancariasRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Cuentas_bancariasDataTable = CType(MyBase.Clone,Cuentas_bancariasDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Cuentas_bancariasDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCodigo_banco = Me.Columns("Codigo_banco")
            Me.columnId_CuentaBancaria = Me.Columns("Id_CuentaBancaria")
            Me.columntipoCuenta = Me.Columns("tipoCuenta")
            Me.columnNombreCuenta = Me.Columns("NombreCuenta")
            Me.columnCuenta = Me.Columns("Cuenta")
            Me.columnCod_Moneda = Me.Columns("Cod_Moneda")
        End Sub
        
        Private Sub InitClass()
            Me.columnCodigo_banco = New DataColumn("Codigo_banco", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCodigo_banco)
            Me.columnId_CuentaBancaria = New DataColumn("Id_CuentaBancaria", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId_CuentaBancaria)
            Me.columntipoCuenta = New DataColumn("tipoCuenta", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntipoCuenta)
            Me.columnNombreCuenta = New DataColumn("NombreCuenta", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNombreCuenta)
            Me.columnCuenta = New DataColumn("Cuenta", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCuenta)
            Me.columnCod_Moneda = New DataColumn("Cod_Moneda", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCod_Moneda)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnId_CuentaBancaria}, true))
            Me.columnCodigo_banco.AllowDBNull = false
            Me.columnId_CuentaBancaria.AutoIncrement = true
            Me.columnId_CuentaBancaria.AllowDBNull = false
            Me.columnId_CuentaBancaria.ReadOnly = true
            Me.columnId_CuentaBancaria.Unique = true
            Me.columntipoCuenta.AllowDBNull = false
            Me.columnNombreCuenta.AllowDBNull = false
            Me.columnCuenta.AllowDBNull = false
            Me.columnCod_Moneda.AllowDBNull = false
        End Sub
        
        Public Function NewCuentas_bancariasRow() As Cuentas_bancariasRow
            Return CType(Me.NewRow,Cuentas_bancariasRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Cuentas_bancariasRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Cuentas_bancariasRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Cuentas_bancariasRowChangedEvent) Is Nothing) Then
                RaiseEvent Cuentas_bancariasRowChanged(Me, New Cuentas_bancariasRowChangeEvent(CType(e.Row,Cuentas_bancariasRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Cuentas_bancariasRowChangingEvent) Is Nothing) Then
                RaiseEvent Cuentas_bancariasRowChanging(Me, New Cuentas_bancariasRowChangeEvent(CType(e.Row,Cuentas_bancariasRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Cuentas_bancariasRowDeletedEvent) Is Nothing) Then
                RaiseEvent Cuentas_bancariasRowDeleted(Me, New Cuentas_bancariasRowChangeEvent(CType(e.Row,Cuentas_bancariasRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Cuentas_bancariasRowDeletingEvent) Is Nothing) Then
                RaiseEvent Cuentas_bancariasRowDeleting(Me, New Cuentas_bancariasRowChangeEvent(CType(e.Row,Cuentas_bancariasRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveCuentas_bancariasRow(ByVal row As Cuentas_bancariasRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Cuentas_bancariasRow
        Inherits DataRow
        
        Private tableCuentas_bancarias As Cuentas_bancariasDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableCuentas_bancarias = CType(Me.Table,Cuentas_bancariasDataTable)
        End Sub
        
        Public Property Codigo_banco As Long
            Get
                Return CType(Me(Me.tableCuentas_bancarias.Codigo_bancoColumn),Long)
            End Get
            Set
                Me(Me.tableCuentas_bancarias.Codigo_bancoColumn) = value
            End Set
        End Property
        
        Public Property Id_CuentaBancaria As Integer
            Get
                Return CType(Me(Me.tableCuentas_bancarias.Id_CuentaBancariaColumn),Integer)
            End Get
            Set
                Me(Me.tableCuentas_bancarias.Id_CuentaBancariaColumn) = value
            End Set
        End Property
        
        Public Property tipoCuenta As String
            Get
                Return CType(Me(Me.tableCuentas_bancarias.tipoCuentaColumn),String)
            End Get
            Set
                Me(Me.tableCuentas_bancarias.tipoCuentaColumn) = value
            End Set
        End Property
        
        Public Property NombreCuenta As String
            Get
                Return CType(Me(Me.tableCuentas_bancarias.NombreCuentaColumn),String)
            End Get
            Set
                Me(Me.tableCuentas_bancarias.NombreCuentaColumn) = value
            End Set
        End Property
        
        Public Property Cuenta As String
            Get
                Return CType(Me(Me.tableCuentas_bancarias.CuentaColumn),String)
            End Get
            Set
                Me(Me.tableCuentas_bancarias.CuentaColumn) = value
            End Set
        End Property
        
        Public Property Cod_Moneda As Integer
            Get
                Return CType(Me(Me.tableCuentas_bancarias.Cod_MonedaColumn),Integer)
            End Get
            Set
                Me(Me.tableCuentas_bancarias.Cod_MonedaColumn) = value
            End Set
        End Property
        
        Public Property BancosRow As BancosRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("BancosCuentas_bancarias")),BancosRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("BancosCuentas_bancarias"))
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Cuentas_bancariasRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Cuentas_bancariasRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Cuentas_bancariasRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Cuentas_bancariasRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class configuracionesDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnEmpresa As DataColumn
        
        Private columnCedula As DataColumn
        
        Private columnFormatoCheck As DataColumn
        
        Friend Sub New()
            MyBase.New("configuraciones")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property EmpresaColumn As DataColumn
            Get
                Return Me.columnEmpresa
            End Get
        End Property
        
        Friend ReadOnly Property CedulaColumn As DataColumn
            Get
                Return Me.columnCedula
            End Get
        End Property
        
        Friend ReadOnly Property FormatoCheckColumn As DataColumn
            Get
                Return Me.columnFormatoCheck
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As configuracionesRow
            Get
                Return CType(Me.Rows(index),configuracionesRow)
            End Get
        End Property
        
        Public Event configuracionesRowChanged As configuracionesRowChangeEventHandler
        
        Public Event configuracionesRowChanging As configuracionesRowChangeEventHandler
        
        Public Event configuracionesRowDeleted As configuracionesRowChangeEventHandler
        
        Public Event configuracionesRowDeleting As configuracionesRowChangeEventHandler
        
        Public Overloads Sub AddconfiguracionesRow(ByVal row As configuracionesRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddconfiguracionesRow(ByVal Empresa As String, ByVal Cedula As String, ByVal FormatoCheck As Boolean) As configuracionesRow
            Dim rowconfiguracionesRow As configuracionesRow = CType(Me.NewRow,configuracionesRow)
            rowconfiguracionesRow.ItemArray = New Object() {Empresa, Cedula, FormatoCheck}
            Me.Rows.Add(rowconfiguracionesRow)
            Return rowconfiguracionesRow
        End Function
        
        Public Function FindByCedula(ByVal Cedula As String) As configuracionesRow
            Return CType(Me.Rows.Find(New Object() {Cedula}),configuracionesRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As configuracionesDataTable = CType(MyBase.Clone,configuracionesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New configuracionesDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnEmpresa = Me.Columns("Empresa")
            Me.columnCedula = Me.Columns("Cedula")
            Me.columnFormatoCheck = Me.Columns("FormatoCheck")
        End Sub
        
        Private Sub InitClass()
            Me.columnEmpresa = New DataColumn("Empresa", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEmpresa)
            Me.columnCedula = New DataColumn("Cedula", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCedula)
            Me.columnFormatoCheck = New DataColumn("FormatoCheck", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFormatoCheck)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnCedula}, true))
            Me.columnEmpresa.AllowDBNull = false
            Me.columnCedula.AllowDBNull = false
            Me.columnCedula.Unique = true
            Me.columnFormatoCheck.AllowDBNull = false
        End Sub
        
        Public Function NewconfiguracionesRow() As configuracionesRow
            Return CType(Me.NewRow,configuracionesRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New configuracionesRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(configuracionesRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.configuracionesRowChangedEvent) Is Nothing) Then
                RaiseEvent configuracionesRowChanged(Me, New configuracionesRowChangeEvent(CType(e.Row,configuracionesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.configuracionesRowChangingEvent) Is Nothing) Then
                RaiseEvent configuracionesRowChanging(Me, New configuracionesRowChangeEvent(CType(e.Row,configuracionesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.configuracionesRowDeletedEvent) Is Nothing) Then
                RaiseEvent configuracionesRowDeleted(Me, New configuracionesRowChangeEvent(CType(e.Row,configuracionesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.configuracionesRowDeletingEvent) Is Nothing) Then
                RaiseEvent configuracionesRowDeleting(Me, New configuracionesRowChangeEvent(CType(e.Row,configuracionesRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveconfiguracionesRow(ByVal row As configuracionesRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class configuracionesRow
        Inherits DataRow
        
        Private tableconfiguraciones As configuracionesDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableconfiguraciones = CType(Me.Table,configuracionesDataTable)
        End Sub
        
        Public Property Empresa As String
            Get
                Return CType(Me(Me.tableconfiguraciones.EmpresaColumn),String)
            End Get
            Set
                Me(Me.tableconfiguraciones.EmpresaColumn) = value
            End Set
        End Property
        
        Public Property Cedula As String
            Get
                Return CType(Me(Me.tableconfiguraciones.CedulaColumn),String)
            End Get
            Set
                Me(Me.tableconfiguraciones.CedulaColumn) = value
            End Set
        End Property
        
        Public Property FormatoCheck As Boolean
            Get
                Return CType(Me(Me.tableconfiguraciones.FormatoCheckColumn),Boolean)
            End Get
            Set
                Me(Me.tableconfiguraciones.FormatoCheckColumn) = value
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class configuracionesRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As configuracionesRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As configuracionesRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As configuracionesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ChequesDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnId_Cheque As DataColumn
        
        Private columnNum_Cheque As DataColumn
        
        Private columnId_CuentaBancaria As DataColumn
        
        Private columnFecha As DataColumn
        
        Private columnPortador As DataColumn
        
        Private columnMonto As DataColumn
        
        Private columnConciliado As DataColumn
        
        Private columnAnulado As DataColumn
        
        Private columnObservaciones As DataColumn
        
        Private columnCed_Usuario As DataColumn
        
        Private columnContabilizado As DataColumn
        
        Private columnAsiento As DataColumn
        
        Private columnCuenta_Destino As DataColumn
        
        Private columnTipo As DataColumn
        
        Private columnNum_Conciliacion As DataColumn
        
        Private columnMontoLetras As DataColumn
        
        Private columnCodigoMoneda As DataColumn
        
        Private columnTipoCambio As DataColumn
        
        Friend Sub New()
            MyBase.New("Cheques")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property Id_ChequeColumn As DataColumn
            Get
                Return Me.columnId_Cheque
            End Get
        End Property
        
        Friend ReadOnly Property Num_ChequeColumn As DataColumn
            Get
                Return Me.columnNum_Cheque
            End Get
        End Property
        
        Friend ReadOnly Property Id_CuentaBancariaColumn As DataColumn
            Get
                Return Me.columnId_CuentaBancaria
            End Get
        End Property
        
        Friend ReadOnly Property FechaColumn As DataColumn
            Get
                Return Me.columnFecha
            End Get
        End Property
        
        Friend ReadOnly Property PortadorColumn As DataColumn
            Get
                Return Me.columnPortador
            End Get
        End Property
        
        Friend ReadOnly Property MontoColumn As DataColumn
            Get
                Return Me.columnMonto
            End Get
        End Property
        
        Friend ReadOnly Property ConciliadoColumn As DataColumn
            Get
                Return Me.columnConciliado
            End Get
        End Property
        
        Friend ReadOnly Property AnuladoColumn As DataColumn
            Get
                Return Me.columnAnulado
            End Get
        End Property
        
        Friend ReadOnly Property ObservacionesColumn As DataColumn
            Get
                Return Me.columnObservaciones
            End Get
        End Property
        
        Friend ReadOnly Property Ced_UsuarioColumn As DataColumn
            Get
                Return Me.columnCed_Usuario
            End Get
        End Property
        
        Friend ReadOnly Property ContabilizadoColumn As DataColumn
            Get
                Return Me.columnContabilizado
            End Get
        End Property
        
        Friend ReadOnly Property AsientoColumn As DataColumn
            Get
                Return Me.columnAsiento
            End Get
        End Property
        
        Friend ReadOnly Property Cuenta_DestinoColumn As DataColumn
            Get
                Return Me.columnCuenta_Destino
            End Get
        End Property
        
        Friend ReadOnly Property TipoColumn As DataColumn
            Get
                Return Me.columnTipo
            End Get
        End Property
        
        Friend ReadOnly Property Num_ConciliacionColumn As DataColumn
            Get
                Return Me.columnNum_Conciliacion
            End Get
        End Property
        
        Friend ReadOnly Property MontoLetrasColumn As DataColumn
            Get
                Return Me.columnMontoLetras
            End Get
        End Property
        
        Friend ReadOnly Property CodigoMonedaColumn As DataColumn
            Get
                Return Me.columnCodigoMoneda
            End Get
        End Property
        
        Friend ReadOnly Property TipoCambioColumn As DataColumn
            Get
                Return Me.columnTipoCambio
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ChequesRow
            Get
                Return CType(Me.Rows(index),ChequesRow)
            End Get
        End Property
        
        Public Event ChequesRowChanged As ChequesRowChangeEventHandler
        
        Public Event ChequesRowChanging As ChequesRowChangeEventHandler
        
        Public Event ChequesRowDeleted As ChequesRowChangeEventHandler
        
        Public Event ChequesRowDeleting As ChequesRowChangeEventHandler
        
        Public Overloads Sub AddChequesRow(ByVal row As ChequesRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddChequesRow( _
                    ByVal Num_Cheque As Long,  _
                    ByVal Id_CuentaBancaria As Integer,  _
                    ByVal Fecha As Date,  _
                    ByVal Portador As String,  _
                    ByVal Monto As Double,  _
                    ByVal Conciliado As Boolean,  _
                    ByVal Anulado As Boolean,  _
                    ByVal Observaciones As String,  _
                    ByVal Ced_Usuario As String,  _
                    ByVal Contabilizado As Boolean,  _
                    ByVal Asiento As String,  _
                    ByVal Cuenta_Destino As String,  _
                    ByVal Tipo As String,  _
                    ByVal Num_Conciliacion As Long,  _
                    ByVal MontoLetras As String,  _
                    ByVal CodigoMoneda As Integer,  _
                    ByVal TipoCambio As Double) As ChequesRow
            Dim rowChequesRow As ChequesRow = CType(Me.NewRow,ChequesRow)
            rowChequesRow.ItemArray = New Object() {Nothing, Num_Cheque, Id_CuentaBancaria, Fecha, Portador, Monto, Conciliado, Anulado, Observaciones, Ced_Usuario, Contabilizado, Asiento, Cuenta_Destino, Tipo, Num_Conciliacion, MontoLetras, CodigoMoneda, TipoCambio}
            Me.Rows.Add(rowChequesRow)
            Return rowChequesRow
        End Function
        
        Public Function FindById_Cheque(ByVal Id_Cheque As Long) As ChequesRow
            Return CType(Me.Rows.Find(New Object() {Id_Cheque}),ChequesRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ChequesDataTable = CType(MyBase.Clone,ChequesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ChequesDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnId_Cheque = Me.Columns("Id_Cheque")
            Me.columnNum_Cheque = Me.Columns("Num_Cheque")
            Me.columnId_CuentaBancaria = Me.Columns("Id_CuentaBancaria")
            Me.columnFecha = Me.Columns("Fecha")
            Me.columnPortador = Me.Columns("Portador")
            Me.columnMonto = Me.Columns("Monto")
            Me.columnConciliado = Me.Columns("Conciliado")
            Me.columnAnulado = Me.Columns("Anulado")
            Me.columnObservaciones = Me.Columns("Observaciones")
            Me.columnCed_Usuario = Me.Columns("Ced_Usuario")
            Me.columnContabilizado = Me.Columns("Contabilizado")
            Me.columnAsiento = Me.Columns("Asiento")
            Me.columnCuenta_Destino = Me.Columns("Cuenta_Destino")
            Me.columnTipo = Me.Columns("Tipo")
            Me.columnNum_Conciliacion = Me.Columns("Num_Conciliacion")
            Me.columnMontoLetras = Me.Columns("MontoLetras")
            Me.columnCodigoMoneda = Me.Columns("CodigoMoneda")
            Me.columnTipoCambio = Me.Columns("TipoCambio")
        End Sub
        
        Private Sub InitClass()
            Me.columnId_Cheque = New DataColumn("Id_Cheque", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId_Cheque)
            Me.columnNum_Cheque = New DataColumn("Num_Cheque", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNum_Cheque)
            Me.columnId_CuentaBancaria = New DataColumn("Id_CuentaBancaria", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId_CuentaBancaria)
            Me.columnFecha = New DataColumn("Fecha", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFecha)
            Me.columnPortador = New DataColumn("Portador", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPortador)
            Me.columnMonto = New DataColumn("Monto", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMonto)
            Me.columnConciliado = New DataColumn("Conciliado", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnConciliado)
            Me.columnAnulado = New DataColumn("Anulado", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAnulado)
            Me.columnObservaciones = New DataColumn("Observaciones", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnObservaciones)
            Me.columnCed_Usuario = New DataColumn("Ced_Usuario", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCed_Usuario)
            Me.columnContabilizado = New DataColumn("Contabilizado", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnContabilizado)
            Me.columnAsiento = New DataColumn("Asiento", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAsiento)
            Me.columnCuenta_Destino = New DataColumn("Cuenta_Destino", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCuenta_Destino)
            Me.columnTipo = New DataColumn("Tipo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTipo)
            Me.columnNum_Conciliacion = New DataColumn("Num_Conciliacion", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNum_Conciliacion)
            Me.columnMontoLetras = New DataColumn("MontoLetras", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMontoLetras)
            Me.columnCodigoMoneda = New DataColumn("CodigoMoneda", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCodigoMoneda)
            Me.columnTipoCambio = New DataColumn("TipoCambio", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTipoCambio)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnId_Cheque}, true))
            Me.columnId_Cheque.AutoIncrement = true
            Me.columnId_Cheque.AllowDBNull = false
            Me.columnId_Cheque.ReadOnly = true
            Me.columnId_Cheque.Unique = true
            Me.columnNum_Cheque.AllowDBNull = false
            Me.columnId_CuentaBancaria.AllowDBNull = false
            Me.columnFecha.AllowDBNull = false
            Me.columnPortador.AllowDBNull = false
            Me.columnMonto.AllowDBNull = false
            Me.columnConciliado.AllowDBNull = false
            Me.columnAnulado.AllowDBNull = false
            Me.columnObservaciones.AllowDBNull = false
            Me.columnCed_Usuario.AllowDBNull = false
            Me.columnContabilizado.AllowDBNull = false
            Me.columnAsiento.AllowDBNull = false
            Me.columnCuenta_Destino.AllowDBNull = false
            Me.columnTipo.AllowDBNull = false
            Me.columnNum_Conciliacion.AllowDBNull = false
            Me.columnMontoLetras.AllowDBNull = false
            Me.columnCodigoMoneda.AllowDBNull = false
            Me.columnTipoCambio.AllowDBNull = false
        End Sub
        
        Public Function NewChequesRow() As ChequesRow
            Return CType(Me.NewRow,ChequesRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ChequesRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ChequesRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ChequesRowChangedEvent) Is Nothing) Then
                RaiseEvent ChequesRowChanged(Me, New ChequesRowChangeEvent(CType(e.Row,ChequesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ChequesRowChangingEvent) Is Nothing) Then
                RaiseEvent ChequesRowChanging(Me, New ChequesRowChangeEvent(CType(e.Row,ChequesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ChequesRowDeletedEvent) Is Nothing) Then
                RaiseEvent ChequesRowDeleted(Me, New ChequesRowChangeEvent(CType(e.Row,ChequesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ChequesRowDeletingEvent) Is Nothing) Then
                RaiseEvent ChequesRowDeleting(Me, New ChequesRowChangeEvent(CType(e.Row,ChequesRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveChequesRow(ByVal row As ChequesRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ChequesRow
        Inherits DataRow
        
        Private tableCheques As ChequesDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableCheques = CType(Me.Table,ChequesDataTable)
        End Sub
        
        Public Property Id_Cheque As Long
            Get
                Return CType(Me(Me.tableCheques.Id_ChequeColumn),Long)
            End Get
            Set
                Me(Me.tableCheques.Id_ChequeColumn) = value
            End Set
        End Property
        
        Public Property Num_Cheque As Long
            Get
                Return CType(Me(Me.tableCheques.Num_ChequeColumn),Long)
            End Get
            Set
                Me(Me.tableCheques.Num_ChequeColumn) = value
            End Set
        End Property
        
        Public Property Id_CuentaBancaria As Integer
            Get
                Return CType(Me(Me.tableCheques.Id_CuentaBancariaColumn),Integer)
            End Get
            Set
                Me(Me.tableCheques.Id_CuentaBancariaColumn) = value
            End Set
        End Property
        
        Public Property Fecha As Date
            Get
                Return CType(Me(Me.tableCheques.FechaColumn),Date)
            End Get
            Set
                Me(Me.tableCheques.FechaColumn) = value
            End Set
        End Property
        
        Public Property Portador As String
            Get
                Return CType(Me(Me.tableCheques.PortadorColumn),String)
            End Get
            Set
                Me(Me.tableCheques.PortadorColumn) = value
            End Set
        End Property
        
        Public Property Monto As Double
            Get
                Return CType(Me(Me.tableCheques.MontoColumn),Double)
            End Get
            Set
                Me(Me.tableCheques.MontoColumn) = value
            End Set
        End Property
        
        Public Property Conciliado As Boolean
            Get
                Return CType(Me(Me.tableCheques.ConciliadoColumn),Boolean)
            End Get
            Set
                Me(Me.tableCheques.ConciliadoColumn) = value
            End Set
        End Property
        
        Public Property Anulado As Boolean
            Get
                Return CType(Me(Me.tableCheques.AnuladoColumn),Boolean)
            End Get
            Set
                Me(Me.tableCheques.AnuladoColumn) = value
            End Set
        End Property
        
        Public Property Observaciones As String
            Get
                Return CType(Me(Me.tableCheques.ObservacionesColumn),String)
            End Get
            Set
                Me(Me.tableCheques.ObservacionesColumn) = value
            End Set
        End Property
        
        Public Property Ced_Usuario As String
            Get
                Return CType(Me(Me.tableCheques.Ced_UsuarioColumn),String)
            End Get
            Set
                Me(Me.tableCheques.Ced_UsuarioColumn) = value
            End Set
        End Property
        
        Public Property Contabilizado As Boolean
            Get
                Return CType(Me(Me.tableCheques.ContabilizadoColumn),Boolean)
            End Get
            Set
                Me(Me.tableCheques.ContabilizadoColumn) = value
            End Set
        End Property
        
        Public Property Asiento As String
            Get
                Return CType(Me(Me.tableCheques.AsientoColumn),String)
            End Get
            Set
                Me(Me.tableCheques.AsientoColumn) = value
            End Set
        End Property
        
        Public Property Cuenta_Destino As String
            Get
                Return CType(Me(Me.tableCheques.Cuenta_DestinoColumn),String)
            End Get
            Set
                Me(Me.tableCheques.Cuenta_DestinoColumn) = value
            End Set
        End Property
        
        Public Property Tipo As String
            Get
                Return CType(Me(Me.tableCheques.TipoColumn),String)
            End Get
            Set
                Me(Me.tableCheques.TipoColumn) = value
            End Set
        End Property
        
        Public Property Num_Conciliacion As Long
            Get
                Return CType(Me(Me.tableCheques.Num_ConciliacionColumn),Long)
            End Get
            Set
                Me(Me.tableCheques.Num_ConciliacionColumn) = value
            End Set
        End Property
        
        Public Property MontoLetras As String
            Get
                Return CType(Me(Me.tableCheques.MontoLetrasColumn),String)
            End Get
            Set
                Me(Me.tableCheques.MontoLetrasColumn) = value
            End Set
        End Property
        
        Public Property CodigoMoneda As Integer
            Get
                Return CType(Me(Me.tableCheques.CodigoMonedaColumn),Integer)
            End Get
            Set
                Me(Me.tableCheques.CodigoMonedaColumn) = value
            End Set
        End Property
        
        Public Property TipoCambio As Double
            Get
                Return CType(Me(Me.tableCheques.TipoCambioColumn),Double)
            End Get
            Set
                Me(Me.tableCheques.TipoCambioColumn) = value
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ChequesRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ChequesRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ChequesRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ChequesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
