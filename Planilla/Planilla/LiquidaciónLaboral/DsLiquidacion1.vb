'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2032
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DsLiquidacion
    Inherits DataSet
    
    Private tableAccionPersonal As AccionPersonalDataTable
    
    Private tableEmpleado As EmpleadoDataTable
    
    Private tablePlanilla As PlanillaDataTable
    
    Private tablePlanilla_Detalle As Planilla_DetalleDataTable
    
    Private tableliquidacionempleados As liquidacionempleadosDataTable
    
    Private tableAdelantos As AdelantosDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("AccionPersonal")) Is Nothing) Then
                Me.Tables.Add(New AccionPersonalDataTable(ds.Tables("AccionPersonal")))
            End If
            If (Not (ds.Tables("Empleado")) Is Nothing) Then
                Me.Tables.Add(New EmpleadoDataTable(ds.Tables("Empleado")))
            End If
            If (Not (ds.Tables("Planilla")) Is Nothing) Then
                Me.Tables.Add(New PlanillaDataTable(ds.Tables("Planilla")))
            End If
            If (Not (ds.Tables("Planilla_Detalle")) Is Nothing) Then
                Me.Tables.Add(New Planilla_DetalleDataTable(ds.Tables("Planilla_Detalle")))
            End If
            If (Not (ds.Tables("liquidacionempleados")) Is Nothing) Then
                Me.Tables.Add(New liquidacionempleadosDataTable(ds.Tables("liquidacionempleados")))
            End If
            If (Not (ds.Tables("Adelantos")) Is Nothing) Then
                Me.Tables.Add(New AdelantosDataTable(ds.Tables("Adelantos")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property AccionPersonal As AccionPersonalDataTable
        Get
            Return Me.tableAccionPersonal
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Empleado As EmpleadoDataTable
        Get
            Return Me.tableEmpleado
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Planilla As PlanillaDataTable
        Get
            Return Me.tablePlanilla
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Planilla_Detalle As Planilla_DetalleDataTable
        Get
            Return Me.tablePlanilla_Detalle
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property liquidacionempleados As liquidacionempleadosDataTable
        Get
            Return Me.tableliquidacionempleados
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Adelantos As AdelantosDataTable
        Get
            Return Me.tableAdelantos
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DsLiquidacion = CType(MyBase.Clone,DsLiquidacion)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("AccionPersonal")) Is Nothing) Then
            Me.Tables.Add(New AccionPersonalDataTable(ds.Tables("AccionPersonal")))
        End If
        If (Not (ds.Tables("Empleado")) Is Nothing) Then
            Me.Tables.Add(New EmpleadoDataTable(ds.Tables("Empleado")))
        End If
        If (Not (ds.Tables("Planilla")) Is Nothing) Then
            Me.Tables.Add(New PlanillaDataTable(ds.Tables("Planilla")))
        End If
        If (Not (ds.Tables("Planilla_Detalle")) Is Nothing) Then
            Me.Tables.Add(New Planilla_DetalleDataTable(ds.Tables("Planilla_Detalle")))
        End If
        If (Not (ds.Tables("liquidacionempleados")) Is Nothing) Then
            Me.Tables.Add(New liquidacionempleadosDataTable(ds.Tables("liquidacionempleados")))
        End If
        If (Not (ds.Tables("Adelantos")) Is Nothing) Then
            Me.Tables.Add(New AdelantosDataTable(ds.Tables("Adelantos")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableAccionPersonal = CType(Me.Tables("AccionPersonal"),AccionPersonalDataTable)
        If (Not (Me.tableAccionPersonal) Is Nothing) Then
            Me.tableAccionPersonal.InitVars
        End If
        Me.tableEmpleado = CType(Me.Tables("Empleado"),EmpleadoDataTable)
        If (Not (Me.tableEmpleado) Is Nothing) Then
            Me.tableEmpleado.InitVars
        End If
        Me.tablePlanilla = CType(Me.Tables("Planilla"),PlanillaDataTable)
        If (Not (Me.tablePlanilla) Is Nothing) Then
            Me.tablePlanilla.InitVars
        End If
        Me.tablePlanilla_Detalle = CType(Me.Tables("Planilla_Detalle"),Planilla_DetalleDataTable)
        If (Not (Me.tablePlanilla_Detalle) Is Nothing) Then
            Me.tablePlanilla_Detalle.InitVars
        End If
        Me.tableliquidacionempleados = CType(Me.Tables("liquidacionempleados"),liquidacionempleadosDataTable)
        If (Not (Me.tableliquidacionempleados) Is Nothing) Then
            Me.tableliquidacionempleados.InitVars
        End If
        Me.tableAdelantos = CType(Me.Tables("Adelantos"),AdelantosDataTable)
        If (Not (Me.tableAdelantos) Is Nothing) Then
            Me.tableAdelantos.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DsLiquidacion"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DsLiquidacion.xsd"
        Me.Locale = New System.Globalization.CultureInfo("es-MX")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableAccionPersonal = New AccionPersonalDataTable
        Me.Tables.Add(Me.tableAccionPersonal)
        Me.tableEmpleado = New EmpleadoDataTable
        Me.Tables.Add(Me.tableEmpleado)
        Me.tablePlanilla = New PlanillaDataTable
        Me.Tables.Add(Me.tablePlanilla)
        Me.tablePlanilla_Detalle = New Planilla_DetalleDataTable
        Me.Tables.Add(Me.tablePlanilla_Detalle)
        Me.tableliquidacionempleados = New liquidacionempleadosDataTable
        Me.Tables.Add(Me.tableliquidacionempleados)
        Me.tableAdelantos = New AdelantosDataTable
        Me.Tables.Add(Me.tableAdelantos)
    End Sub
    
    Private Function ShouldSerializeAccionPersonal() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeEmpleado() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePlanilla() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePlanilla_Detalle() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeliquidacionempleados() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeAdelantos() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub AccionPersonalRowChangeEventHandler(ByVal sender As Object, ByVal e As AccionPersonalRowChangeEvent)
    
    Public Delegate Sub EmpleadoRowChangeEventHandler(ByVal sender As Object, ByVal e As EmpleadoRowChangeEvent)
    
    Public Delegate Sub PlanillaRowChangeEventHandler(ByVal sender As Object, ByVal e As PlanillaRowChangeEvent)
    
    Public Delegate Sub Planilla_DetalleRowChangeEventHandler(ByVal sender As Object, ByVal e As Planilla_DetalleRowChangeEvent)
    
    Public Delegate Sub liquidacionempleadosRowChangeEventHandler(ByVal sender As Object, ByVal e As liquidacionempleadosRowChangeEvent)
    
    Public Delegate Sub AdelantosRowChangeEventHandler(ByVal sender As Object, ByVal e As AdelantosRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AccionPersonalDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnId_Accion As DataColumn
        
        Private columnDiasaDescontar As DataColumn
        
        Private columnId_Empleado As DataColumn
        
        Friend Sub New()
            MyBase.New("AccionPersonal")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property Id_AccionColumn As DataColumn
            Get
                Return Me.columnId_Accion
            End Get
        End Property
        
        Friend ReadOnly Property DiasaDescontarColumn As DataColumn
            Get
                Return Me.columnDiasaDescontar
            End Get
        End Property
        
        Friend ReadOnly Property Id_EmpleadoColumn As DataColumn
            Get
                Return Me.columnId_Empleado
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As AccionPersonalRow
            Get
                Return CType(Me.Rows(index),AccionPersonalRow)
            End Get
        End Property
        
        Public Event AccionPersonalRowChanged As AccionPersonalRowChangeEventHandler
        
        Public Event AccionPersonalRowChanging As AccionPersonalRowChangeEventHandler
        
        Public Event AccionPersonalRowDeleted As AccionPersonalRowChangeEventHandler
        
        Public Event AccionPersonalRowDeleting As AccionPersonalRowChangeEventHandler
        
        Public Overloads Sub AddAccionPersonalRow(ByVal row As AccionPersonalRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddAccionPersonalRow(ByVal Id_Accion As Integer, ByVal DiasaDescontar As Integer, ByVal Id_Empleado As String) As AccionPersonalRow
            Dim rowAccionPersonalRow As AccionPersonalRow = CType(Me.NewRow,AccionPersonalRow)
            rowAccionPersonalRow.ItemArray = New Object() {Id_Accion, DiasaDescontar, Id_Empleado}
            Me.Rows.Add(rowAccionPersonalRow)
            Return rowAccionPersonalRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As AccionPersonalDataTable = CType(MyBase.Clone,AccionPersonalDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New AccionPersonalDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnId_Accion = Me.Columns("Id_Accion")
            Me.columnDiasaDescontar = Me.Columns("DiasaDescontar")
            Me.columnId_Empleado = Me.Columns("Id_Empleado")
        End Sub
        
        Private Sub InitClass()
            Me.columnId_Accion = New DataColumn("Id_Accion", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId_Accion)
            Me.columnDiasaDescontar = New DataColumn("DiasaDescontar", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDiasaDescontar)
            Me.columnId_Empleado = New DataColumn("Id_Empleado", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId_Empleado)
            Me.columnId_Accion.AllowDBNull = false
            Me.columnDiasaDescontar.AllowDBNull = false
            Me.columnId_Empleado.AllowDBNull = false
        End Sub
        
        Public Function NewAccionPersonalRow() As AccionPersonalRow
            Return CType(Me.NewRow,AccionPersonalRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New AccionPersonalRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(AccionPersonalRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AccionPersonalRowChangedEvent) Is Nothing) Then
                RaiseEvent AccionPersonalRowChanged(Me, New AccionPersonalRowChangeEvent(CType(e.Row,AccionPersonalRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AccionPersonalRowChangingEvent) Is Nothing) Then
                RaiseEvent AccionPersonalRowChanging(Me, New AccionPersonalRowChangeEvent(CType(e.Row,AccionPersonalRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AccionPersonalRowDeletedEvent) Is Nothing) Then
                RaiseEvent AccionPersonalRowDeleted(Me, New AccionPersonalRowChangeEvent(CType(e.Row,AccionPersonalRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AccionPersonalRowDeletingEvent) Is Nothing) Then
                RaiseEvent AccionPersonalRowDeleting(Me, New AccionPersonalRowChangeEvent(CType(e.Row,AccionPersonalRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveAccionPersonalRow(ByVal row As AccionPersonalRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AccionPersonalRow
        Inherits DataRow
        
        Private tableAccionPersonal As AccionPersonalDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableAccionPersonal = CType(Me.Table,AccionPersonalDataTable)
        End Sub
        
        Public Property Id_Accion As Integer
            Get
                Return CType(Me(Me.tableAccionPersonal.Id_AccionColumn),Integer)
            End Get
            Set
                Me(Me.tableAccionPersonal.Id_AccionColumn) = value
            End Set
        End Property
        
        Public Property DiasaDescontar As Integer
            Get
                Return CType(Me(Me.tableAccionPersonal.DiasaDescontarColumn),Integer)
            End Get
            Set
                Me(Me.tableAccionPersonal.DiasaDescontarColumn) = value
            End Set
        End Property
        
        Public Property Id_Empleado As String
            Get
                Return CType(Me(Me.tableAccionPersonal.Id_EmpleadoColumn),String)
            End Get
            Set
                Me(Me.tableAccionPersonal.Id_EmpleadoColumn) = value
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AccionPersonalRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As AccionPersonalRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As AccionPersonalRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As AccionPersonalRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class EmpleadoDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnIdentificacion As DataColumn
        
        Private columnNombre As DataColumn
        
        Private columnFecha_Ingreso As DataColumn
        
        Private columnFecha_Salida As DataColumn
        
        Private columnDiario As DataColumn
        
        Private columnSemana As DataColumn
        
        Private columnQuincena As DataColumn
        
        Private columnMensual As DataColumn
        
        Private columnSalario As DataColumn
        
        Private columnHora As DataColumn
        
        Friend Sub New()
            MyBase.New("Empleado")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IdentificacionColumn As DataColumn
            Get
                Return Me.columnIdentificacion
            End Get
        End Property
        
        Friend ReadOnly Property NombreColumn As DataColumn
            Get
                Return Me.columnNombre
            End Get
        End Property
        
        Friend ReadOnly Property Fecha_IngresoColumn As DataColumn
            Get
                Return Me.columnFecha_Ingreso
            End Get
        End Property
        
        Friend ReadOnly Property Fecha_SalidaColumn As DataColumn
            Get
                Return Me.columnFecha_Salida
            End Get
        End Property
        
        Friend ReadOnly Property DiarioColumn As DataColumn
            Get
                Return Me.columnDiario
            End Get
        End Property
        
        Friend ReadOnly Property SemanaColumn As DataColumn
            Get
                Return Me.columnSemana
            End Get
        End Property
        
        Friend ReadOnly Property QuincenaColumn As DataColumn
            Get
                Return Me.columnQuincena
            End Get
        End Property
        
        Friend ReadOnly Property MensualColumn As DataColumn
            Get
                Return Me.columnMensual
            End Get
        End Property
        
        Friend ReadOnly Property SalarioColumn As DataColumn
            Get
                Return Me.columnSalario
            End Get
        End Property
        
        Friend ReadOnly Property HoraColumn As DataColumn
            Get
                Return Me.columnHora
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As EmpleadoRow
            Get
                Return CType(Me.Rows(index),EmpleadoRow)
            End Get
        End Property
        
        Public Event EmpleadoRowChanged As EmpleadoRowChangeEventHandler
        
        Public Event EmpleadoRowChanging As EmpleadoRowChangeEventHandler
        
        Public Event EmpleadoRowDeleted As EmpleadoRowChangeEventHandler
        
        Public Event EmpleadoRowDeleting As EmpleadoRowChangeEventHandler
        
        Public Overloads Sub AddEmpleadoRow(ByVal row As EmpleadoRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddEmpleadoRow(ByVal Identificacion As String, ByVal Nombre As String, ByVal Fecha_Ingreso As Date, ByVal Fecha_Salida As Date, ByVal Diario As Boolean, ByVal Semana As Boolean, ByVal Quincena As Boolean, ByVal Mensual As Boolean, ByVal Salario As Double, ByVal Hora As Boolean) As EmpleadoRow
            Dim rowEmpleadoRow As EmpleadoRow = CType(Me.NewRow,EmpleadoRow)
            rowEmpleadoRow.ItemArray = New Object() {Identificacion, Nombre, Fecha_Ingreso, Fecha_Salida, Diario, Semana, Quincena, Mensual, Salario, Hora}
            Me.Rows.Add(rowEmpleadoRow)
            Return rowEmpleadoRow
        End Function
        
        Public Function FindByIdentificacion(ByVal Identificacion As String) As EmpleadoRow
            Return CType(Me.Rows.Find(New Object() {Identificacion}),EmpleadoRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As EmpleadoDataTable = CType(MyBase.Clone,EmpleadoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New EmpleadoDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnIdentificacion = Me.Columns("Identificacion")
            Me.columnNombre = Me.Columns("Nombre")
            Me.columnFecha_Ingreso = Me.Columns("Fecha_Ingreso")
            Me.columnFecha_Salida = Me.Columns("Fecha_Salida")
            Me.columnDiario = Me.Columns("Diario")
            Me.columnSemana = Me.Columns("Semana")
            Me.columnQuincena = Me.Columns("Quincena")
            Me.columnMensual = Me.Columns("Mensual")
            Me.columnSalario = Me.Columns("Salario")
            Me.columnHora = Me.Columns("Hora")
        End Sub
        
        Private Sub InitClass()
            Me.columnIdentificacion = New DataColumn("Identificacion", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdentificacion)
            Me.columnNombre = New DataColumn("Nombre", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNombre)
            Me.columnFecha_Ingreso = New DataColumn("Fecha_Ingreso", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFecha_Ingreso)
            Me.columnFecha_Salida = New DataColumn("Fecha_Salida", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFecha_Salida)
            Me.columnDiario = New DataColumn("Diario", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDiario)
            Me.columnSemana = New DataColumn("Semana", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSemana)
            Me.columnQuincena = New DataColumn("Quincena", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnQuincena)
            Me.columnMensual = New DataColumn("Mensual", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMensual)
            Me.columnSalario = New DataColumn("Salario", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSalario)
            Me.columnHora = New DataColumn("Hora", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHora)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnIdentificacion}, true))
            Me.columnIdentificacion.AllowDBNull = false
            Me.columnIdentificacion.Unique = true
            Me.columnNombre.AllowDBNull = false
            Me.columnFecha_Ingreso.AllowDBNull = false
            Me.columnFecha_Salida.AllowDBNull = false
            Me.columnDiario.AllowDBNull = false
            Me.columnSemana.AllowDBNull = false
            Me.columnQuincena.AllowDBNull = false
            Me.columnMensual.AllowDBNull = false
            Me.columnSalario.AllowDBNull = false
            Me.columnHora.AllowDBNull = false
        End Sub
        
        Public Function NewEmpleadoRow() As EmpleadoRow
            Return CType(Me.NewRow,EmpleadoRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New EmpleadoRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(EmpleadoRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EmpleadoRowChangedEvent) Is Nothing) Then
                RaiseEvent EmpleadoRowChanged(Me, New EmpleadoRowChangeEvent(CType(e.Row,EmpleadoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EmpleadoRowChangingEvent) Is Nothing) Then
                RaiseEvent EmpleadoRowChanging(Me, New EmpleadoRowChangeEvent(CType(e.Row,EmpleadoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EmpleadoRowDeletedEvent) Is Nothing) Then
                RaiseEvent EmpleadoRowDeleted(Me, New EmpleadoRowChangeEvent(CType(e.Row,EmpleadoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EmpleadoRowDeletingEvent) Is Nothing) Then
                RaiseEvent EmpleadoRowDeleting(Me, New EmpleadoRowChangeEvent(CType(e.Row,EmpleadoRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveEmpleadoRow(ByVal row As EmpleadoRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class EmpleadoRow
        Inherits DataRow
        
        Private tableEmpleado As EmpleadoDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableEmpleado = CType(Me.Table,EmpleadoDataTable)
        End Sub
        
        Public Property Identificacion As String
            Get
                Return CType(Me(Me.tableEmpleado.IdentificacionColumn),String)
            End Get
            Set
                Me(Me.tableEmpleado.IdentificacionColumn) = value
            End Set
        End Property
        
        Public Property Nombre As String
            Get
                Return CType(Me(Me.tableEmpleado.NombreColumn),String)
            End Get
            Set
                Me(Me.tableEmpleado.NombreColumn) = value
            End Set
        End Property
        
        Public Property Fecha_Ingreso As Date
            Get
                Return CType(Me(Me.tableEmpleado.Fecha_IngresoColumn),Date)
            End Get
            Set
                Me(Me.tableEmpleado.Fecha_IngresoColumn) = value
            End Set
        End Property
        
        Public Property Fecha_Salida As Date
            Get
                Return CType(Me(Me.tableEmpleado.Fecha_SalidaColumn),Date)
            End Get
            Set
                Me(Me.tableEmpleado.Fecha_SalidaColumn) = value
            End Set
        End Property
        
        Public Property Diario As Boolean
            Get
                Return CType(Me(Me.tableEmpleado.DiarioColumn),Boolean)
            End Get
            Set
                Me(Me.tableEmpleado.DiarioColumn) = value
            End Set
        End Property
        
        Public Property Semana As Boolean
            Get
                Return CType(Me(Me.tableEmpleado.SemanaColumn),Boolean)
            End Get
            Set
                Me(Me.tableEmpleado.SemanaColumn) = value
            End Set
        End Property
        
        Public Property Quincena As Boolean
            Get
                Return CType(Me(Me.tableEmpleado.QuincenaColumn),Boolean)
            End Get
            Set
                Me(Me.tableEmpleado.QuincenaColumn) = value
            End Set
        End Property
        
        Public Property Mensual As Boolean
            Get
                Return CType(Me(Me.tableEmpleado.MensualColumn),Boolean)
            End Get
            Set
                Me(Me.tableEmpleado.MensualColumn) = value
            End Set
        End Property
        
        Public Property Salario As Double
            Get
                Return CType(Me(Me.tableEmpleado.SalarioColumn),Double)
            End Get
            Set
                Me(Me.tableEmpleado.SalarioColumn) = value
            End Set
        End Property
        
        Public Property Hora As Boolean
            Get
                Return CType(Me(Me.tableEmpleado.HoraColumn),Boolean)
            End Get
            Set
                Me(Me.tableEmpleado.HoraColumn) = value
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class EmpleadoRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As EmpleadoRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As EmpleadoRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As EmpleadoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PlanillaDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnId_Planilla As DataColumn
        
        Private columnFecha As DataColumn
        
        Private columnFechaInicial As DataColumn
        
        Private columnFechaFinal As DataColumn
        
        Private columnCierreMes As DataColumn
        
        Private columnCed_Usuario As DataColumn
        
        Private columnNombre_Usuario As DataColumn
        
        Private columnAnulado As DataColumn
        
        Friend Sub New()
            MyBase.New("Planilla")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property Id_PlanillaColumn As DataColumn
            Get
                Return Me.columnId_Planilla
            End Get
        End Property
        
        Friend ReadOnly Property FechaColumn As DataColumn
            Get
                Return Me.columnFecha
            End Get
        End Property
        
        Friend ReadOnly Property FechaInicialColumn As DataColumn
            Get
                Return Me.columnFechaInicial
            End Get
        End Property
        
        Friend ReadOnly Property FechaFinalColumn As DataColumn
            Get
                Return Me.columnFechaFinal
            End Get
        End Property
        
        Friend ReadOnly Property CierreMesColumn As DataColumn
            Get
                Return Me.columnCierreMes
            End Get
        End Property
        
        Friend ReadOnly Property Ced_UsuarioColumn As DataColumn
            Get
                Return Me.columnCed_Usuario
            End Get
        End Property
        
        Friend ReadOnly Property Nombre_UsuarioColumn As DataColumn
            Get
                Return Me.columnNombre_Usuario
            End Get
        End Property
        
        Friend ReadOnly Property AnuladoColumn As DataColumn
            Get
                Return Me.columnAnulado
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PlanillaRow
            Get
                Return CType(Me.Rows(index),PlanillaRow)
            End Get
        End Property
        
        Public Event PlanillaRowChanged As PlanillaRowChangeEventHandler
        
        Public Event PlanillaRowChanging As PlanillaRowChangeEventHandler
        
        Public Event PlanillaRowDeleted As PlanillaRowChangeEventHandler
        
        Public Event PlanillaRowDeleting As PlanillaRowChangeEventHandler
        
        Public Overloads Sub AddPlanillaRow(ByVal row As PlanillaRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPlanillaRow(ByVal Id_Planilla As Long, ByVal Fecha As Date, ByVal FechaInicial As Date, ByVal FechaFinal As Date, ByVal CierreMes As Boolean, ByVal Ced_Usuario As String, ByVal Nombre_Usuario As String, ByVal Anulado As Boolean) As PlanillaRow
            Dim rowPlanillaRow As PlanillaRow = CType(Me.NewRow,PlanillaRow)
            rowPlanillaRow.ItemArray = New Object() {Id_Planilla, Fecha, FechaInicial, FechaFinal, CierreMes, Ced_Usuario, Nombre_Usuario, Anulado}
            Me.Rows.Add(rowPlanillaRow)
            Return rowPlanillaRow
        End Function
        
        Public Function FindById_Planilla(ByVal Id_Planilla As Long) As PlanillaRow
            Return CType(Me.Rows.Find(New Object() {Id_Planilla}),PlanillaRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PlanillaDataTable = CType(MyBase.Clone,PlanillaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PlanillaDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnId_Planilla = Me.Columns("Id_Planilla")
            Me.columnFecha = Me.Columns("Fecha")
            Me.columnFechaInicial = Me.Columns("FechaInicial")
            Me.columnFechaFinal = Me.Columns("FechaFinal")
            Me.columnCierreMes = Me.Columns("CierreMes")
            Me.columnCed_Usuario = Me.Columns("Ced_Usuario")
            Me.columnNombre_Usuario = Me.Columns("Nombre_Usuario")
            Me.columnAnulado = Me.Columns("Anulado")
        End Sub
        
        Private Sub InitClass()
            Me.columnId_Planilla = New DataColumn("Id_Planilla", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId_Planilla)
            Me.columnFecha = New DataColumn("Fecha", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFecha)
            Me.columnFechaInicial = New DataColumn("FechaInicial", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFechaInicial)
            Me.columnFechaFinal = New DataColumn("FechaFinal", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFechaFinal)
            Me.columnCierreMes = New DataColumn("CierreMes", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCierreMes)
            Me.columnCed_Usuario = New DataColumn("Ced_Usuario", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCed_Usuario)
            Me.columnNombre_Usuario = New DataColumn("Nombre_Usuario", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNombre_Usuario)
            Me.columnAnulado = New DataColumn("Anulado", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAnulado)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnId_Planilla}, true))
            Me.columnId_Planilla.AllowDBNull = false
            Me.columnId_Planilla.Unique = true
            Me.columnFecha.AllowDBNull = false
            Me.columnFechaInicial.AllowDBNull = false
            Me.columnFechaFinal.AllowDBNull = false
            Me.columnCierreMes.AllowDBNull = false
            Me.columnCed_Usuario.AllowDBNull = false
            Me.columnNombre_Usuario.AllowDBNull = false
            Me.columnAnulado.AllowDBNull = false
        End Sub
        
        Public Function NewPlanillaRow() As PlanillaRow
            Return CType(Me.NewRow,PlanillaRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PlanillaRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PlanillaRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PlanillaRowChangedEvent) Is Nothing) Then
                RaiseEvent PlanillaRowChanged(Me, New PlanillaRowChangeEvent(CType(e.Row,PlanillaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PlanillaRowChangingEvent) Is Nothing) Then
                RaiseEvent PlanillaRowChanging(Me, New PlanillaRowChangeEvent(CType(e.Row,PlanillaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PlanillaRowDeletedEvent) Is Nothing) Then
                RaiseEvent PlanillaRowDeleted(Me, New PlanillaRowChangeEvent(CType(e.Row,PlanillaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PlanillaRowDeletingEvent) Is Nothing) Then
                RaiseEvent PlanillaRowDeleting(Me, New PlanillaRowChangeEvent(CType(e.Row,PlanillaRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePlanillaRow(ByVal row As PlanillaRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PlanillaRow
        Inherits DataRow
        
        Private tablePlanilla As PlanillaDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePlanilla = CType(Me.Table,PlanillaDataTable)
        End Sub
        
        Public Property Id_Planilla As Long
            Get
                Return CType(Me(Me.tablePlanilla.Id_PlanillaColumn),Long)
            End Get
            Set
                Me(Me.tablePlanilla.Id_PlanillaColumn) = value
            End Set
        End Property
        
        Public Property Fecha As Date
            Get
                Return CType(Me(Me.tablePlanilla.FechaColumn),Date)
            End Get
            Set
                Me(Me.tablePlanilla.FechaColumn) = value
            End Set
        End Property
        
        Public Property FechaInicial As Date
            Get
                Return CType(Me(Me.tablePlanilla.FechaInicialColumn),Date)
            End Get
            Set
                Me(Me.tablePlanilla.FechaInicialColumn) = value
            End Set
        End Property
        
        Public Property FechaFinal As Date
            Get
                Return CType(Me(Me.tablePlanilla.FechaFinalColumn),Date)
            End Get
            Set
                Me(Me.tablePlanilla.FechaFinalColumn) = value
            End Set
        End Property
        
        Public Property CierreMes As Boolean
            Get
                Return CType(Me(Me.tablePlanilla.CierreMesColumn),Boolean)
            End Get
            Set
                Me(Me.tablePlanilla.CierreMesColumn) = value
            End Set
        End Property
        
        Public Property Ced_Usuario As String
            Get
                Return CType(Me(Me.tablePlanilla.Ced_UsuarioColumn),String)
            End Get
            Set
                Me(Me.tablePlanilla.Ced_UsuarioColumn) = value
            End Set
        End Property
        
        Public Property Nombre_Usuario As String
            Get
                Return CType(Me(Me.tablePlanilla.Nombre_UsuarioColumn),String)
            End Get
            Set
                Me(Me.tablePlanilla.Nombre_UsuarioColumn) = value
            End Set
        End Property
        
        Public Property Anulado As Boolean
            Get
                Return CType(Me(Me.tablePlanilla.AnuladoColumn),Boolean)
            End Get
            Set
                Me(Me.tablePlanilla.AnuladoColumn) = value
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PlanillaRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PlanillaRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PlanillaRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PlanillaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Planilla_DetalleDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCedula As DataColumn
        
        Private columnNombre As DataColumn
        
        Private columnSalario As DataColumn
        
        Private columnFormaPago As DataColumn
        
        Private columnSalarioBruto As DataColumn
        
        Private columnId_Planilla As DataColumn
        
        Private columnId As DataColumn
        
        Friend Sub New()
            MyBase.New("Planilla_Detalle")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property CedulaColumn As DataColumn
            Get
                Return Me.columnCedula
            End Get
        End Property
        
        Friend ReadOnly Property NombreColumn As DataColumn
            Get
                Return Me.columnNombre
            End Get
        End Property
        
        Friend ReadOnly Property SalarioColumn As DataColumn
            Get
                Return Me.columnSalario
            End Get
        End Property
        
        Friend ReadOnly Property FormaPagoColumn As DataColumn
            Get
                Return Me.columnFormaPago
            End Get
        End Property
        
        Friend ReadOnly Property SalarioBrutoColumn As DataColumn
            Get
                Return Me.columnSalarioBruto
            End Get
        End Property
        
        Friend ReadOnly Property Id_PlanillaColumn As DataColumn
            Get
                Return Me.columnId_Planilla
            End Get
        End Property
        
        Friend ReadOnly Property IdColumn As DataColumn
            Get
                Return Me.columnId
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Planilla_DetalleRow
            Get
                Return CType(Me.Rows(index),Planilla_DetalleRow)
            End Get
        End Property
        
        Public Event Planilla_DetalleRowChanged As Planilla_DetalleRowChangeEventHandler
        
        Public Event Planilla_DetalleRowChanging As Planilla_DetalleRowChangeEventHandler
        
        Public Event Planilla_DetalleRowDeleted As Planilla_DetalleRowChangeEventHandler
        
        Public Event Planilla_DetalleRowDeleting As Planilla_DetalleRowChangeEventHandler
        
        Public Overloads Sub AddPlanilla_DetalleRow(ByVal row As Planilla_DetalleRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPlanilla_DetalleRow(ByVal Cedula As String, ByVal Nombre As String, ByVal Salario As Double, ByVal FormaPago As String, ByVal SalarioBruto As Double, ByVal Id_Planilla As Long) As Planilla_DetalleRow
            Dim rowPlanilla_DetalleRow As Planilla_DetalleRow = CType(Me.NewRow,Planilla_DetalleRow)
            rowPlanilla_DetalleRow.ItemArray = New Object() {Cedula, Nombre, Salario, FormaPago, SalarioBruto, Id_Planilla, Nothing}
            Me.Rows.Add(rowPlanilla_DetalleRow)
            Return rowPlanilla_DetalleRow
        End Function
        
        Public Function FindById(ByVal Id As Long) As Planilla_DetalleRow
            Return CType(Me.Rows.Find(New Object() {Id}),Planilla_DetalleRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Planilla_DetalleDataTable = CType(MyBase.Clone,Planilla_DetalleDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Planilla_DetalleDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCedula = Me.Columns("Cedula")
            Me.columnNombre = Me.Columns("Nombre")
            Me.columnSalario = Me.Columns("Salario")
            Me.columnFormaPago = Me.Columns("FormaPago")
            Me.columnSalarioBruto = Me.Columns("SalarioBruto")
            Me.columnId_Planilla = Me.Columns("Id_Planilla")
            Me.columnId = Me.Columns("Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnCedula = New DataColumn("Cedula", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCedula)
            Me.columnNombre = New DataColumn("Nombre", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNombre)
            Me.columnSalario = New DataColumn("Salario", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSalario)
            Me.columnFormaPago = New DataColumn("FormaPago", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFormaPago)
            Me.columnSalarioBruto = New DataColumn("SalarioBruto", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSalarioBruto)
            Me.columnId_Planilla = New DataColumn("Id_Planilla", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId_Planilla)
            Me.columnId = New DataColumn("Id", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnId}, true))
            Me.columnCedula.AllowDBNull = false
            Me.columnNombre.AllowDBNull = false
            Me.columnSalario.AllowDBNull = false
            Me.columnFormaPago.AllowDBNull = false
            Me.columnSalarioBruto.AllowDBNull = false
            Me.columnId_Planilla.AllowDBNull = false
            Me.columnId.AutoIncrement = true
            Me.columnId.AllowDBNull = false
            Me.columnId.ReadOnly = true
            Me.columnId.Unique = true
        End Sub
        
        Public Function NewPlanilla_DetalleRow() As Planilla_DetalleRow
            Return CType(Me.NewRow,Planilla_DetalleRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Planilla_DetalleRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Planilla_DetalleRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Planilla_DetalleRowChangedEvent) Is Nothing) Then
                RaiseEvent Planilla_DetalleRowChanged(Me, New Planilla_DetalleRowChangeEvent(CType(e.Row,Planilla_DetalleRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Planilla_DetalleRowChangingEvent) Is Nothing) Then
                RaiseEvent Planilla_DetalleRowChanging(Me, New Planilla_DetalleRowChangeEvent(CType(e.Row,Planilla_DetalleRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Planilla_DetalleRowDeletedEvent) Is Nothing) Then
                RaiseEvent Planilla_DetalleRowDeleted(Me, New Planilla_DetalleRowChangeEvent(CType(e.Row,Planilla_DetalleRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Planilla_DetalleRowDeletingEvent) Is Nothing) Then
                RaiseEvent Planilla_DetalleRowDeleting(Me, New Planilla_DetalleRowChangeEvent(CType(e.Row,Planilla_DetalleRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePlanilla_DetalleRow(ByVal row As Planilla_DetalleRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Planilla_DetalleRow
        Inherits DataRow
        
        Private tablePlanilla_Detalle As Planilla_DetalleDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePlanilla_Detalle = CType(Me.Table,Planilla_DetalleDataTable)
        End Sub
        
        Public Property Cedula As String
            Get
                Return CType(Me(Me.tablePlanilla_Detalle.CedulaColumn),String)
            End Get
            Set
                Me(Me.tablePlanilla_Detalle.CedulaColumn) = value
            End Set
        End Property
        
        Public Property Nombre As String
            Get
                Return CType(Me(Me.tablePlanilla_Detalle.NombreColumn),String)
            End Get
            Set
                Me(Me.tablePlanilla_Detalle.NombreColumn) = value
            End Set
        End Property
        
        Public Property Salario As Double
            Get
                Return CType(Me(Me.tablePlanilla_Detalle.SalarioColumn),Double)
            End Get
            Set
                Me(Me.tablePlanilla_Detalle.SalarioColumn) = value
            End Set
        End Property
        
        Public Property FormaPago As String
            Get
                Return CType(Me(Me.tablePlanilla_Detalle.FormaPagoColumn),String)
            End Get
            Set
                Me(Me.tablePlanilla_Detalle.FormaPagoColumn) = value
            End Set
        End Property
        
        Public Property SalarioBruto As Double
            Get
                Return CType(Me(Me.tablePlanilla_Detalle.SalarioBrutoColumn),Double)
            End Get
            Set
                Me(Me.tablePlanilla_Detalle.SalarioBrutoColumn) = value
            End Set
        End Property
        
        Public Property Id_Planilla As Long
            Get
                Return CType(Me(Me.tablePlanilla_Detalle.Id_PlanillaColumn),Long)
            End Get
            Set
                Me(Me.tablePlanilla_Detalle.Id_PlanillaColumn) = value
            End Set
        End Property
        
        Public Property Id As Long
            Get
                Return CType(Me(Me.tablePlanilla_Detalle.IdColumn),Long)
            End Get
            Set
                Me(Me.tablePlanilla_Detalle.IdColumn) = value
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Planilla_DetalleRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Planilla_DetalleRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Planilla_DetalleRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Planilla_DetalleRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class liquidacionempleadosDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnLiquidacion As DataColumn
        
        Private columnFecha As DataColumn
        
        Private columnIdentificacion As DataColumn
        
        Private columnNombre As DataColumn
        
        Private columnFechaIngreso As DataColumn
        
        Private columnSalarioMensual As DataColumn
        
        Private columnSalarioDiario As DataColumn
        
        Private columnFechaSalida As DataColumn
        
        Private columnCese As DataColumn
        
        Private columnObservaciones As DataColumn
        
        Private columnAnos As DataColumn
        
        Private columnMeses As DataColumn
        
        Private columnDia As DataColumn
        
        Private columnDiaCesantia As DataColumn
        
        Private columnMontoCesa As DataColumn
        
        Private columnDiaPreaviso As DataColumn
        
        Private columnMontoPreaviso As DataColumn
        
        Private columnDiaAguinal As DataColumn
        
        Private columnMontoAguinal As DataColumn
        
        Private columnDiaVaca As DataColumn
        
        Private columnMontoVaca As DataColumn
        
        Private columnTotal As DataColumn
        
        Friend Sub New()
            MyBase.New("liquidacionempleados")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property LiquidacionColumn As DataColumn
            Get
                Return Me.columnLiquidacion
            End Get
        End Property
        
        Friend ReadOnly Property FechaColumn As DataColumn
            Get
                Return Me.columnFecha
            End Get
        End Property
        
        Friend ReadOnly Property IdentificacionColumn As DataColumn
            Get
                Return Me.columnIdentificacion
            End Get
        End Property
        
        Friend ReadOnly Property NombreColumn As DataColumn
            Get
                Return Me.columnNombre
            End Get
        End Property
        
        Friend ReadOnly Property FechaIngresoColumn As DataColumn
            Get
                Return Me.columnFechaIngreso
            End Get
        End Property
        
        Friend ReadOnly Property SalarioMensualColumn As DataColumn
            Get
                Return Me.columnSalarioMensual
            End Get
        End Property
        
        Friend ReadOnly Property SalarioDiarioColumn As DataColumn
            Get
                Return Me.columnSalarioDiario
            End Get
        End Property
        
        Friend ReadOnly Property FechaSalidaColumn As DataColumn
            Get
                Return Me.columnFechaSalida
            End Get
        End Property
        
        Friend ReadOnly Property CeseColumn As DataColumn
            Get
                Return Me.columnCese
            End Get
        End Property
        
        Friend ReadOnly Property ObservacionesColumn As DataColumn
            Get
                Return Me.columnObservaciones
            End Get
        End Property
        
        Friend ReadOnly Property AnosColumn As DataColumn
            Get
                Return Me.columnAnos
            End Get
        End Property
        
        Friend ReadOnly Property MesesColumn As DataColumn
            Get
                Return Me.columnMeses
            End Get
        End Property
        
        Friend ReadOnly Property DiaColumn As DataColumn
            Get
                Return Me.columnDia
            End Get
        End Property
        
        Friend ReadOnly Property DiaCesantiaColumn As DataColumn
            Get
                Return Me.columnDiaCesantia
            End Get
        End Property
        
        Friend ReadOnly Property MontoCesaColumn As DataColumn
            Get
                Return Me.columnMontoCesa
            End Get
        End Property
        
        Friend ReadOnly Property DiaPreavisoColumn As DataColumn
            Get
                Return Me.columnDiaPreaviso
            End Get
        End Property
        
        Friend ReadOnly Property MontoPreavisoColumn As DataColumn
            Get
                Return Me.columnMontoPreaviso
            End Get
        End Property
        
        Friend ReadOnly Property DiaAguinalColumn As DataColumn
            Get
                Return Me.columnDiaAguinal
            End Get
        End Property
        
        Friend ReadOnly Property MontoAguinalColumn As DataColumn
            Get
                Return Me.columnMontoAguinal
            End Get
        End Property
        
        Friend ReadOnly Property DiaVacaColumn As DataColumn
            Get
                Return Me.columnDiaVaca
            End Get
        End Property
        
        Friend ReadOnly Property MontoVacaColumn As DataColumn
            Get
                Return Me.columnMontoVaca
            End Get
        End Property
        
        Friend ReadOnly Property TotalColumn As DataColumn
            Get
                Return Me.columnTotal
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As liquidacionempleadosRow
            Get
                Return CType(Me.Rows(index),liquidacionempleadosRow)
            End Get
        End Property
        
        Public Event liquidacionempleadosRowChanged As liquidacionempleadosRowChangeEventHandler
        
        Public Event liquidacionempleadosRowChanging As liquidacionempleadosRowChangeEventHandler
        
        Public Event liquidacionempleadosRowDeleted As liquidacionempleadosRowChangeEventHandler
        
        Public Event liquidacionempleadosRowDeleting As liquidacionempleadosRowChangeEventHandler
        
        Public Overloads Sub AddliquidacionempleadosRow(ByVal row As liquidacionempleadosRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddliquidacionempleadosRow( _
                    ByVal Fecha As Date,  _
                    ByVal Identificacion As String,  _
                    ByVal Nombre As String,  _
                    ByVal FechaIngreso As Date,  _
                    ByVal SalarioMensual As Double,  _
                    ByVal SalarioDiario As Double,  _
                    ByVal FechaSalida As Date,  _
                    ByVal Cese As String,  _
                    ByVal Observaciones As String,  _
                    ByVal Anos As Double,  _
                    ByVal Meses As Double,  _
                    ByVal Dia As Double,  _
                    ByVal DiaCesantia As Double,  _
                    ByVal MontoCesa As Double,  _
                    ByVal DiaPreaviso As Double,  _
                    ByVal MontoPreaviso As Double,  _
                    ByVal DiaAguinal As Double,  _
                    ByVal MontoAguinal As Double,  _
                    ByVal DiaVaca As Double,  _
                    ByVal MontoVaca As Double,  _
                    ByVal Total As Double) As liquidacionempleadosRow
            Dim rowliquidacionempleadosRow As liquidacionempleadosRow = CType(Me.NewRow,liquidacionempleadosRow)
            rowliquidacionempleadosRow.ItemArray = New Object() {Nothing, Fecha, Identificacion, Nombre, FechaIngreso, SalarioMensual, SalarioDiario, FechaSalida, Cese, Observaciones, Anos, Meses, Dia, DiaCesantia, MontoCesa, DiaPreaviso, MontoPreaviso, DiaAguinal, MontoAguinal, DiaVaca, MontoVaca, Total}
            Me.Rows.Add(rowliquidacionempleadosRow)
            Return rowliquidacionempleadosRow
        End Function
        
        Public Function FindByLiquidacion(ByVal Liquidacion As Long) As liquidacionempleadosRow
            Return CType(Me.Rows.Find(New Object() {Liquidacion}),liquidacionempleadosRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As liquidacionempleadosDataTable = CType(MyBase.Clone,liquidacionempleadosDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New liquidacionempleadosDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnLiquidacion = Me.Columns("Liquidacion")
            Me.columnFecha = Me.Columns("Fecha")
            Me.columnIdentificacion = Me.Columns("Identificacion")
            Me.columnNombre = Me.Columns("Nombre")
            Me.columnFechaIngreso = Me.Columns("FechaIngreso")
            Me.columnSalarioMensual = Me.Columns("SalarioMensual")
            Me.columnSalarioDiario = Me.Columns("SalarioDiario")
            Me.columnFechaSalida = Me.Columns("FechaSalida")
            Me.columnCese = Me.Columns("Cese")
            Me.columnObservaciones = Me.Columns("Observaciones")
            Me.columnAnos = Me.Columns("Anos")
            Me.columnMeses = Me.Columns("Meses")
            Me.columnDia = Me.Columns("Dia")
            Me.columnDiaCesantia = Me.Columns("DiaCesantia")
            Me.columnMontoCesa = Me.Columns("MontoCesa")
            Me.columnDiaPreaviso = Me.Columns("DiaPreaviso")
            Me.columnMontoPreaviso = Me.Columns("MontoPreaviso")
            Me.columnDiaAguinal = Me.Columns("DiaAguinal")
            Me.columnMontoAguinal = Me.Columns("MontoAguinal")
            Me.columnDiaVaca = Me.Columns("DiaVaca")
            Me.columnMontoVaca = Me.Columns("MontoVaca")
            Me.columnTotal = Me.Columns("Total")
        End Sub
        
        Private Sub InitClass()
            Me.columnLiquidacion = New DataColumn("Liquidacion", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLiquidacion)
            Me.columnFecha = New DataColumn("Fecha", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFecha)
            Me.columnIdentificacion = New DataColumn("Identificacion", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdentificacion)
            Me.columnNombre = New DataColumn("Nombre", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNombre)
            Me.columnFechaIngreso = New DataColumn("FechaIngreso", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFechaIngreso)
            Me.columnSalarioMensual = New DataColumn("SalarioMensual", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSalarioMensual)
            Me.columnSalarioDiario = New DataColumn("SalarioDiario", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSalarioDiario)
            Me.columnFechaSalida = New DataColumn("FechaSalida", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFechaSalida)
            Me.columnCese = New DataColumn("Cese", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCese)
            Me.columnObservaciones = New DataColumn("Observaciones", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnObservaciones)
            Me.columnAnos = New DataColumn("Anos", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAnos)
            Me.columnMeses = New DataColumn("Meses", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMeses)
            Me.columnDia = New DataColumn("Dia", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDia)
            Me.columnDiaCesantia = New DataColumn("DiaCesantia", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDiaCesantia)
            Me.columnMontoCesa = New DataColumn("MontoCesa", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMontoCesa)
            Me.columnDiaPreaviso = New DataColumn("DiaPreaviso", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDiaPreaviso)
            Me.columnMontoPreaviso = New DataColumn("MontoPreaviso", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMontoPreaviso)
            Me.columnDiaAguinal = New DataColumn("DiaAguinal", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDiaAguinal)
            Me.columnMontoAguinal = New DataColumn("MontoAguinal", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMontoAguinal)
            Me.columnDiaVaca = New DataColumn("DiaVaca", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDiaVaca)
            Me.columnMontoVaca = New DataColumn("MontoVaca", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMontoVaca)
            Me.columnTotal = New DataColumn("Total", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTotal)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnLiquidacion}, true))
            Me.columnLiquidacion.AutoIncrement = true
            Me.columnLiquidacion.AllowDBNull = false
            Me.columnLiquidacion.ReadOnly = true
            Me.columnLiquidacion.Unique = true
            Me.columnFecha.AllowDBNull = false
            Me.columnIdentificacion.AllowDBNull = false
            Me.columnNombre.AllowDBNull = false
            Me.columnFechaIngreso.AllowDBNull = false
            Me.columnSalarioMensual.AllowDBNull = false
            Me.columnSalarioDiario.AllowDBNull = false
            Me.columnFechaSalida.AllowDBNull = false
            Me.columnCese.AllowDBNull = false
            Me.columnAnos.AllowDBNull = false
            Me.columnMeses.AllowDBNull = false
            Me.columnDia.AllowDBNull = false
            Me.columnDiaCesantia.AllowDBNull = false
            Me.columnMontoCesa.AllowDBNull = false
            Me.columnDiaPreaviso.AllowDBNull = false
            Me.columnMontoPreaviso.AllowDBNull = false
            Me.columnDiaAguinal.AllowDBNull = false
            Me.columnMontoAguinal.AllowDBNull = false
            Me.columnDiaVaca.AllowDBNull = false
            Me.columnMontoVaca.AllowDBNull = false
            Me.columnTotal.AllowDBNull = false
        End Sub
        
        Public Function NewliquidacionempleadosRow() As liquidacionempleadosRow
            Return CType(Me.NewRow,liquidacionempleadosRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New liquidacionempleadosRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(liquidacionempleadosRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.liquidacionempleadosRowChangedEvent) Is Nothing) Then
                RaiseEvent liquidacionempleadosRowChanged(Me, New liquidacionempleadosRowChangeEvent(CType(e.Row,liquidacionempleadosRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.liquidacionempleadosRowChangingEvent) Is Nothing) Then
                RaiseEvent liquidacionempleadosRowChanging(Me, New liquidacionempleadosRowChangeEvent(CType(e.Row,liquidacionempleadosRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.liquidacionempleadosRowDeletedEvent) Is Nothing) Then
                RaiseEvent liquidacionempleadosRowDeleted(Me, New liquidacionempleadosRowChangeEvent(CType(e.Row,liquidacionempleadosRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.liquidacionempleadosRowDeletingEvent) Is Nothing) Then
                RaiseEvent liquidacionempleadosRowDeleting(Me, New liquidacionempleadosRowChangeEvent(CType(e.Row,liquidacionempleadosRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveliquidacionempleadosRow(ByVal row As liquidacionempleadosRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class liquidacionempleadosRow
        Inherits DataRow
        
        Private tableliquidacionempleados As liquidacionempleadosDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableliquidacionempleados = CType(Me.Table,liquidacionempleadosDataTable)
        End Sub
        
        Public Property Liquidacion As Long
            Get
                Return CType(Me(Me.tableliquidacionempleados.LiquidacionColumn),Long)
            End Get
            Set
                Me(Me.tableliquidacionempleados.LiquidacionColumn) = value
            End Set
        End Property
        
        Public Property Fecha As Date
            Get
                Return CType(Me(Me.tableliquidacionempleados.FechaColumn),Date)
            End Get
            Set
                Me(Me.tableliquidacionempleados.FechaColumn) = value
            End Set
        End Property
        
        Public Property Identificacion As String
            Get
                Return CType(Me(Me.tableliquidacionempleados.IdentificacionColumn),String)
            End Get
            Set
                Me(Me.tableliquidacionempleados.IdentificacionColumn) = value
            End Set
        End Property
        
        Public Property Nombre As String
            Get
                Return CType(Me(Me.tableliquidacionempleados.NombreColumn),String)
            End Get
            Set
                Me(Me.tableliquidacionempleados.NombreColumn) = value
            End Set
        End Property
        
        Public Property FechaIngreso As Date
            Get
                Return CType(Me(Me.tableliquidacionempleados.FechaIngresoColumn),Date)
            End Get
            Set
                Me(Me.tableliquidacionempleados.FechaIngresoColumn) = value
            End Set
        End Property
        
        Public Property SalarioMensual As Double
            Get
                Return CType(Me(Me.tableliquidacionempleados.SalarioMensualColumn),Double)
            End Get
            Set
                Me(Me.tableliquidacionempleados.SalarioMensualColumn) = value
            End Set
        End Property
        
        Public Property SalarioDiario As Double
            Get
                Return CType(Me(Me.tableliquidacionempleados.SalarioDiarioColumn),Double)
            End Get
            Set
                Me(Me.tableliquidacionempleados.SalarioDiarioColumn) = value
            End Set
        End Property
        
        Public Property FechaSalida As Date
            Get
                Return CType(Me(Me.tableliquidacionempleados.FechaSalidaColumn),Date)
            End Get
            Set
                Me(Me.tableliquidacionempleados.FechaSalidaColumn) = value
            End Set
        End Property
        
        Public Property Cese As String
            Get
                Return CType(Me(Me.tableliquidacionempleados.CeseColumn),String)
            End Get
            Set
                Me(Me.tableliquidacionempleados.CeseColumn) = value
            End Set
        End Property
        
        Public Property Observaciones As String
            Get
                Try 
                    Return CType(Me(Me.tableliquidacionempleados.ObservacionesColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableliquidacionempleados.ObservacionesColumn) = value
            End Set
        End Property
        
        Public Property Anos As Double
            Get
                Return CType(Me(Me.tableliquidacionempleados.AnosColumn),Double)
            End Get
            Set
                Me(Me.tableliquidacionempleados.AnosColumn) = value
            End Set
        End Property
        
        Public Property Meses As Double
            Get
                Return CType(Me(Me.tableliquidacionempleados.MesesColumn),Double)
            End Get
            Set
                Me(Me.tableliquidacionempleados.MesesColumn) = value
            End Set
        End Property
        
        Public Property Dia As Double
            Get
                Return CType(Me(Me.tableliquidacionempleados.DiaColumn),Double)
            End Get
            Set
                Me(Me.tableliquidacionempleados.DiaColumn) = value
            End Set
        End Property
        
        Public Property DiaCesantia As Double
            Get
                Return CType(Me(Me.tableliquidacionempleados.DiaCesantiaColumn),Double)
            End Get
            Set
                Me(Me.tableliquidacionempleados.DiaCesantiaColumn) = value
            End Set
        End Property
        
        Public Property MontoCesa As Double
            Get
                Return CType(Me(Me.tableliquidacionempleados.MontoCesaColumn),Double)
            End Get
            Set
                Me(Me.tableliquidacionempleados.MontoCesaColumn) = value
            End Set
        End Property
        
        Public Property DiaPreaviso As Double
            Get
                Return CType(Me(Me.tableliquidacionempleados.DiaPreavisoColumn),Double)
            End Get
            Set
                Me(Me.tableliquidacionempleados.DiaPreavisoColumn) = value
            End Set
        End Property
        
        Public Property MontoPreaviso As Double
            Get
                Return CType(Me(Me.tableliquidacionempleados.MontoPreavisoColumn),Double)
            End Get
            Set
                Me(Me.tableliquidacionempleados.MontoPreavisoColumn) = value
            End Set
        End Property
        
        Public Property DiaAguinal As Double
            Get
                Return CType(Me(Me.tableliquidacionempleados.DiaAguinalColumn),Double)
            End Get
            Set
                Me(Me.tableliquidacionempleados.DiaAguinalColumn) = value
            End Set
        End Property
        
        Public Property MontoAguinal As Double
            Get
                Return CType(Me(Me.tableliquidacionempleados.MontoAguinalColumn),Double)
            End Get
            Set
                Me(Me.tableliquidacionempleados.MontoAguinalColumn) = value
            End Set
        End Property
        
        Public Property DiaVaca As Double
            Get
                Return CType(Me(Me.tableliquidacionempleados.DiaVacaColumn),Double)
            End Get
            Set
                Me(Me.tableliquidacionempleados.DiaVacaColumn) = value
            End Set
        End Property
        
        Public Property MontoVaca As Double
            Get
                Return CType(Me(Me.tableliquidacionempleados.MontoVacaColumn),Double)
            End Get
            Set
                Me(Me.tableliquidacionempleados.MontoVacaColumn) = value
            End Set
        End Property
        
        Public Property Total As Double
            Get
                Return CType(Me(Me.tableliquidacionempleados.TotalColumn),Double)
            End Get
            Set
                Me(Me.tableliquidacionempleados.TotalColumn) = value
            End Set
        End Property
        
        Public Function IsObservacionesNull() As Boolean
            Return Me.IsNull(Me.tableliquidacionempleados.ObservacionesColumn)
        End Function
        
        Public Sub SetObservacionesNull()
            Me(Me.tableliquidacionempleados.ObservacionesColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class liquidacionempleadosRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As liquidacionempleadosRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As liquidacionempleadosRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As liquidacionempleadosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AdelantosDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnNumero As DataColumn
        
        Private columnIdentificacion As DataColumn
        
        Private columnNombre As DataColumn
        
        Private columnAdelanto As DataColumn
        
        Private columnPrestamo As DataColumn
        
        Private columnPuesto As DataColumn
        
        Private columnSalario As DataColumn
        
        Private columnFechaComprobante As DataColumn
        
        Private columnNum_Pago As DataColumn
        
        Private columnMonto As DataColumn
        
        Private columnMontoEnLetras As DataColumn
        
        Private columnFechaCobro As DataColumn
        
        Private columnObservaciones As DataColumn
        
        Private columnDeducirxPago As DataColumn
        
        Private columnUsuario As DataColumn
        
        Private columnNombreUsuario As DataColumn
        
        Private columnCod_Moneda As DataColumn
        
        Private columnAnulado As DataColumn
        
        Friend Sub New()
            MyBase.New("Adelantos")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property NumeroColumn As DataColumn
            Get
                Return Me.columnNumero
            End Get
        End Property
        
        Friend ReadOnly Property IdentificacionColumn As DataColumn
            Get
                Return Me.columnIdentificacion
            End Get
        End Property
        
        Friend ReadOnly Property NombreColumn As DataColumn
            Get
                Return Me.columnNombre
            End Get
        End Property
        
        Friend ReadOnly Property AdelantoColumn As DataColumn
            Get
                Return Me.columnAdelanto
            End Get
        End Property
        
        Friend ReadOnly Property PrestamoColumn As DataColumn
            Get
                Return Me.columnPrestamo
            End Get
        End Property
        
        Friend ReadOnly Property PuestoColumn As DataColumn
            Get
                Return Me.columnPuesto
            End Get
        End Property
        
        Friend ReadOnly Property SalarioColumn As DataColumn
            Get
                Return Me.columnSalario
            End Get
        End Property
        
        Friend ReadOnly Property FechaComprobanteColumn As DataColumn
            Get
                Return Me.columnFechaComprobante
            End Get
        End Property
        
        Friend ReadOnly Property Num_PagoColumn As DataColumn
            Get
                Return Me.columnNum_Pago
            End Get
        End Property
        
        Friend ReadOnly Property MontoColumn As DataColumn
            Get
                Return Me.columnMonto
            End Get
        End Property
        
        Friend ReadOnly Property MontoEnLetrasColumn As DataColumn
            Get
                Return Me.columnMontoEnLetras
            End Get
        End Property
        
        Friend ReadOnly Property FechaCobroColumn As DataColumn
            Get
                Return Me.columnFechaCobro
            End Get
        End Property
        
        Friend ReadOnly Property ObservacionesColumn As DataColumn
            Get
                Return Me.columnObservaciones
            End Get
        End Property
        
        Friend ReadOnly Property DeducirxPagoColumn As DataColumn
            Get
                Return Me.columnDeducirxPago
            End Get
        End Property
        
        Friend ReadOnly Property UsuarioColumn As DataColumn
            Get
                Return Me.columnUsuario
            End Get
        End Property
        
        Friend ReadOnly Property NombreUsuarioColumn As DataColumn
            Get
                Return Me.columnNombreUsuario
            End Get
        End Property
        
        Friend ReadOnly Property Cod_MonedaColumn As DataColumn
            Get
                Return Me.columnCod_Moneda
            End Get
        End Property
        
        Friend ReadOnly Property AnuladoColumn As DataColumn
            Get
                Return Me.columnAnulado
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As AdelantosRow
            Get
                Return CType(Me.Rows(index),AdelantosRow)
            End Get
        End Property
        
        Public Event AdelantosRowChanged As AdelantosRowChangeEventHandler
        
        Public Event AdelantosRowChanging As AdelantosRowChangeEventHandler
        
        Public Event AdelantosRowDeleted As AdelantosRowChangeEventHandler
        
        Public Event AdelantosRowDeleting As AdelantosRowChangeEventHandler
        
        Public Overloads Sub AddAdelantosRow(ByVal row As AdelantosRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddAdelantosRow( _
                    ByVal Identificacion As String,  _
                    ByVal Nombre As String,  _
                    ByVal Adelanto As Boolean,  _
                    ByVal Prestamo As Boolean,  _
                    ByVal Puesto As String,  _
                    ByVal Salario As Double,  _
                    ByVal FechaComprobante As Date,  _
                    ByVal Num_Pago As Integer,  _
                    ByVal Monto As Double,  _
                    ByVal MontoEnLetras As String,  _
                    ByVal FechaCobro As Date,  _
                    ByVal Observaciones As String,  _
                    ByVal DeducirxPago As Double,  _
                    ByVal Usuario As String,  _
                    ByVal NombreUsuario As String,  _
                    ByVal Cod_Moneda As Integer,  _
                    ByVal Anulado As Boolean) As AdelantosRow
            Dim rowAdelantosRow As AdelantosRow = CType(Me.NewRow,AdelantosRow)
            rowAdelantosRow.ItemArray = New Object() {Nothing, Identificacion, Nombre, Adelanto, Prestamo, Puesto, Salario, FechaComprobante, Num_Pago, Monto, MontoEnLetras, FechaCobro, Observaciones, DeducirxPago, Usuario, NombreUsuario, Cod_Moneda, Anulado}
            Me.Rows.Add(rowAdelantosRow)
            Return rowAdelantosRow
        End Function
        
        Public Function FindByNumero(ByVal Numero As Long) As AdelantosRow
            Return CType(Me.Rows.Find(New Object() {Numero}),AdelantosRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As AdelantosDataTable = CType(MyBase.Clone,AdelantosDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New AdelantosDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnNumero = Me.Columns("Numero")
            Me.columnIdentificacion = Me.Columns("Identificacion")
            Me.columnNombre = Me.Columns("Nombre")
            Me.columnAdelanto = Me.Columns("Adelanto")
            Me.columnPrestamo = Me.Columns("Prestamo")
            Me.columnPuesto = Me.Columns("Puesto")
            Me.columnSalario = Me.Columns("Salario")
            Me.columnFechaComprobante = Me.Columns("FechaComprobante")
            Me.columnNum_Pago = Me.Columns("Num_Pago")
            Me.columnMonto = Me.Columns("Monto")
            Me.columnMontoEnLetras = Me.Columns("MontoEnLetras")
            Me.columnFechaCobro = Me.Columns("FechaCobro")
            Me.columnObservaciones = Me.Columns("Observaciones")
            Me.columnDeducirxPago = Me.Columns("DeducirxPago")
            Me.columnUsuario = Me.Columns("Usuario")
            Me.columnNombreUsuario = Me.Columns("NombreUsuario")
            Me.columnCod_Moneda = Me.Columns("Cod_Moneda")
            Me.columnAnulado = Me.Columns("Anulado")
        End Sub
        
        Private Sub InitClass()
            Me.columnNumero = New DataColumn("Numero", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNumero)
            Me.columnIdentificacion = New DataColumn("Identificacion", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdentificacion)
            Me.columnNombre = New DataColumn("Nombre", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNombre)
            Me.columnAdelanto = New DataColumn("Adelanto", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAdelanto)
            Me.columnPrestamo = New DataColumn("Prestamo", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPrestamo)
            Me.columnPuesto = New DataColumn("Puesto", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPuesto)
            Me.columnSalario = New DataColumn("Salario", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSalario)
            Me.columnFechaComprobante = New DataColumn("FechaComprobante", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFechaComprobante)
            Me.columnNum_Pago = New DataColumn("Num_Pago", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNum_Pago)
            Me.columnMonto = New DataColumn("Monto", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMonto)
            Me.columnMontoEnLetras = New DataColumn("MontoEnLetras", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMontoEnLetras)
            Me.columnFechaCobro = New DataColumn("FechaCobro", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFechaCobro)
            Me.columnObservaciones = New DataColumn("Observaciones", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnObservaciones)
            Me.columnDeducirxPago = New DataColumn("DeducirxPago", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDeducirxPago)
            Me.columnUsuario = New DataColumn("Usuario", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUsuario)
            Me.columnNombreUsuario = New DataColumn("NombreUsuario", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNombreUsuario)
            Me.columnCod_Moneda = New DataColumn("Cod_Moneda", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCod_Moneda)
            Me.columnAnulado = New DataColumn("Anulado", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAnulado)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnNumero}, true))
            Me.columnNumero.AutoIncrement = true
            Me.columnNumero.AllowDBNull = false
            Me.columnNumero.ReadOnly = true
            Me.columnNumero.Unique = true
            Me.columnIdentificacion.AllowDBNull = false
            Me.columnNombre.AllowDBNull = false
            Me.columnAdelanto.AllowDBNull = false
            Me.columnPrestamo.AllowDBNull = false
            Me.columnPuesto.AllowDBNull = false
            Me.columnSalario.AllowDBNull = false
            Me.columnFechaComprobante.AllowDBNull = false
            Me.columnNum_Pago.AllowDBNull = false
            Me.columnMonto.AllowDBNull = false
            Me.columnMontoEnLetras.AllowDBNull = false
            Me.columnFechaCobro.AllowDBNull = false
            Me.columnObservaciones.AllowDBNull = false
            Me.columnDeducirxPago.AllowDBNull = false
            Me.columnUsuario.AllowDBNull = false
            Me.columnNombreUsuario.AllowDBNull = false
            Me.columnCod_Moneda.AllowDBNull = false
            Me.columnAnulado.AllowDBNull = false
        End Sub
        
        Public Function NewAdelantosRow() As AdelantosRow
            Return CType(Me.NewRow,AdelantosRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New AdelantosRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(AdelantosRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AdelantosRowChangedEvent) Is Nothing) Then
                RaiseEvent AdelantosRowChanged(Me, New AdelantosRowChangeEvent(CType(e.Row,AdelantosRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AdelantosRowChangingEvent) Is Nothing) Then
                RaiseEvent AdelantosRowChanging(Me, New AdelantosRowChangeEvent(CType(e.Row,AdelantosRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AdelantosRowDeletedEvent) Is Nothing) Then
                RaiseEvent AdelantosRowDeleted(Me, New AdelantosRowChangeEvent(CType(e.Row,AdelantosRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AdelantosRowDeletingEvent) Is Nothing) Then
                RaiseEvent AdelantosRowDeleting(Me, New AdelantosRowChangeEvent(CType(e.Row,AdelantosRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveAdelantosRow(ByVal row As AdelantosRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AdelantosRow
        Inherits DataRow
        
        Private tableAdelantos As AdelantosDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableAdelantos = CType(Me.Table,AdelantosDataTable)
        End Sub
        
        Public Property Numero As Long
            Get
                Return CType(Me(Me.tableAdelantos.NumeroColumn),Long)
            End Get
            Set
                Me(Me.tableAdelantos.NumeroColumn) = value
            End Set
        End Property
        
        Public Property Identificacion As String
            Get
                Return CType(Me(Me.tableAdelantos.IdentificacionColumn),String)
            End Get
            Set
                Me(Me.tableAdelantos.IdentificacionColumn) = value
            End Set
        End Property
        
        Public Property Nombre As String
            Get
                Return CType(Me(Me.tableAdelantos.NombreColumn),String)
            End Get
            Set
                Me(Me.tableAdelantos.NombreColumn) = value
            End Set
        End Property
        
        Public Property Adelanto As Boolean
            Get
                Return CType(Me(Me.tableAdelantos.AdelantoColumn),Boolean)
            End Get
            Set
                Me(Me.tableAdelantos.AdelantoColumn) = value
            End Set
        End Property
        
        Public Property Prestamo As Boolean
            Get
                Return CType(Me(Me.tableAdelantos.PrestamoColumn),Boolean)
            End Get
            Set
                Me(Me.tableAdelantos.PrestamoColumn) = value
            End Set
        End Property
        
        Public Property Puesto As String
            Get
                Return CType(Me(Me.tableAdelantos.PuestoColumn),String)
            End Get
            Set
                Me(Me.tableAdelantos.PuestoColumn) = value
            End Set
        End Property
        
        Public Property Salario As Double
            Get
                Return CType(Me(Me.tableAdelantos.SalarioColumn),Double)
            End Get
            Set
                Me(Me.tableAdelantos.SalarioColumn) = value
            End Set
        End Property
        
        Public Property FechaComprobante As Date
            Get
                Return CType(Me(Me.tableAdelantos.FechaComprobanteColumn),Date)
            End Get
            Set
                Me(Me.tableAdelantos.FechaComprobanteColumn) = value
            End Set
        End Property
        
        Public Property Num_Pago As Integer
            Get
                Return CType(Me(Me.tableAdelantos.Num_PagoColumn),Integer)
            End Get
            Set
                Me(Me.tableAdelantos.Num_PagoColumn) = value
            End Set
        End Property
        
        Public Property Monto As Double
            Get
                Return CType(Me(Me.tableAdelantos.MontoColumn),Double)
            End Get
            Set
                Me(Me.tableAdelantos.MontoColumn) = value
            End Set
        End Property
        
        Public Property MontoEnLetras As String
            Get
                Return CType(Me(Me.tableAdelantos.MontoEnLetrasColumn),String)
            End Get
            Set
                Me(Me.tableAdelantos.MontoEnLetrasColumn) = value
            End Set
        End Property
        
        Public Property FechaCobro As Date
            Get
                Return CType(Me(Me.tableAdelantos.FechaCobroColumn),Date)
            End Get
            Set
                Me(Me.tableAdelantos.FechaCobroColumn) = value
            End Set
        End Property
        
        Public Property Observaciones As String
            Get
                Return CType(Me(Me.tableAdelantos.ObservacionesColumn),String)
            End Get
            Set
                Me(Me.tableAdelantos.ObservacionesColumn) = value
            End Set
        End Property
        
        Public Property DeducirxPago As Double
            Get
                Return CType(Me(Me.tableAdelantos.DeducirxPagoColumn),Double)
            End Get
            Set
                Me(Me.tableAdelantos.DeducirxPagoColumn) = value
            End Set
        End Property
        
        Public Property Usuario As String
            Get
                Return CType(Me(Me.tableAdelantos.UsuarioColumn),String)
            End Get
            Set
                Me(Me.tableAdelantos.UsuarioColumn) = value
            End Set
        End Property
        
        Public Property NombreUsuario As String
            Get
                Return CType(Me(Me.tableAdelantos.NombreUsuarioColumn),String)
            End Get
            Set
                Me(Me.tableAdelantos.NombreUsuarioColumn) = value
            End Set
        End Property
        
        Public Property Cod_Moneda As Integer
            Get
                Return CType(Me(Me.tableAdelantos.Cod_MonedaColumn),Integer)
            End Get
            Set
                Me(Me.tableAdelantos.Cod_MonedaColumn) = value
            End Set
        End Property
        
        Public Property Anulado As Boolean
            Get
                Return CType(Me(Me.tableAdelantos.AnuladoColumn),Boolean)
            End Get
            Set
                Me(Me.tableAdelantos.AnuladoColumn) = value
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AdelantosRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As AdelantosRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As AdelantosRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As AdelantosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
