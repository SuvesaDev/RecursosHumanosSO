'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DsEmpleado
    Inherits DataSet
    
    Private tableNacionalidad As NacionalidadDataTable
    
    Private tableDepartamento As DepartamentoDataTable
    
    Private tableMoneda As MonedaDataTable
    
    Private tableEstado_Empleado As Estado_EmpleadoDataTable
    
    Private tableMoneda2 As Moneda2DataTable
    
    Private tableEmpleado_Deducciones As Empleado_DeduccionesDataTable
    
    Private tableEmpleado_Academico As Empleado_AcademicoDataTable
    
    Private tableEmpleado_Licencias As Empleado_LicenciasDataTable
    
    Private tableDistribucionContable As DistribucionContableDataTable
    
    Private tableEmpleadoDistribucionContable As EmpleadoDistribucionContableDataTable
    
    Private tableEmpleado As EmpleadoDataTable
    
    Private relationEstado_EmpleadoEmpleado As DataRelation
    
    Private relationMonedaEmpleado As DataRelation
    
    Private relationDepartamentoEmpleado As DataRelation
    
    Private relationNacionalidadEmpleado As DataRelation
    
    Private relationEmpleadoDistribucionContable As DataRelation
    
    Private relationEmpleadoEmpleado_Licencias As DataRelation
    
    Private relationEmpleadoEmpleado_Academico As DataRelation
    
    Private relationEmpleadoEmpleado_Deducciones As DataRelation
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Nacionalidad")) Is Nothing) Then
                Me.Tables.Add(New NacionalidadDataTable(ds.Tables("Nacionalidad")))
            End If
            If (Not (ds.Tables("Departamento")) Is Nothing) Then
                Me.Tables.Add(New DepartamentoDataTable(ds.Tables("Departamento")))
            End If
            If (Not (ds.Tables("Moneda")) Is Nothing) Then
                Me.Tables.Add(New MonedaDataTable(ds.Tables("Moneda")))
            End If
            If (Not (ds.Tables("Estado_Empleado")) Is Nothing) Then
                Me.Tables.Add(New Estado_EmpleadoDataTable(ds.Tables("Estado_Empleado")))
            End If
            If (Not (ds.Tables("Moneda2")) Is Nothing) Then
                Me.Tables.Add(New Moneda2DataTable(ds.Tables("Moneda2")))
            End If
            If (Not (ds.Tables("Empleado_Deducciones")) Is Nothing) Then
                Me.Tables.Add(New Empleado_DeduccionesDataTable(ds.Tables("Empleado_Deducciones")))
            End If
            If (Not (ds.Tables("Empleado_Academico")) Is Nothing) Then
                Me.Tables.Add(New Empleado_AcademicoDataTable(ds.Tables("Empleado_Academico")))
            End If
            If (Not (ds.Tables("Empleado_Licencias")) Is Nothing) Then
                Me.Tables.Add(New Empleado_LicenciasDataTable(ds.Tables("Empleado_Licencias")))
            End If
            If (Not (ds.Tables("DistribucionContable")) Is Nothing) Then
                Me.Tables.Add(New DistribucionContableDataTable(ds.Tables("DistribucionContable")))
            End If
            If (Not (ds.Tables("EmpleadoDistribucionContable")) Is Nothing) Then
                Me.Tables.Add(New EmpleadoDistribucionContableDataTable(ds.Tables("EmpleadoDistribucionContable")))
            End If
            If (Not (ds.Tables("Empleado")) Is Nothing) Then
                Me.Tables.Add(New EmpleadoDataTable(ds.Tables("Empleado")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Nacionalidad As NacionalidadDataTable
        Get
            Return Me.tableNacionalidad
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Departamento As DepartamentoDataTable
        Get
            Return Me.tableDepartamento
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Moneda As MonedaDataTable
        Get
            Return Me.tableMoneda
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Estado_Empleado As Estado_EmpleadoDataTable
        Get
            Return Me.tableEstado_Empleado
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Moneda2 As Moneda2DataTable
        Get
            Return Me.tableMoneda2
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Empleado_Deducciones As Empleado_DeduccionesDataTable
        Get
            Return Me.tableEmpleado_Deducciones
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Empleado_Academico As Empleado_AcademicoDataTable
        Get
            Return Me.tableEmpleado_Academico
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Empleado_Licencias As Empleado_LicenciasDataTable
        Get
            Return Me.tableEmpleado_Licencias
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property DistribucionContable As DistribucionContableDataTable
        Get
            Return Me.tableDistribucionContable
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property EmpleadoDistribucionContable As EmpleadoDistribucionContableDataTable
        Get
            Return Me.tableEmpleadoDistribucionContable
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Empleado As EmpleadoDataTable
        Get
            Return Me.tableEmpleado
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DsEmpleado = CType(MyBase.Clone,DsEmpleado)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("Nacionalidad")) Is Nothing) Then
            Me.Tables.Add(New NacionalidadDataTable(ds.Tables("Nacionalidad")))
        End If
        If (Not (ds.Tables("Departamento")) Is Nothing) Then
            Me.Tables.Add(New DepartamentoDataTable(ds.Tables("Departamento")))
        End If
        If (Not (ds.Tables("Moneda")) Is Nothing) Then
            Me.Tables.Add(New MonedaDataTable(ds.Tables("Moneda")))
        End If
        If (Not (ds.Tables("Estado_Empleado")) Is Nothing) Then
            Me.Tables.Add(New Estado_EmpleadoDataTable(ds.Tables("Estado_Empleado")))
        End If
        If (Not (ds.Tables("Moneda2")) Is Nothing) Then
            Me.Tables.Add(New Moneda2DataTable(ds.Tables("Moneda2")))
        End If
        If (Not (ds.Tables("Empleado_Deducciones")) Is Nothing) Then
            Me.Tables.Add(New Empleado_DeduccionesDataTable(ds.Tables("Empleado_Deducciones")))
        End If
        If (Not (ds.Tables("Empleado_Academico")) Is Nothing) Then
            Me.Tables.Add(New Empleado_AcademicoDataTable(ds.Tables("Empleado_Academico")))
        End If
        If (Not (ds.Tables("Empleado_Licencias")) Is Nothing) Then
            Me.Tables.Add(New Empleado_LicenciasDataTable(ds.Tables("Empleado_Licencias")))
        End If
        If (Not (ds.Tables("DistribucionContable")) Is Nothing) Then
            Me.Tables.Add(New DistribucionContableDataTable(ds.Tables("DistribucionContable")))
        End If
        If (Not (ds.Tables("EmpleadoDistribucionContable")) Is Nothing) Then
            Me.Tables.Add(New EmpleadoDistribucionContableDataTable(ds.Tables("EmpleadoDistribucionContable")))
        End If
        If (Not (ds.Tables("Empleado")) Is Nothing) Then
            Me.Tables.Add(New EmpleadoDataTable(ds.Tables("Empleado")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableNacionalidad = CType(Me.Tables("Nacionalidad"),NacionalidadDataTable)
        If (Not (Me.tableNacionalidad) Is Nothing) Then
            Me.tableNacionalidad.InitVars
        End If
        Me.tableDepartamento = CType(Me.Tables("Departamento"),DepartamentoDataTable)
        If (Not (Me.tableDepartamento) Is Nothing) Then
            Me.tableDepartamento.InitVars
        End If
        Me.tableMoneda = CType(Me.Tables("Moneda"),MonedaDataTable)
        If (Not (Me.tableMoneda) Is Nothing) Then
            Me.tableMoneda.InitVars
        End If
        Me.tableEstado_Empleado = CType(Me.Tables("Estado_Empleado"),Estado_EmpleadoDataTable)
        If (Not (Me.tableEstado_Empleado) Is Nothing) Then
            Me.tableEstado_Empleado.InitVars
        End If
        Me.tableMoneda2 = CType(Me.Tables("Moneda2"),Moneda2DataTable)
        If (Not (Me.tableMoneda2) Is Nothing) Then
            Me.tableMoneda2.InitVars
        End If
        Me.tableEmpleado_Deducciones = CType(Me.Tables("Empleado_Deducciones"),Empleado_DeduccionesDataTable)
        If (Not (Me.tableEmpleado_Deducciones) Is Nothing) Then
            Me.tableEmpleado_Deducciones.InitVars
        End If
        Me.tableEmpleado_Academico = CType(Me.Tables("Empleado_Academico"),Empleado_AcademicoDataTable)
        If (Not (Me.tableEmpleado_Academico) Is Nothing) Then
            Me.tableEmpleado_Academico.InitVars
        End If
        Me.tableEmpleado_Licencias = CType(Me.Tables("Empleado_Licencias"),Empleado_LicenciasDataTable)
        If (Not (Me.tableEmpleado_Licencias) Is Nothing) Then
            Me.tableEmpleado_Licencias.InitVars
        End If
        Me.tableDistribucionContable = CType(Me.Tables("DistribucionContable"),DistribucionContableDataTable)
        If (Not (Me.tableDistribucionContable) Is Nothing) Then
            Me.tableDistribucionContable.InitVars
        End If
        Me.tableEmpleadoDistribucionContable = CType(Me.Tables("EmpleadoDistribucionContable"),EmpleadoDistribucionContableDataTable)
        If (Not (Me.tableEmpleadoDistribucionContable) Is Nothing) Then
            Me.tableEmpleadoDistribucionContable.InitVars
        End If
        Me.tableEmpleado = CType(Me.Tables("Empleado"),EmpleadoDataTable)
        If (Not (Me.tableEmpleado) Is Nothing) Then
            Me.tableEmpleado.InitVars
        End If
        Me.relationEstado_EmpleadoEmpleado = Me.Relations("Estado_EmpleadoEmpleado")
        Me.relationMonedaEmpleado = Me.Relations("MonedaEmpleado")
        Me.relationDepartamentoEmpleado = Me.Relations("DepartamentoEmpleado")
        Me.relationNacionalidadEmpleado = Me.Relations("NacionalidadEmpleado")
        Me.relationEmpleadoDistribucionContable = Me.Relations("EmpleadoDistribucionContable")
        Me.relationEmpleadoEmpleado_Licencias = Me.Relations("EmpleadoEmpleado_Licencias")
        Me.relationEmpleadoEmpleado_Academico = Me.Relations("EmpleadoEmpleado_Academico")
        Me.relationEmpleadoEmpleado_Deducciones = Me.Relations("EmpleadoEmpleado_Deducciones")
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DsEmpleado"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DsEmpleado.xsd"
        Me.Locale = New System.Globalization.CultureInfo("es-CR")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableNacionalidad = New NacionalidadDataTable
        Me.Tables.Add(Me.tableNacionalidad)
        Me.tableDepartamento = New DepartamentoDataTable
        Me.Tables.Add(Me.tableDepartamento)
        Me.tableMoneda = New MonedaDataTable
        Me.Tables.Add(Me.tableMoneda)
        Me.tableEstado_Empleado = New Estado_EmpleadoDataTable
        Me.Tables.Add(Me.tableEstado_Empleado)
        Me.tableMoneda2 = New Moneda2DataTable
        Me.Tables.Add(Me.tableMoneda2)
        Me.tableEmpleado_Deducciones = New Empleado_DeduccionesDataTable
        Me.Tables.Add(Me.tableEmpleado_Deducciones)
        Me.tableEmpleado_Academico = New Empleado_AcademicoDataTable
        Me.Tables.Add(Me.tableEmpleado_Academico)
        Me.tableEmpleado_Licencias = New Empleado_LicenciasDataTable
        Me.Tables.Add(Me.tableEmpleado_Licencias)
        Me.tableDistribucionContable = New DistribucionContableDataTable
        Me.Tables.Add(Me.tableDistribucionContable)
        Me.tableEmpleadoDistribucionContable = New EmpleadoDistribucionContableDataTable
        Me.Tables.Add(Me.tableEmpleadoDistribucionContable)
        Me.tableEmpleado = New EmpleadoDataTable
        Me.Tables.Add(Me.tableEmpleado)
        Dim fkc As ForeignKeyConstraint
        fkc = New ForeignKeyConstraint("EmpleadoEmpleado_Deducciones", New DataColumn() {Me.tableEmpleado.IdentificacionColumn}, New DataColumn() {Me.tableEmpleado_Deducciones.IdentificacionColumn})
        Me.tableEmpleado_Deducciones.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("EmpleadoEmpleado_Academico", New DataColumn() {Me.tableEmpleado.IdentificacionColumn}, New DataColumn() {Me.tableEmpleado_Academico.IdentificacionColumn})
        Me.tableEmpleado_Academico.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("EmpleadoEmpleado_Licencias", New DataColumn() {Me.tableEmpleado.IdentificacionColumn}, New DataColumn() {Me.tableEmpleado_Licencias.IdentificacionColumn})
        Me.tableEmpleado_Licencias.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("EmpleadoDistribucionContable", New DataColumn() {Me.tableEmpleado.IdentificacionColumn}, New DataColumn() {Me.tableDistribucionContable.EmpleadoIdentificacionColumn})
        Me.tableDistribucionContable.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("Estado_EmpleadoEmpleado", New DataColumn() {Me.tableEstado_Empleado.CodigoColumn}, New DataColumn() {Me.tableEmpleado.Cod_EstadoColumn})
        Me.tableEmpleado.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("MonedaEmpleado", New DataColumn() {Me.tableMoneda.CodMonedaColumn}, New DataColumn() {Me.tableEmpleado.Cod_MonedaColumn})
        Me.tableEmpleado.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("DepartamentoEmpleado", New DataColumn() {Me.tableDepartamento.IdColumn}, New DataColumn() {Me.tableEmpleado.Cod_DepartamentoColumn})
        Me.tableEmpleado.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("NacionalidadEmpleado", New DataColumn() {Me.tableNacionalidad.codigoColumn}, New DataColumn() {Me.tableEmpleado.Cod_NacionalidadColumn})
        Me.tableEmpleado.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        Me.relationEstado_EmpleadoEmpleado = New DataRelation("Estado_EmpleadoEmpleado", New DataColumn() {Me.tableEstado_Empleado.CodigoColumn}, New DataColumn() {Me.tableEmpleado.Cod_EstadoColumn}, false)
        Me.Relations.Add(Me.relationEstado_EmpleadoEmpleado)
        Me.relationMonedaEmpleado = New DataRelation("MonedaEmpleado", New DataColumn() {Me.tableMoneda.CodMonedaColumn}, New DataColumn() {Me.tableEmpleado.Cod_MonedaColumn}, false)
        Me.Relations.Add(Me.relationMonedaEmpleado)
        Me.relationDepartamentoEmpleado = New DataRelation("DepartamentoEmpleado", New DataColumn() {Me.tableDepartamento.IdColumn}, New DataColumn() {Me.tableEmpleado.Cod_DepartamentoColumn}, false)
        Me.Relations.Add(Me.relationDepartamentoEmpleado)
        Me.relationNacionalidadEmpleado = New DataRelation("NacionalidadEmpleado", New DataColumn() {Me.tableNacionalidad.codigoColumn}, New DataColumn() {Me.tableEmpleado.Cod_NacionalidadColumn}, false)
        Me.Relations.Add(Me.relationNacionalidadEmpleado)
        Me.relationEmpleadoDistribucionContable = New DataRelation("EmpleadoDistribucionContable", New DataColumn() {Me.tableEmpleado.IdentificacionColumn}, New DataColumn() {Me.tableDistribucionContable.EmpleadoIdentificacionColumn}, false)
        Me.Relations.Add(Me.relationEmpleadoDistribucionContable)
        Me.relationEmpleadoEmpleado_Licencias = New DataRelation("EmpleadoEmpleado_Licencias", New DataColumn() {Me.tableEmpleado.IdentificacionColumn}, New DataColumn() {Me.tableEmpleado_Licencias.IdentificacionColumn}, false)
        Me.Relations.Add(Me.relationEmpleadoEmpleado_Licencias)
        Me.relationEmpleadoEmpleado_Academico = New DataRelation("EmpleadoEmpleado_Academico", New DataColumn() {Me.tableEmpleado.IdentificacionColumn}, New DataColumn() {Me.tableEmpleado_Academico.IdentificacionColumn}, false)
        Me.Relations.Add(Me.relationEmpleadoEmpleado_Academico)
        Me.relationEmpleadoEmpleado_Deducciones = New DataRelation("EmpleadoEmpleado_Deducciones", New DataColumn() {Me.tableEmpleado.IdentificacionColumn}, New DataColumn() {Me.tableEmpleado_Deducciones.IdentificacionColumn}, false)
        Me.Relations.Add(Me.relationEmpleadoEmpleado_Deducciones)
    End Sub
    
    Private Function ShouldSerializeNacionalidad() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeDepartamento() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeMoneda() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeEstado_Empleado() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeMoneda2() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeEmpleado_Deducciones() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeEmpleado_Academico() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeEmpleado_Licencias() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeDistribucionContable() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeEmpleadoDistribucionContable() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeEmpleado() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub NacionalidadRowChangeEventHandler(ByVal sender As Object, ByVal e As NacionalidadRowChangeEvent)
    
    Public Delegate Sub DepartamentoRowChangeEventHandler(ByVal sender As Object, ByVal e As DepartamentoRowChangeEvent)
    
    Public Delegate Sub MonedaRowChangeEventHandler(ByVal sender As Object, ByVal e As MonedaRowChangeEvent)
    
    Public Delegate Sub Estado_EmpleadoRowChangeEventHandler(ByVal sender As Object, ByVal e As Estado_EmpleadoRowChangeEvent)
    
    Public Delegate Sub Moneda2RowChangeEventHandler(ByVal sender As Object, ByVal e As Moneda2RowChangeEvent)
    
    Public Delegate Sub Empleado_DeduccionesRowChangeEventHandler(ByVal sender As Object, ByVal e As Empleado_DeduccionesRowChangeEvent)
    
    Public Delegate Sub Empleado_AcademicoRowChangeEventHandler(ByVal sender As Object, ByVal e As Empleado_AcademicoRowChangeEvent)
    
    Public Delegate Sub Empleado_LicenciasRowChangeEventHandler(ByVal sender As Object, ByVal e As Empleado_LicenciasRowChangeEvent)
    
    Public Delegate Sub DistribucionContableRowChangeEventHandler(ByVal sender As Object, ByVal e As DistribucionContableRowChangeEvent)
    
    Public Delegate Sub EmpleadoDistribucionContableRowChangeEventHandler(ByVal sender As Object, ByVal e As EmpleadoDistribucionContableRowChangeEvent)
    
    Public Delegate Sub EmpleadoRowChangeEventHandler(ByVal sender As Object, ByVal e As EmpleadoRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class NacionalidadDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncodigo As DataColumn
        
        Private columndescripcion As DataColumn
        
        Private columnABREV As DataColumn
        
        Friend Sub New()
            MyBase.New("Nacionalidad")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property codigoColumn As DataColumn
            Get
                Return Me.columncodigo
            End Get
        End Property
        
        Friend ReadOnly Property descripcionColumn As DataColumn
            Get
                Return Me.columndescripcion
            End Get
        End Property
        
        Friend ReadOnly Property ABREVColumn As DataColumn
            Get
                Return Me.columnABREV
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As NacionalidadRow
            Get
                Return CType(Me.Rows(index),NacionalidadRow)
            End Get
        End Property
        
        Public Event NacionalidadRowChanged As NacionalidadRowChangeEventHandler
        
        Public Event NacionalidadRowChanging As NacionalidadRowChangeEventHandler
        
        Public Event NacionalidadRowDeleted As NacionalidadRowChangeEventHandler
        
        Public Event NacionalidadRowDeleting As NacionalidadRowChangeEventHandler
        
        Public Overloads Sub AddNacionalidadRow(ByVal row As NacionalidadRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddNacionalidadRow(ByVal codigo As Integer, ByVal descripcion As String, ByVal ABREV As String) As NacionalidadRow
            Dim rowNacionalidadRow As NacionalidadRow = CType(Me.NewRow,NacionalidadRow)
            rowNacionalidadRow.ItemArray = New Object() {codigo, descripcion, ABREV}
            Me.Rows.Add(rowNacionalidadRow)
            Return rowNacionalidadRow
        End Function
        
        Public Function FindBycodigo(ByVal codigo As Integer) As NacionalidadRow
            Return CType(Me.Rows.Find(New Object() {codigo}),NacionalidadRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As NacionalidadDataTable = CType(MyBase.Clone,NacionalidadDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New NacionalidadDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncodigo = Me.Columns("codigo")
            Me.columndescripcion = Me.Columns("descripcion")
            Me.columnABREV = Me.Columns("ABREV")
        End Sub
        
        Private Sub InitClass()
            Me.columncodigo = New DataColumn("codigo", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncodigo)
            Me.columndescripcion = New DataColumn("descripcion", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndescripcion)
            Me.columnABREV = New DataColumn("ABREV", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnABREV)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columncodigo}, true))
            Me.columncodigo.AllowDBNull = false
            Me.columncodigo.Unique = true
            Me.columndescripcion.AllowDBNull = false
            Me.columnABREV.AllowDBNull = false
        End Sub
        
        Public Function NewNacionalidadRow() As NacionalidadRow
            Return CType(Me.NewRow,NacionalidadRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New NacionalidadRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(NacionalidadRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.NacionalidadRowChangedEvent) Is Nothing) Then
                RaiseEvent NacionalidadRowChanged(Me, New NacionalidadRowChangeEvent(CType(e.Row,NacionalidadRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.NacionalidadRowChangingEvent) Is Nothing) Then
                RaiseEvent NacionalidadRowChanging(Me, New NacionalidadRowChangeEvent(CType(e.Row,NacionalidadRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.NacionalidadRowDeletedEvent) Is Nothing) Then
                RaiseEvent NacionalidadRowDeleted(Me, New NacionalidadRowChangeEvent(CType(e.Row,NacionalidadRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.NacionalidadRowDeletingEvent) Is Nothing) Then
                RaiseEvent NacionalidadRowDeleting(Me, New NacionalidadRowChangeEvent(CType(e.Row,NacionalidadRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveNacionalidadRow(ByVal row As NacionalidadRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class NacionalidadRow
        Inherits DataRow
        
        Private tableNacionalidad As NacionalidadDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableNacionalidad = CType(Me.Table,NacionalidadDataTable)
        End Sub
        
        Public Property codigo As Integer
            Get
                Return CType(Me(Me.tableNacionalidad.codigoColumn),Integer)
            End Get
            Set
                Me(Me.tableNacionalidad.codigoColumn) = value
            End Set
        End Property
        
        Public Property descripcion As String
            Get
                Return CType(Me(Me.tableNacionalidad.descripcionColumn),String)
            End Get
            Set
                Me(Me.tableNacionalidad.descripcionColumn) = value
            End Set
        End Property
        
        Public Property ABREV As String
            Get
                Return CType(Me(Me.tableNacionalidad.ABREVColumn),String)
            End Get
            Set
                Me(Me.tableNacionalidad.ABREVColumn) = value
            End Set
        End Property
        
        Public Function GetEmpleadoRows() As EmpleadoRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("NacionalidadEmpleado")),EmpleadoRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class NacionalidadRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As NacionalidadRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As NacionalidadRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As NacionalidadRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DepartamentoDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnDepartamento As DataColumn
        
        Private columnId As DataColumn
        
        Friend Sub New()
            MyBase.New("Departamento")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property DepartamentoColumn As DataColumn
            Get
                Return Me.columnDepartamento
            End Get
        End Property
        
        Friend ReadOnly Property IdColumn As DataColumn
            Get
                Return Me.columnId
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As DepartamentoRow
            Get
                Return CType(Me.Rows(index),DepartamentoRow)
            End Get
        End Property
        
        Public Event DepartamentoRowChanged As DepartamentoRowChangeEventHandler
        
        Public Event DepartamentoRowChanging As DepartamentoRowChangeEventHandler
        
        Public Event DepartamentoRowDeleted As DepartamentoRowChangeEventHandler
        
        Public Event DepartamentoRowDeleting As DepartamentoRowChangeEventHandler
        
        Public Overloads Sub AddDepartamentoRow(ByVal row As DepartamentoRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddDepartamentoRow(ByVal Departamento As String) As DepartamentoRow
            Dim rowDepartamentoRow As DepartamentoRow = CType(Me.NewRow,DepartamentoRow)
            rowDepartamentoRow.ItemArray = New Object() {Departamento, Nothing}
            Me.Rows.Add(rowDepartamentoRow)
            Return rowDepartamentoRow
        End Function
        
        Public Function FindById(ByVal Id As Integer) As DepartamentoRow
            Return CType(Me.Rows.Find(New Object() {Id}),DepartamentoRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As DepartamentoDataTable = CType(MyBase.Clone,DepartamentoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New DepartamentoDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnDepartamento = Me.Columns("Departamento")
            Me.columnId = Me.Columns("Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnDepartamento = New DataColumn("Departamento", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDepartamento)
            Me.columnId = New DataColumn("Id", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnId}, true))
            Me.columnDepartamento.AllowDBNull = false
            Me.columnId.AutoIncrement = true
            Me.columnId.AllowDBNull = false
            Me.columnId.ReadOnly = true
            Me.columnId.Unique = true
        End Sub
        
        Public Function NewDepartamentoRow() As DepartamentoRow
            Return CType(Me.NewRow,DepartamentoRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New DepartamentoRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(DepartamentoRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DepartamentoRowChangedEvent) Is Nothing) Then
                RaiseEvent DepartamentoRowChanged(Me, New DepartamentoRowChangeEvent(CType(e.Row,DepartamentoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DepartamentoRowChangingEvent) Is Nothing) Then
                RaiseEvent DepartamentoRowChanging(Me, New DepartamentoRowChangeEvent(CType(e.Row,DepartamentoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DepartamentoRowDeletedEvent) Is Nothing) Then
                RaiseEvent DepartamentoRowDeleted(Me, New DepartamentoRowChangeEvent(CType(e.Row,DepartamentoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DepartamentoRowDeletingEvent) Is Nothing) Then
                RaiseEvent DepartamentoRowDeleting(Me, New DepartamentoRowChangeEvent(CType(e.Row,DepartamentoRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveDepartamentoRow(ByVal row As DepartamentoRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DepartamentoRow
        Inherits DataRow
        
        Private tableDepartamento As DepartamentoDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableDepartamento = CType(Me.Table,DepartamentoDataTable)
        End Sub
        
        Public Property Departamento As String
            Get
                Return CType(Me(Me.tableDepartamento.DepartamentoColumn),String)
            End Get
            Set
                Me(Me.tableDepartamento.DepartamentoColumn) = value
            End Set
        End Property
        
        Public Property Id As Integer
            Get
                Return CType(Me(Me.tableDepartamento.IdColumn),Integer)
            End Get
            Set
                Me(Me.tableDepartamento.IdColumn) = value
            End Set
        End Property
        
        Public Function GetEmpleadoRows() As EmpleadoRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("DepartamentoEmpleado")),EmpleadoRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DepartamentoRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As DepartamentoRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As DepartamentoRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As DepartamentoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MonedaDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCodMoneda As DataColumn
        
        Private columnMonedaNombre As DataColumn
        
        Private columnValorCompra As DataColumn
        
        Private columnValorVenta As DataColumn
        
        Private columnSimbolo As DataColumn
        
        Friend Sub New()
            MyBase.New("Moneda")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property CodMonedaColumn As DataColumn
            Get
                Return Me.columnCodMoneda
            End Get
        End Property
        
        Friend ReadOnly Property MonedaNombreColumn As DataColumn
            Get
                Return Me.columnMonedaNombre
            End Get
        End Property
        
        Friend ReadOnly Property ValorCompraColumn As DataColumn
            Get
                Return Me.columnValorCompra
            End Get
        End Property
        
        Friend ReadOnly Property ValorVentaColumn As DataColumn
            Get
                Return Me.columnValorVenta
            End Get
        End Property
        
        Friend ReadOnly Property SimboloColumn As DataColumn
            Get
                Return Me.columnSimbolo
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As MonedaRow
            Get
                Return CType(Me.Rows(index),MonedaRow)
            End Get
        End Property
        
        Public Event MonedaRowChanged As MonedaRowChangeEventHandler
        
        Public Event MonedaRowChanging As MonedaRowChangeEventHandler
        
        Public Event MonedaRowDeleted As MonedaRowChangeEventHandler
        
        Public Event MonedaRowDeleting As MonedaRowChangeEventHandler
        
        Public Overloads Sub AddMonedaRow(ByVal row As MonedaRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddMonedaRow(ByVal CodMoneda As Integer, ByVal MonedaNombre As String, ByVal ValorCompra As Double, ByVal ValorVenta As Double, ByVal Simbolo As String) As MonedaRow
            Dim rowMonedaRow As MonedaRow = CType(Me.NewRow,MonedaRow)
            rowMonedaRow.ItemArray = New Object() {CodMoneda, MonedaNombre, ValorCompra, ValorVenta, Simbolo}
            Me.Rows.Add(rowMonedaRow)
            Return rowMonedaRow
        End Function
        
        Public Function FindByCodMoneda(ByVal CodMoneda As Integer) As MonedaRow
            Return CType(Me.Rows.Find(New Object() {CodMoneda}),MonedaRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As MonedaDataTable = CType(MyBase.Clone,MonedaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New MonedaDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCodMoneda = Me.Columns("CodMoneda")
            Me.columnMonedaNombre = Me.Columns("MonedaNombre")
            Me.columnValorCompra = Me.Columns("ValorCompra")
            Me.columnValorVenta = Me.Columns("ValorVenta")
            Me.columnSimbolo = Me.Columns("Simbolo")
        End Sub
        
        Private Sub InitClass()
            Me.columnCodMoneda = New DataColumn("CodMoneda", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCodMoneda)
            Me.columnMonedaNombre = New DataColumn("MonedaNombre", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMonedaNombre)
            Me.columnValorCompra = New DataColumn("ValorCompra", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnValorCompra)
            Me.columnValorVenta = New DataColumn("ValorVenta", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnValorVenta)
            Me.columnSimbolo = New DataColumn("Simbolo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSimbolo)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnCodMoneda}, true))
            Me.columnCodMoneda.AllowDBNull = false
            Me.columnCodMoneda.Unique = true
            Me.columnMonedaNombre.AllowDBNull = false
            Me.columnValorCompra.AllowDBNull = false
            Me.columnValorVenta.AllowDBNull = false
            Me.columnSimbolo.AllowDBNull = false
        End Sub
        
        Public Function NewMonedaRow() As MonedaRow
            Return CType(Me.NewRow,MonedaRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New MonedaRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(MonedaRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MonedaRowChangedEvent) Is Nothing) Then
                RaiseEvent MonedaRowChanged(Me, New MonedaRowChangeEvent(CType(e.Row,MonedaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MonedaRowChangingEvent) Is Nothing) Then
                RaiseEvent MonedaRowChanging(Me, New MonedaRowChangeEvent(CType(e.Row,MonedaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MonedaRowDeletedEvent) Is Nothing) Then
                RaiseEvent MonedaRowDeleted(Me, New MonedaRowChangeEvent(CType(e.Row,MonedaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MonedaRowDeletingEvent) Is Nothing) Then
                RaiseEvent MonedaRowDeleting(Me, New MonedaRowChangeEvent(CType(e.Row,MonedaRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveMonedaRow(ByVal row As MonedaRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MonedaRow
        Inherits DataRow
        
        Private tableMoneda As MonedaDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableMoneda = CType(Me.Table,MonedaDataTable)
        End Sub
        
        Public Property CodMoneda As Integer
            Get
                Return CType(Me(Me.tableMoneda.CodMonedaColumn),Integer)
            End Get
            Set
                Me(Me.tableMoneda.CodMonedaColumn) = value
            End Set
        End Property
        
        Public Property MonedaNombre As String
            Get
                Return CType(Me(Me.tableMoneda.MonedaNombreColumn),String)
            End Get
            Set
                Me(Me.tableMoneda.MonedaNombreColumn) = value
            End Set
        End Property
        
        Public Property ValorCompra As Double
            Get
                Return CType(Me(Me.tableMoneda.ValorCompraColumn),Double)
            End Get
            Set
                Me(Me.tableMoneda.ValorCompraColumn) = value
            End Set
        End Property
        
        Public Property ValorVenta As Double
            Get
                Return CType(Me(Me.tableMoneda.ValorVentaColumn),Double)
            End Get
            Set
                Me(Me.tableMoneda.ValorVentaColumn) = value
            End Set
        End Property
        
        Public Property Simbolo As String
            Get
                Return CType(Me(Me.tableMoneda.SimboloColumn),String)
            End Get
            Set
                Me(Me.tableMoneda.SimboloColumn) = value
            End Set
        End Property
        
        Public Function GetEmpleadoRows() As EmpleadoRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("MonedaEmpleado")),EmpleadoRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MonedaRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As MonedaRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As MonedaRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As MonedaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Estado_EmpleadoDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCodigo As DataColumn
        
        Private columnDescripcion As DataColumn
        
        Friend Sub New()
            MyBase.New("Estado_Empleado")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property CodigoColumn As DataColumn
            Get
                Return Me.columnCodigo
            End Get
        End Property
        
        Friend ReadOnly Property DescripcionColumn As DataColumn
            Get
                Return Me.columnDescripcion
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Estado_EmpleadoRow
            Get
                Return CType(Me.Rows(index),Estado_EmpleadoRow)
            End Get
        End Property
        
        Public Event Estado_EmpleadoRowChanged As Estado_EmpleadoRowChangeEventHandler
        
        Public Event Estado_EmpleadoRowChanging As Estado_EmpleadoRowChangeEventHandler
        
        Public Event Estado_EmpleadoRowDeleted As Estado_EmpleadoRowChangeEventHandler
        
        Public Event Estado_EmpleadoRowDeleting As Estado_EmpleadoRowChangeEventHandler
        
        Public Overloads Sub AddEstado_EmpleadoRow(ByVal row As Estado_EmpleadoRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddEstado_EmpleadoRow(ByVal Codigo As Integer, ByVal Descripcion As String) As Estado_EmpleadoRow
            Dim rowEstado_EmpleadoRow As Estado_EmpleadoRow = CType(Me.NewRow,Estado_EmpleadoRow)
            rowEstado_EmpleadoRow.ItemArray = New Object() {Codigo, Descripcion}
            Me.Rows.Add(rowEstado_EmpleadoRow)
            Return rowEstado_EmpleadoRow
        End Function
        
        Public Function FindByCodigo(ByVal Codigo As Integer) As Estado_EmpleadoRow
            Return CType(Me.Rows.Find(New Object() {Codigo}),Estado_EmpleadoRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Estado_EmpleadoDataTable = CType(MyBase.Clone,Estado_EmpleadoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Estado_EmpleadoDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCodigo = Me.Columns("Codigo")
            Me.columnDescripcion = Me.Columns("Descripcion")
        End Sub
        
        Private Sub InitClass()
            Me.columnCodigo = New DataColumn("Codigo", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCodigo)
            Me.columnDescripcion = New DataColumn("Descripcion", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescripcion)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnCodigo}, true))
            Me.columnCodigo.AllowDBNull = false
            Me.columnCodigo.Unique = true
            Me.columnDescripcion.AllowDBNull = false
        End Sub
        
        Public Function NewEstado_EmpleadoRow() As Estado_EmpleadoRow
            Return CType(Me.NewRow,Estado_EmpleadoRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Estado_EmpleadoRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Estado_EmpleadoRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Estado_EmpleadoRowChangedEvent) Is Nothing) Then
                RaiseEvent Estado_EmpleadoRowChanged(Me, New Estado_EmpleadoRowChangeEvent(CType(e.Row,Estado_EmpleadoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Estado_EmpleadoRowChangingEvent) Is Nothing) Then
                RaiseEvent Estado_EmpleadoRowChanging(Me, New Estado_EmpleadoRowChangeEvent(CType(e.Row,Estado_EmpleadoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Estado_EmpleadoRowDeletedEvent) Is Nothing) Then
                RaiseEvent Estado_EmpleadoRowDeleted(Me, New Estado_EmpleadoRowChangeEvent(CType(e.Row,Estado_EmpleadoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Estado_EmpleadoRowDeletingEvent) Is Nothing) Then
                RaiseEvent Estado_EmpleadoRowDeleting(Me, New Estado_EmpleadoRowChangeEvent(CType(e.Row,Estado_EmpleadoRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveEstado_EmpleadoRow(ByVal row As Estado_EmpleadoRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Estado_EmpleadoRow
        Inherits DataRow
        
        Private tableEstado_Empleado As Estado_EmpleadoDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableEstado_Empleado = CType(Me.Table,Estado_EmpleadoDataTable)
        End Sub
        
        Public Property Codigo As Integer
            Get
                Return CType(Me(Me.tableEstado_Empleado.CodigoColumn),Integer)
            End Get
            Set
                Me(Me.tableEstado_Empleado.CodigoColumn) = value
            End Set
        End Property
        
        Public Property Descripcion As String
            Get
                Return CType(Me(Me.tableEstado_Empleado.DescripcionColumn),String)
            End Get
            Set
                Me(Me.tableEstado_Empleado.DescripcionColumn) = value
            End Set
        End Property
        
        Public Function GetEmpleadoRows() As EmpleadoRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("Estado_EmpleadoEmpleado")),EmpleadoRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Estado_EmpleadoRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Estado_EmpleadoRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Estado_EmpleadoRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Estado_EmpleadoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Moneda2DataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCodMoneda As DataColumn
        
        Private columnMonedaNombre As DataColumn
        
        Private columnValorCompra As DataColumn
        
        Private columnValorVenta As DataColumn
        
        Private columnSimbolo As DataColumn
        
        Friend Sub New()
            MyBase.New("Moneda2")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property CodMonedaColumn As DataColumn
            Get
                Return Me.columnCodMoneda
            End Get
        End Property
        
        Friend ReadOnly Property MonedaNombreColumn As DataColumn
            Get
                Return Me.columnMonedaNombre
            End Get
        End Property
        
        Friend ReadOnly Property ValorCompraColumn As DataColumn
            Get
                Return Me.columnValorCompra
            End Get
        End Property
        
        Friend ReadOnly Property ValorVentaColumn As DataColumn
            Get
                Return Me.columnValorVenta
            End Get
        End Property
        
        Friend ReadOnly Property SimboloColumn As DataColumn
            Get
                Return Me.columnSimbolo
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Moneda2Row
            Get
                Return CType(Me.Rows(index),Moneda2Row)
            End Get
        End Property
        
        Public Event Moneda2RowChanged As Moneda2RowChangeEventHandler
        
        Public Event Moneda2RowChanging As Moneda2RowChangeEventHandler
        
        Public Event Moneda2RowDeleted As Moneda2RowChangeEventHandler
        
        Public Event Moneda2RowDeleting As Moneda2RowChangeEventHandler
        
        Public Overloads Sub AddMoneda2Row(ByVal row As Moneda2Row)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddMoneda2Row(ByVal CodMoneda As Integer, ByVal MonedaNombre As String, ByVal ValorCompra As Double, ByVal ValorVenta As Double, ByVal Simbolo As String) As Moneda2Row
            Dim rowMoneda2Row As Moneda2Row = CType(Me.NewRow,Moneda2Row)
            rowMoneda2Row.ItemArray = New Object() {CodMoneda, MonedaNombre, ValorCompra, ValorVenta, Simbolo}
            Me.Rows.Add(rowMoneda2Row)
            Return rowMoneda2Row
        End Function
        
        Public Function FindByCodMoneda(ByVal CodMoneda As Integer) As Moneda2Row
            Return CType(Me.Rows.Find(New Object() {CodMoneda}),Moneda2Row)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Moneda2DataTable = CType(MyBase.Clone,Moneda2DataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Moneda2DataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCodMoneda = Me.Columns("CodMoneda")
            Me.columnMonedaNombre = Me.Columns("MonedaNombre")
            Me.columnValorCompra = Me.Columns("ValorCompra")
            Me.columnValorVenta = Me.Columns("ValorVenta")
            Me.columnSimbolo = Me.Columns("Simbolo")
        End Sub
        
        Private Sub InitClass()
            Me.columnCodMoneda = New DataColumn("CodMoneda", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCodMoneda)
            Me.columnMonedaNombre = New DataColumn("MonedaNombre", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMonedaNombre)
            Me.columnValorCompra = New DataColumn("ValorCompra", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnValorCompra)
            Me.columnValorVenta = New DataColumn("ValorVenta", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnValorVenta)
            Me.columnSimbolo = New DataColumn("Simbolo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSimbolo)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnCodMoneda}, true))
            Me.columnCodMoneda.AllowDBNull = false
            Me.columnCodMoneda.Unique = true
            Me.columnMonedaNombre.AllowDBNull = false
            Me.columnValorCompra.AllowDBNull = false
            Me.columnValorVenta.AllowDBNull = false
            Me.columnSimbolo.AllowDBNull = false
        End Sub
        
        Public Function NewMoneda2Row() As Moneda2Row
            Return CType(Me.NewRow,Moneda2Row)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Moneda2Row(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Moneda2Row)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Moneda2RowChangedEvent) Is Nothing) Then
                RaiseEvent Moneda2RowChanged(Me, New Moneda2RowChangeEvent(CType(e.Row,Moneda2Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Moneda2RowChangingEvent) Is Nothing) Then
                RaiseEvent Moneda2RowChanging(Me, New Moneda2RowChangeEvent(CType(e.Row,Moneda2Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Moneda2RowDeletedEvent) Is Nothing) Then
                RaiseEvent Moneda2RowDeleted(Me, New Moneda2RowChangeEvent(CType(e.Row,Moneda2Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Moneda2RowDeletingEvent) Is Nothing) Then
                RaiseEvent Moneda2RowDeleting(Me, New Moneda2RowChangeEvent(CType(e.Row,Moneda2Row), e.Action))
            End If
        End Sub
        
        Public Sub RemoveMoneda2Row(ByVal row As Moneda2Row)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Moneda2Row
        Inherits DataRow
        
        Private tableMoneda2 As Moneda2DataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableMoneda2 = CType(Me.Table,Moneda2DataTable)
        End Sub
        
        Public Property CodMoneda As Integer
            Get
                Return CType(Me(Me.tableMoneda2.CodMonedaColumn),Integer)
            End Get
            Set
                Me(Me.tableMoneda2.CodMonedaColumn) = value
            End Set
        End Property
        
        Public Property MonedaNombre As String
            Get
                Return CType(Me(Me.tableMoneda2.MonedaNombreColumn),String)
            End Get
            Set
                Me(Me.tableMoneda2.MonedaNombreColumn) = value
            End Set
        End Property
        
        Public Property ValorCompra As Double
            Get
                Return CType(Me(Me.tableMoneda2.ValorCompraColumn),Double)
            End Get
            Set
                Me(Me.tableMoneda2.ValorCompraColumn) = value
            End Set
        End Property
        
        Public Property ValorVenta As Double
            Get
                Return CType(Me(Me.tableMoneda2.ValorVentaColumn),Double)
            End Get
            Set
                Me(Me.tableMoneda2.ValorVentaColumn) = value
            End Set
        End Property
        
        Public Property Simbolo As String
            Get
                Return CType(Me(Me.tableMoneda2.SimboloColumn),String)
            End Get
            Set
                Me(Me.tableMoneda2.SimboloColumn) = value
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Moneda2RowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Moneda2Row
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Moneda2Row, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Moneda2Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Empleado_DeduccionesDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnId As DataColumn
        
        Private columnIdentificacion As DataColumn
        
        Private columnCodigo As DataColumn
        
        Private columnDescripcion As DataColumn
        
        Private columnMonto As DataColumn
        
        Private columnTipo As DataColumn
        
        Private columnCod_Moneda As DataColumn
        
        Friend Sub New()
            MyBase.New("Empleado_Deducciones")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IdColumn As DataColumn
            Get
                Return Me.columnId
            End Get
        End Property
        
        Friend ReadOnly Property IdentificacionColumn As DataColumn
            Get
                Return Me.columnIdentificacion
            End Get
        End Property
        
        Friend ReadOnly Property CodigoColumn As DataColumn
            Get
                Return Me.columnCodigo
            End Get
        End Property
        
        Friend ReadOnly Property DescripcionColumn As DataColumn
            Get
                Return Me.columnDescripcion
            End Get
        End Property
        
        Friend ReadOnly Property MontoColumn As DataColumn
            Get
                Return Me.columnMonto
            End Get
        End Property
        
        Friend ReadOnly Property TipoColumn As DataColumn
            Get
                Return Me.columnTipo
            End Get
        End Property
        
        Friend ReadOnly Property Cod_MonedaColumn As DataColumn
            Get
                Return Me.columnCod_Moneda
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Empleado_DeduccionesRow
            Get
                Return CType(Me.Rows(index),Empleado_DeduccionesRow)
            End Get
        End Property
        
        Public Event Empleado_DeduccionesRowChanged As Empleado_DeduccionesRowChangeEventHandler
        
        Public Event Empleado_DeduccionesRowChanging As Empleado_DeduccionesRowChangeEventHandler
        
        Public Event Empleado_DeduccionesRowDeleted As Empleado_DeduccionesRowChangeEventHandler
        
        Public Event Empleado_DeduccionesRowDeleting As Empleado_DeduccionesRowChangeEventHandler
        
        Public Overloads Sub AddEmpleado_DeduccionesRow(ByVal row As Empleado_DeduccionesRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddEmpleado_DeduccionesRow(ByVal parentEmpleadoRowByEmpleadoEmpleado_Deducciones As EmpleadoRow, ByVal Codigo As Integer, ByVal Descripcion As String, ByVal Monto As Double, ByVal Tipo As String, ByVal Cod_Moneda As Integer) As Empleado_DeduccionesRow
            Dim rowEmpleado_DeduccionesRow As Empleado_DeduccionesRow = CType(Me.NewRow,Empleado_DeduccionesRow)
            rowEmpleado_DeduccionesRow.ItemArray = New Object() {Nothing, parentEmpleadoRowByEmpleadoEmpleado_Deducciones(0), Codigo, Descripcion, Monto, Tipo, Cod_Moneda}
            Me.Rows.Add(rowEmpleado_DeduccionesRow)
            Return rowEmpleado_DeduccionesRow
        End Function
        
        Public Function FindById(ByVal Id As Long) As Empleado_DeduccionesRow
            Return CType(Me.Rows.Find(New Object() {Id}),Empleado_DeduccionesRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Empleado_DeduccionesDataTable = CType(MyBase.Clone,Empleado_DeduccionesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Empleado_DeduccionesDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnId = Me.Columns("Id")
            Me.columnIdentificacion = Me.Columns("Identificacion")
            Me.columnCodigo = Me.Columns("Codigo")
            Me.columnDescripcion = Me.Columns("Descripcion")
            Me.columnMonto = Me.Columns("Monto")
            Me.columnTipo = Me.Columns("Tipo")
            Me.columnCod_Moneda = Me.Columns("Cod_Moneda")
        End Sub
        
        Private Sub InitClass()
            Me.columnId = New DataColumn("Id", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId)
            Me.columnIdentificacion = New DataColumn("Identificacion", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdentificacion)
            Me.columnCodigo = New DataColumn("Codigo", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCodigo)
            Me.columnDescripcion = New DataColumn("Descripcion", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescripcion)
            Me.columnMonto = New DataColumn("Monto", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMonto)
            Me.columnTipo = New DataColumn("Tipo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTipo)
            Me.columnCod_Moneda = New DataColumn("Cod_Moneda", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCod_Moneda)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnId}, true))
            Me.columnId.AutoIncrement = true
            Me.columnId.AllowDBNull = false
            Me.columnId.ReadOnly = true
            Me.columnId.Unique = true
            Me.columnIdentificacion.AllowDBNull = false
            Me.columnCodigo.AllowDBNull = false
            Me.columnDescripcion.AllowDBNull = false
            Me.columnMonto.AllowDBNull = false
            Me.columnTipo.AllowDBNull = false
            Me.columnCod_Moneda.AllowDBNull = false
        End Sub
        
        Public Function NewEmpleado_DeduccionesRow() As Empleado_DeduccionesRow
            Return CType(Me.NewRow,Empleado_DeduccionesRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Empleado_DeduccionesRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Empleado_DeduccionesRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Empleado_DeduccionesRowChangedEvent) Is Nothing) Then
                RaiseEvent Empleado_DeduccionesRowChanged(Me, New Empleado_DeduccionesRowChangeEvent(CType(e.Row,Empleado_DeduccionesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Empleado_DeduccionesRowChangingEvent) Is Nothing) Then
                RaiseEvent Empleado_DeduccionesRowChanging(Me, New Empleado_DeduccionesRowChangeEvent(CType(e.Row,Empleado_DeduccionesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Empleado_DeduccionesRowDeletedEvent) Is Nothing) Then
                RaiseEvent Empleado_DeduccionesRowDeleted(Me, New Empleado_DeduccionesRowChangeEvent(CType(e.Row,Empleado_DeduccionesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Empleado_DeduccionesRowDeletingEvent) Is Nothing) Then
                RaiseEvent Empleado_DeduccionesRowDeleting(Me, New Empleado_DeduccionesRowChangeEvent(CType(e.Row,Empleado_DeduccionesRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveEmpleado_DeduccionesRow(ByVal row As Empleado_DeduccionesRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Empleado_DeduccionesRow
        Inherits DataRow
        
        Private tableEmpleado_Deducciones As Empleado_DeduccionesDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableEmpleado_Deducciones = CType(Me.Table,Empleado_DeduccionesDataTable)
        End Sub
        
        Public Property Id As Long
            Get
                Return CType(Me(Me.tableEmpleado_Deducciones.IdColumn),Long)
            End Get
            Set
                Me(Me.tableEmpleado_Deducciones.IdColumn) = value
            End Set
        End Property
        
        Public Property Identificacion As String
            Get
                Return CType(Me(Me.tableEmpleado_Deducciones.IdentificacionColumn),String)
            End Get
            Set
                Me(Me.tableEmpleado_Deducciones.IdentificacionColumn) = value
            End Set
        End Property
        
        Public Property Codigo As Integer
            Get
                Return CType(Me(Me.tableEmpleado_Deducciones.CodigoColumn),Integer)
            End Get
            Set
                Me(Me.tableEmpleado_Deducciones.CodigoColumn) = value
            End Set
        End Property
        
        Public Property Descripcion As String
            Get
                Return CType(Me(Me.tableEmpleado_Deducciones.DescripcionColumn),String)
            End Get
            Set
                Me(Me.tableEmpleado_Deducciones.DescripcionColumn) = value
            End Set
        End Property
        
        Public Property Monto As Double
            Get
                Return CType(Me(Me.tableEmpleado_Deducciones.MontoColumn),Double)
            End Get
            Set
                Me(Me.tableEmpleado_Deducciones.MontoColumn) = value
            End Set
        End Property
        
        Public Property Tipo As String
            Get
                Return CType(Me(Me.tableEmpleado_Deducciones.TipoColumn),String)
            End Get
            Set
                Me(Me.tableEmpleado_Deducciones.TipoColumn) = value
            End Set
        End Property
        
        Public Property Cod_Moneda As Integer
            Get
                Return CType(Me(Me.tableEmpleado_Deducciones.Cod_MonedaColumn),Integer)
            End Get
            Set
                Me(Me.tableEmpleado_Deducciones.Cod_MonedaColumn) = value
            End Set
        End Property
        
        Public Property EmpleadoRow As EmpleadoRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("EmpleadoEmpleado_Deducciones")),EmpleadoRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("EmpleadoEmpleado_Deducciones"))
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Empleado_DeduccionesRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Empleado_DeduccionesRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Empleado_DeduccionesRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Empleado_DeduccionesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Empleado_AcademicoDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnId As DataColumn
        
        Private columnIdentificacion As DataColumn
        
        Private columnTitulo As DataColumn
        
        Private columnNivel As DataColumn
        
        Private columnInstitucion As DataColumn
        
        Private columnAño As DataColumn
        
        Friend Sub New()
            MyBase.New("Empleado_Academico")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IdColumn As DataColumn
            Get
                Return Me.columnId
            End Get
        End Property
        
        Friend ReadOnly Property IdentificacionColumn As DataColumn
            Get
                Return Me.columnIdentificacion
            End Get
        End Property
        
        Friend ReadOnly Property TituloColumn As DataColumn
            Get
                Return Me.columnTitulo
            End Get
        End Property
        
        Friend ReadOnly Property NivelColumn As DataColumn
            Get
                Return Me.columnNivel
            End Get
        End Property
        
        Friend ReadOnly Property InstitucionColumn As DataColumn
            Get
                Return Me.columnInstitucion
            End Get
        End Property
        
        Friend ReadOnly Property AñoColumn As DataColumn
            Get
                Return Me.columnAño
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Empleado_AcademicoRow
            Get
                Return CType(Me.Rows(index),Empleado_AcademicoRow)
            End Get
        End Property
        
        Public Event Empleado_AcademicoRowChanged As Empleado_AcademicoRowChangeEventHandler
        
        Public Event Empleado_AcademicoRowChanging As Empleado_AcademicoRowChangeEventHandler
        
        Public Event Empleado_AcademicoRowDeleted As Empleado_AcademicoRowChangeEventHandler
        
        Public Event Empleado_AcademicoRowDeleting As Empleado_AcademicoRowChangeEventHandler
        
        Public Overloads Sub AddEmpleado_AcademicoRow(ByVal row As Empleado_AcademicoRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddEmpleado_AcademicoRow(ByVal parentEmpleadoRowByEmpleadoEmpleado_Academico As EmpleadoRow, ByVal Titulo As String, ByVal Nivel As String, ByVal Institucion As String, ByVal Año As Integer) As Empleado_AcademicoRow
            Dim rowEmpleado_AcademicoRow As Empleado_AcademicoRow = CType(Me.NewRow,Empleado_AcademicoRow)
            rowEmpleado_AcademicoRow.ItemArray = New Object() {Nothing, parentEmpleadoRowByEmpleadoEmpleado_Academico(0), Titulo, Nivel, Institucion, Año}
            Me.Rows.Add(rowEmpleado_AcademicoRow)
            Return rowEmpleado_AcademicoRow
        End Function
        
        Public Function FindById(ByVal Id As Long) As Empleado_AcademicoRow
            Return CType(Me.Rows.Find(New Object() {Id}),Empleado_AcademicoRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Empleado_AcademicoDataTable = CType(MyBase.Clone,Empleado_AcademicoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Empleado_AcademicoDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnId = Me.Columns("Id")
            Me.columnIdentificacion = Me.Columns("Identificacion")
            Me.columnTitulo = Me.Columns("Titulo")
            Me.columnNivel = Me.Columns("Nivel")
            Me.columnInstitucion = Me.Columns("Institucion")
            Me.columnAño = Me.Columns("Año")
        End Sub
        
        Private Sub InitClass()
            Me.columnId = New DataColumn("Id", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId)
            Me.columnIdentificacion = New DataColumn("Identificacion", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdentificacion)
            Me.columnTitulo = New DataColumn("Titulo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTitulo)
            Me.columnNivel = New DataColumn("Nivel", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNivel)
            Me.columnInstitucion = New DataColumn("Institucion", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnInstitucion)
            Me.columnAño = New DataColumn("Año", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAño)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnId}, true))
            Me.columnId.AutoIncrement = true
            Me.columnId.AllowDBNull = false
            Me.columnId.ReadOnly = true
            Me.columnId.Unique = true
            Me.columnIdentificacion.AllowDBNull = false
            Me.columnTitulo.AllowDBNull = false
            Me.columnNivel.AllowDBNull = false
            Me.columnInstitucion.AllowDBNull = false
            Me.columnAño.AllowDBNull = false
        End Sub
        
        Public Function NewEmpleado_AcademicoRow() As Empleado_AcademicoRow
            Return CType(Me.NewRow,Empleado_AcademicoRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Empleado_AcademicoRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Empleado_AcademicoRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Empleado_AcademicoRowChangedEvent) Is Nothing) Then
                RaiseEvent Empleado_AcademicoRowChanged(Me, New Empleado_AcademicoRowChangeEvent(CType(e.Row,Empleado_AcademicoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Empleado_AcademicoRowChangingEvent) Is Nothing) Then
                RaiseEvent Empleado_AcademicoRowChanging(Me, New Empleado_AcademicoRowChangeEvent(CType(e.Row,Empleado_AcademicoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Empleado_AcademicoRowDeletedEvent) Is Nothing) Then
                RaiseEvent Empleado_AcademicoRowDeleted(Me, New Empleado_AcademicoRowChangeEvent(CType(e.Row,Empleado_AcademicoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Empleado_AcademicoRowDeletingEvent) Is Nothing) Then
                RaiseEvent Empleado_AcademicoRowDeleting(Me, New Empleado_AcademicoRowChangeEvent(CType(e.Row,Empleado_AcademicoRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveEmpleado_AcademicoRow(ByVal row As Empleado_AcademicoRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Empleado_AcademicoRow
        Inherits DataRow
        
        Private tableEmpleado_Academico As Empleado_AcademicoDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableEmpleado_Academico = CType(Me.Table,Empleado_AcademicoDataTable)
        End Sub
        
        Public Property Id As Long
            Get
                Return CType(Me(Me.tableEmpleado_Academico.IdColumn),Long)
            End Get
            Set
                Me(Me.tableEmpleado_Academico.IdColumn) = value
            End Set
        End Property
        
        Public Property Identificacion As String
            Get
                Return CType(Me(Me.tableEmpleado_Academico.IdentificacionColumn),String)
            End Get
            Set
                Me(Me.tableEmpleado_Academico.IdentificacionColumn) = value
            End Set
        End Property
        
        Public Property Titulo As String
            Get
                Return CType(Me(Me.tableEmpleado_Academico.TituloColumn),String)
            End Get
            Set
                Me(Me.tableEmpleado_Academico.TituloColumn) = value
            End Set
        End Property
        
        Public Property Nivel As String
            Get
                Return CType(Me(Me.tableEmpleado_Academico.NivelColumn),String)
            End Get
            Set
                Me(Me.tableEmpleado_Academico.NivelColumn) = value
            End Set
        End Property
        
        Public Property Institucion As String
            Get
                Return CType(Me(Me.tableEmpleado_Academico.InstitucionColumn),String)
            End Get
            Set
                Me(Me.tableEmpleado_Academico.InstitucionColumn) = value
            End Set
        End Property
        
        Public Property Año As Integer
            Get
                Return CType(Me(Me.tableEmpleado_Academico.AñoColumn),Integer)
            End Get
            Set
                Me(Me.tableEmpleado_Academico.AñoColumn) = value
            End Set
        End Property
        
        Public Property EmpleadoRow As EmpleadoRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("EmpleadoEmpleado_Academico")),EmpleadoRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("EmpleadoEmpleado_Academico"))
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Empleado_AcademicoRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Empleado_AcademicoRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Empleado_AcademicoRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Empleado_AcademicoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Empleado_LicenciasDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnId As DataColumn
        
        Private columnIdentificacion As DataColumn
        
        Private columnNumero As DataColumn
        
        Private columnTipo As DataColumn
        
        Private columnEmision As DataColumn
        
        Private columnVencimiento As DataColumn
        
        Friend Sub New()
            MyBase.New("Empleado_Licencias")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IdColumn As DataColumn
            Get
                Return Me.columnId
            End Get
        End Property
        
        Friend ReadOnly Property IdentificacionColumn As DataColumn
            Get
                Return Me.columnIdentificacion
            End Get
        End Property
        
        Friend ReadOnly Property NumeroColumn As DataColumn
            Get
                Return Me.columnNumero
            End Get
        End Property
        
        Friend ReadOnly Property TipoColumn As DataColumn
            Get
                Return Me.columnTipo
            End Get
        End Property
        
        Friend ReadOnly Property EmisionColumn As DataColumn
            Get
                Return Me.columnEmision
            End Get
        End Property
        
        Friend ReadOnly Property VencimientoColumn As DataColumn
            Get
                Return Me.columnVencimiento
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Empleado_LicenciasRow
            Get
                Return CType(Me.Rows(index),Empleado_LicenciasRow)
            End Get
        End Property
        
        Public Event Empleado_LicenciasRowChanged As Empleado_LicenciasRowChangeEventHandler
        
        Public Event Empleado_LicenciasRowChanging As Empleado_LicenciasRowChangeEventHandler
        
        Public Event Empleado_LicenciasRowDeleted As Empleado_LicenciasRowChangeEventHandler
        
        Public Event Empleado_LicenciasRowDeleting As Empleado_LicenciasRowChangeEventHandler
        
        Public Overloads Sub AddEmpleado_LicenciasRow(ByVal row As Empleado_LicenciasRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddEmpleado_LicenciasRow(ByVal parentEmpleadoRowByEmpleadoEmpleado_Licencias As EmpleadoRow, ByVal Numero As String, ByVal Tipo As String, ByVal Emision As Date, ByVal Vencimiento As Date) As Empleado_LicenciasRow
            Dim rowEmpleado_LicenciasRow As Empleado_LicenciasRow = CType(Me.NewRow,Empleado_LicenciasRow)
            rowEmpleado_LicenciasRow.ItemArray = New Object() {Nothing, parentEmpleadoRowByEmpleadoEmpleado_Licencias(0), Numero, Tipo, Emision, Vencimiento}
            Me.Rows.Add(rowEmpleado_LicenciasRow)
            Return rowEmpleado_LicenciasRow
        End Function
        
        Public Function FindById(ByVal Id As Long) As Empleado_LicenciasRow
            Return CType(Me.Rows.Find(New Object() {Id}),Empleado_LicenciasRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Empleado_LicenciasDataTable = CType(MyBase.Clone,Empleado_LicenciasDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Empleado_LicenciasDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnId = Me.Columns("Id")
            Me.columnIdentificacion = Me.Columns("Identificacion")
            Me.columnNumero = Me.Columns("Numero")
            Me.columnTipo = Me.Columns("Tipo")
            Me.columnEmision = Me.Columns("Emision")
            Me.columnVencimiento = Me.Columns("Vencimiento")
        End Sub
        
        Private Sub InitClass()
            Me.columnId = New DataColumn("Id", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId)
            Me.columnIdentificacion = New DataColumn("Identificacion", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdentificacion)
            Me.columnNumero = New DataColumn("Numero", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNumero)
            Me.columnTipo = New DataColumn("Tipo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTipo)
            Me.columnEmision = New DataColumn("Emision", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEmision)
            Me.columnVencimiento = New DataColumn("Vencimiento", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVencimiento)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnId}, true))
            Me.columnId.AutoIncrement = true
            Me.columnId.AllowDBNull = false
            Me.columnId.ReadOnly = true
            Me.columnId.Unique = true
            Me.columnIdentificacion.AllowDBNull = false
            Me.columnNumero.AllowDBNull = false
            Me.columnTipo.AllowDBNull = false
            Me.columnEmision.AllowDBNull = false
            Me.columnVencimiento.AllowDBNull = false
        End Sub
        
        Public Function NewEmpleado_LicenciasRow() As Empleado_LicenciasRow
            Return CType(Me.NewRow,Empleado_LicenciasRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Empleado_LicenciasRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Empleado_LicenciasRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Empleado_LicenciasRowChangedEvent) Is Nothing) Then
                RaiseEvent Empleado_LicenciasRowChanged(Me, New Empleado_LicenciasRowChangeEvent(CType(e.Row,Empleado_LicenciasRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Empleado_LicenciasRowChangingEvent) Is Nothing) Then
                RaiseEvent Empleado_LicenciasRowChanging(Me, New Empleado_LicenciasRowChangeEvent(CType(e.Row,Empleado_LicenciasRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Empleado_LicenciasRowDeletedEvent) Is Nothing) Then
                RaiseEvent Empleado_LicenciasRowDeleted(Me, New Empleado_LicenciasRowChangeEvent(CType(e.Row,Empleado_LicenciasRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Empleado_LicenciasRowDeletingEvent) Is Nothing) Then
                RaiseEvent Empleado_LicenciasRowDeleting(Me, New Empleado_LicenciasRowChangeEvent(CType(e.Row,Empleado_LicenciasRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveEmpleado_LicenciasRow(ByVal row As Empleado_LicenciasRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Empleado_LicenciasRow
        Inherits DataRow
        
        Private tableEmpleado_Licencias As Empleado_LicenciasDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableEmpleado_Licencias = CType(Me.Table,Empleado_LicenciasDataTable)
        End Sub
        
        Public Property Id As Long
            Get
                Return CType(Me(Me.tableEmpleado_Licencias.IdColumn),Long)
            End Get
            Set
                Me(Me.tableEmpleado_Licencias.IdColumn) = value
            End Set
        End Property
        
        Public Property Identificacion As String
            Get
                Return CType(Me(Me.tableEmpleado_Licencias.IdentificacionColumn),String)
            End Get
            Set
                Me(Me.tableEmpleado_Licencias.IdentificacionColumn) = value
            End Set
        End Property
        
        Public Property Numero As String
            Get
                Return CType(Me(Me.tableEmpleado_Licencias.NumeroColumn),String)
            End Get
            Set
                Me(Me.tableEmpleado_Licencias.NumeroColumn) = value
            End Set
        End Property
        
        Public Property Tipo As String
            Get
                Return CType(Me(Me.tableEmpleado_Licencias.TipoColumn),String)
            End Get
            Set
                Me(Me.tableEmpleado_Licencias.TipoColumn) = value
            End Set
        End Property
        
        Public Property Emision As Date
            Get
                Return CType(Me(Me.tableEmpleado_Licencias.EmisionColumn),Date)
            End Get
            Set
                Me(Me.tableEmpleado_Licencias.EmisionColumn) = value
            End Set
        End Property
        
        Public Property Vencimiento As Date
            Get
                Return CType(Me(Me.tableEmpleado_Licencias.VencimientoColumn),Date)
            End Get
            Set
                Me(Me.tableEmpleado_Licencias.VencimientoColumn) = value
            End Set
        End Property
        
        Public Property EmpleadoRow As EmpleadoRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("EmpleadoEmpleado_Licencias")),EmpleadoRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("EmpleadoEmpleado_Licencias"))
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Empleado_LicenciasRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Empleado_LicenciasRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Empleado_LicenciasRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Empleado_LicenciasRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DistribucionContableDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnEmpleadoIdentificacion As DataColumn
        
        Private columnIdDepartamento As DataColumn
        
        Private columnDepartamento As DataColumn
        
        Private columnPorcentaje As DataColumn
        
        Friend Sub New()
            MyBase.New("DistribucionContable")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property EmpleadoIdentificacionColumn As DataColumn
            Get
                Return Me.columnEmpleadoIdentificacion
            End Get
        End Property
        
        Friend ReadOnly Property IdDepartamentoColumn As DataColumn
            Get
                Return Me.columnIdDepartamento
            End Get
        End Property
        
        Friend ReadOnly Property DepartamentoColumn As DataColumn
            Get
                Return Me.columnDepartamento
            End Get
        End Property
        
        Friend ReadOnly Property PorcentajeColumn As DataColumn
            Get
                Return Me.columnPorcentaje
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As DistribucionContableRow
            Get
                Return CType(Me.Rows(index),DistribucionContableRow)
            End Get
        End Property
        
        Public Event DistribucionContableRowChanged As DistribucionContableRowChangeEventHandler
        
        Public Event DistribucionContableRowChanging As DistribucionContableRowChangeEventHandler
        
        Public Event DistribucionContableRowDeleted As DistribucionContableRowChangeEventHandler
        
        Public Event DistribucionContableRowDeleting As DistribucionContableRowChangeEventHandler
        
        Public Overloads Sub AddDistribucionContableRow(ByVal row As DistribucionContableRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddDistribucionContableRow(ByVal parentEmpleadoRowByEmpleadoDistribucionContable As EmpleadoRow, ByVal IdDepartamento As Integer, ByVal Departamento As String, ByVal Porcentaje As Single) As DistribucionContableRow
            Dim rowDistribucionContableRow As DistribucionContableRow = CType(Me.NewRow,DistribucionContableRow)
            rowDistribucionContableRow.ItemArray = New Object() {parentEmpleadoRowByEmpleadoDistribucionContable(0), IdDepartamento, Departamento, Porcentaje}
            Me.Rows.Add(rowDistribucionContableRow)
            Return rowDistribucionContableRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As DistribucionContableDataTable = CType(MyBase.Clone,DistribucionContableDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New DistribucionContableDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnEmpleadoIdentificacion = Me.Columns("EmpleadoIdentificacion")
            Me.columnIdDepartamento = Me.Columns("IdDepartamento")
            Me.columnDepartamento = Me.Columns("Departamento")
            Me.columnPorcentaje = Me.Columns("Porcentaje")
        End Sub
        
        Private Sub InitClass()
            Me.columnEmpleadoIdentificacion = New DataColumn("EmpleadoIdentificacion", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEmpleadoIdentificacion)
            Me.columnIdDepartamento = New DataColumn("IdDepartamento", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdDepartamento)
            Me.columnDepartamento = New DataColumn("Departamento", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDepartamento)
            Me.columnPorcentaje = New DataColumn("Porcentaje", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPorcentaje)
        End Sub
        
        Public Function NewDistribucionContableRow() As DistribucionContableRow
            Return CType(Me.NewRow,DistribucionContableRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New DistribucionContableRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(DistribucionContableRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DistribucionContableRowChangedEvent) Is Nothing) Then
                RaiseEvent DistribucionContableRowChanged(Me, New DistribucionContableRowChangeEvent(CType(e.Row,DistribucionContableRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DistribucionContableRowChangingEvent) Is Nothing) Then
                RaiseEvent DistribucionContableRowChanging(Me, New DistribucionContableRowChangeEvent(CType(e.Row,DistribucionContableRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DistribucionContableRowDeletedEvent) Is Nothing) Then
                RaiseEvent DistribucionContableRowDeleted(Me, New DistribucionContableRowChangeEvent(CType(e.Row,DistribucionContableRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DistribucionContableRowDeletingEvent) Is Nothing) Then
                RaiseEvent DistribucionContableRowDeleting(Me, New DistribucionContableRowChangeEvent(CType(e.Row,DistribucionContableRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveDistribucionContableRow(ByVal row As DistribucionContableRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DistribucionContableRow
        Inherits DataRow
        
        Private tableDistribucionContable As DistribucionContableDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableDistribucionContable = CType(Me.Table,DistribucionContableDataTable)
        End Sub
        
        Public Property EmpleadoIdentificacion As String
            Get
                Try 
                    Return CType(Me(Me.tableDistribucionContable.EmpleadoIdentificacionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDistribucionContable.EmpleadoIdentificacionColumn) = value
            End Set
        End Property
        
        Public Property IdDepartamento As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDistribucionContable.IdDepartamentoColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDistribucionContable.IdDepartamentoColumn) = value
            End Set
        End Property
        
        Public Property Departamento As String
            Get
                Try 
                    Return CType(Me(Me.tableDistribucionContable.DepartamentoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDistribucionContable.DepartamentoColumn) = value
            End Set
        End Property
        
        Public Property Porcentaje As Single
            Get
                Try 
                    Return CType(Me(Me.tableDistribucionContable.PorcentajeColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDistribucionContable.PorcentajeColumn) = value
            End Set
        End Property
        
        Public Property EmpleadoRow As EmpleadoRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("EmpleadoDistribucionContable")),EmpleadoRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("EmpleadoDistribucionContable"))
            End Set
        End Property
        
        Public Function IsEmpleadoIdentificacionNull() As Boolean
            Return Me.IsNull(Me.tableDistribucionContable.EmpleadoIdentificacionColumn)
        End Function
        
        Public Sub SetEmpleadoIdentificacionNull()
            Me(Me.tableDistribucionContable.EmpleadoIdentificacionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIdDepartamentoNull() As Boolean
            Return Me.IsNull(Me.tableDistribucionContable.IdDepartamentoColumn)
        End Function
        
        Public Sub SetIdDepartamentoNull()
            Me(Me.tableDistribucionContable.IdDepartamentoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDepartamentoNull() As Boolean
            Return Me.IsNull(Me.tableDistribucionContable.DepartamentoColumn)
        End Function
        
        Public Sub SetDepartamentoNull()
            Me(Me.tableDistribucionContable.DepartamentoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPorcentajeNull() As Boolean
            Return Me.IsNull(Me.tableDistribucionContable.PorcentajeColumn)
        End Function
        
        Public Sub SetPorcentajeNull()
            Me(Me.tableDistribucionContable.PorcentajeColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DistribucionContableRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As DistribucionContableRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As DistribucionContableRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As DistribucionContableRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class EmpleadoDistribucionContableDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnEmpleadoIdentificacion As DataColumn
        
        Private columnIdDepartamento As DataColumn
        
        Private columnPorcentaje As DataColumn
        
        Private columnDepartamento As DataColumn
        
        Private columnId As DataColumn
        
        Friend Sub New()
            MyBase.New("EmpleadoDistribucionContable")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property EmpleadoIdentificacionColumn As DataColumn
            Get
                Return Me.columnEmpleadoIdentificacion
            End Get
        End Property
        
        Friend ReadOnly Property IdDepartamentoColumn As DataColumn
            Get
                Return Me.columnIdDepartamento
            End Get
        End Property
        
        Friend ReadOnly Property PorcentajeColumn As DataColumn
            Get
                Return Me.columnPorcentaje
            End Get
        End Property
        
        Friend ReadOnly Property DepartamentoColumn As DataColumn
            Get
                Return Me.columnDepartamento
            End Get
        End Property
        
        Friend ReadOnly Property IdColumn As DataColumn
            Get
                Return Me.columnId
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As EmpleadoDistribucionContableRow
            Get
                Return CType(Me.Rows(index),EmpleadoDistribucionContableRow)
            End Get
        End Property
        
        Public Event EmpleadoDistribucionContableRowChanged As EmpleadoDistribucionContableRowChangeEventHandler
        
        Public Event EmpleadoDistribucionContableRowChanging As EmpleadoDistribucionContableRowChangeEventHandler
        
        Public Event EmpleadoDistribucionContableRowDeleted As EmpleadoDistribucionContableRowChangeEventHandler
        
        Public Event EmpleadoDistribucionContableRowDeleting As EmpleadoDistribucionContableRowChangeEventHandler
        
        Public Overloads Sub AddEmpleadoDistribucionContableRow(ByVal row As EmpleadoDistribucionContableRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddEmpleadoDistribucionContableRow(ByVal EmpleadoIdentificacion As String, ByVal IdDepartamento As Integer, ByVal Porcentaje As Double, ByVal Departamento As String) As EmpleadoDistribucionContableRow
            Dim rowEmpleadoDistribucionContableRow As EmpleadoDistribucionContableRow = CType(Me.NewRow,EmpleadoDistribucionContableRow)
            rowEmpleadoDistribucionContableRow.ItemArray = New Object() {EmpleadoIdentificacion, IdDepartamento, Porcentaje, Departamento, Nothing}
            Me.Rows.Add(rowEmpleadoDistribucionContableRow)
            Return rowEmpleadoDistribucionContableRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As EmpleadoDistribucionContableDataTable = CType(MyBase.Clone,EmpleadoDistribucionContableDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New EmpleadoDistribucionContableDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnEmpleadoIdentificacion = Me.Columns("EmpleadoIdentificacion")
            Me.columnIdDepartamento = Me.Columns("IdDepartamento")
            Me.columnPorcentaje = Me.Columns("Porcentaje")
            Me.columnDepartamento = Me.Columns("Departamento")
            Me.columnId = Me.Columns("Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnEmpleadoIdentificacion = New DataColumn("EmpleadoIdentificacion", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEmpleadoIdentificacion)
            Me.columnIdDepartamento = New DataColumn("IdDepartamento", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdDepartamento)
            Me.columnPorcentaje = New DataColumn("Porcentaje", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPorcentaje)
            Me.columnDepartamento = New DataColumn("Departamento", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDepartamento)
            Me.columnId = New DataColumn("Id", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId)
            Me.columnEmpleadoIdentificacion.AllowDBNull = false
            Me.columnIdDepartamento.AllowDBNull = false
            Me.columnPorcentaje.AllowDBNull = false
            Me.columnDepartamento.AllowDBNull = false
            Me.columnId.AutoIncrement = true
            Me.columnId.AllowDBNull = false
            Me.columnId.ReadOnly = true
        End Sub
        
        Public Function NewEmpleadoDistribucionContableRow() As EmpleadoDistribucionContableRow
            Return CType(Me.NewRow,EmpleadoDistribucionContableRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New EmpleadoDistribucionContableRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(EmpleadoDistribucionContableRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EmpleadoDistribucionContableRowChangedEvent) Is Nothing) Then
                RaiseEvent EmpleadoDistribucionContableRowChanged(Me, New EmpleadoDistribucionContableRowChangeEvent(CType(e.Row,EmpleadoDistribucionContableRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EmpleadoDistribucionContableRowChangingEvent) Is Nothing) Then
                RaiseEvent EmpleadoDistribucionContableRowChanging(Me, New EmpleadoDistribucionContableRowChangeEvent(CType(e.Row,EmpleadoDistribucionContableRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EmpleadoDistribucionContableRowDeletedEvent) Is Nothing) Then
                RaiseEvent EmpleadoDistribucionContableRowDeleted(Me, New EmpleadoDistribucionContableRowChangeEvent(CType(e.Row,EmpleadoDistribucionContableRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EmpleadoDistribucionContableRowDeletingEvent) Is Nothing) Then
                RaiseEvent EmpleadoDistribucionContableRowDeleting(Me, New EmpleadoDistribucionContableRowChangeEvent(CType(e.Row,EmpleadoDistribucionContableRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveEmpleadoDistribucionContableRow(ByVal row As EmpleadoDistribucionContableRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class EmpleadoDistribucionContableRow
        Inherits DataRow
        
        Private tableEmpleadoDistribucionContable As EmpleadoDistribucionContableDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableEmpleadoDistribucionContable = CType(Me.Table,EmpleadoDistribucionContableDataTable)
        End Sub
        
        Public Property EmpleadoIdentificacion As String
            Get
                Return CType(Me(Me.tableEmpleadoDistribucionContable.EmpleadoIdentificacionColumn),String)
            End Get
            Set
                Me(Me.tableEmpleadoDistribucionContable.EmpleadoIdentificacionColumn) = value
            End Set
        End Property
        
        Public Property IdDepartamento As Integer
            Get
                Return CType(Me(Me.tableEmpleadoDistribucionContable.IdDepartamentoColumn),Integer)
            End Get
            Set
                Me(Me.tableEmpleadoDistribucionContable.IdDepartamentoColumn) = value
            End Set
        End Property
        
        Public Property Porcentaje As Double
            Get
                Return CType(Me(Me.tableEmpleadoDistribucionContable.PorcentajeColumn),Double)
            End Get
            Set
                Me(Me.tableEmpleadoDistribucionContable.PorcentajeColumn) = value
            End Set
        End Property
        
        Public Property Departamento As String
            Get
                Return CType(Me(Me.tableEmpleadoDistribucionContable.DepartamentoColumn),String)
            End Get
            Set
                Me(Me.tableEmpleadoDistribucionContable.DepartamentoColumn) = value
            End Set
        End Property
        
        Public Property Id As Integer
            Get
                Return CType(Me(Me.tableEmpleadoDistribucionContable.IdColumn),Integer)
            End Get
            Set
                Me(Me.tableEmpleadoDistribucionContable.IdColumn) = value
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class EmpleadoDistribucionContableRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As EmpleadoDistribucionContableRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As EmpleadoDistribucionContableRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As EmpleadoDistribucionContableRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class EmpleadoDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnIdentificacion As DataColumn
        
        Private columnNombre As DataColumn
        
        Private columnEstado_Civil As DataColumn
        
        Private columnHijos As DataColumn
        
        Private columnCod_Nacionalidad As DataColumn
        
        Private columnFecha_Nacimiento As DataColumn
        
        Private columnEdad As DataColumn
        
        Private columnTelefono1 As DataColumn
        
        Private columnTelefono2 As DataColumn
        
        Private columnEmail As DataColumn
        
        Private columnDireccion As DataColumn
        
        Private columnPuesto As DataColumn
        
        Private columnFecha_Ingreso As DataColumn
        
        Private columnFecha_Salida As DataColumn
        
        Private columnSalario As DataColumn
        
        Private columnCod_Departamento As DataColumn
        
        Private columnMasculino As DataColumn
        
        Private columnFemenino As DataColumn
        
        Private columnCod_Moneda As DataColumn
        
        Private columnHora As DataColumn
        
        Private columnDiario As DataColumn
        
        Private columnSemana As DataColumn
        
        Private columnQuincena As DataColumn
        
        Private columnMensual As DataColumn
        
        Private columnCod_Estado As DataColumn
        
        Private columnContactoConCliente As DataColumn
        
        Private columnCuentaBancaria As DataColumn
        
        Private columnid_usuario As DataColumn
        
        Friend Sub New()
            MyBase.New("Empleado")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IdentificacionColumn As DataColumn
            Get
                Return Me.columnIdentificacion
            End Get
        End Property
        
        Friend ReadOnly Property NombreColumn As DataColumn
            Get
                Return Me.columnNombre
            End Get
        End Property
        
        Friend ReadOnly Property Estado_CivilColumn As DataColumn
            Get
                Return Me.columnEstado_Civil
            End Get
        End Property
        
        Friend ReadOnly Property HijosColumn As DataColumn
            Get
                Return Me.columnHijos
            End Get
        End Property
        
        Friend ReadOnly Property Cod_NacionalidadColumn As DataColumn
            Get
                Return Me.columnCod_Nacionalidad
            End Get
        End Property
        
        Friend ReadOnly Property Fecha_NacimientoColumn As DataColumn
            Get
                Return Me.columnFecha_Nacimiento
            End Get
        End Property
        
        Friend ReadOnly Property EdadColumn As DataColumn
            Get
                Return Me.columnEdad
            End Get
        End Property
        
        Friend ReadOnly Property Telefono1Column As DataColumn
            Get
                Return Me.columnTelefono1
            End Get
        End Property
        
        Friend ReadOnly Property Telefono2Column As DataColumn
            Get
                Return Me.columnTelefono2
            End Get
        End Property
        
        Friend ReadOnly Property EmailColumn As DataColumn
            Get
                Return Me.columnEmail
            End Get
        End Property
        
        Friend ReadOnly Property DireccionColumn As DataColumn
            Get
                Return Me.columnDireccion
            End Get
        End Property
        
        Friend ReadOnly Property PuestoColumn As DataColumn
            Get
                Return Me.columnPuesto
            End Get
        End Property
        
        Friend ReadOnly Property Fecha_IngresoColumn As DataColumn
            Get
                Return Me.columnFecha_Ingreso
            End Get
        End Property
        
        Friend ReadOnly Property Fecha_SalidaColumn As DataColumn
            Get
                Return Me.columnFecha_Salida
            End Get
        End Property
        
        Friend ReadOnly Property SalarioColumn As DataColumn
            Get
                Return Me.columnSalario
            End Get
        End Property
        
        Friend ReadOnly Property Cod_DepartamentoColumn As DataColumn
            Get
                Return Me.columnCod_Departamento
            End Get
        End Property
        
        Friend ReadOnly Property MasculinoColumn As DataColumn
            Get
                Return Me.columnMasculino
            End Get
        End Property
        
        Friend ReadOnly Property FemeninoColumn As DataColumn
            Get
                Return Me.columnFemenino
            End Get
        End Property
        
        Friend ReadOnly Property Cod_MonedaColumn As DataColumn
            Get
                Return Me.columnCod_Moneda
            End Get
        End Property
        
        Friend ReadOnly Property HoraColumn As DataColumn
            Get
                Return Me.columnHora
            End Get
        End Property
        
        Friend ReadOnly Property DiarioColumn As DataColumn
            Get
                Return Me.columnDiario
            End Get
        End Property
        
        Friend ReadOnly Property SemanaColumn As DataColumn
            Get
                Return Me.columnSemana
            End Get
        End Property
        
        Friend ReadOnly Property QuincenaColumn As DataColumn
            Get
                Return Me.columnQuincena
            End Get
        End Property
        
        Friend ReadOnly Property MensualColumn As DataColumn
            Get
                Return Me.columnMensual
            End Get
        End Property
        
        Friend ReadOnly Property Cod_EstadoColumn As DataColumn
            Get
                Return Me.columnCod_Estado
            End Get
        End Property
        
        Friend ReadOnly Property ContactoConClienteColumn As DataColumn
            Get
                Return Me.columnContactoConCliente
            End Get
        End Property
        
        Friend ReadOnly Property CuentaBancariaColumn As DataColumn
            Get
                Return Me.columnCuentaBancaria
            End Get
        End Property
        
        Friend ReadOnly Property id_usuarioColumn As DataColumn
            Get
                Return Me.columnid_usuario
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As EmpleadoRow
            Get
                Return CType(Me.Rows(index),EmpleadoRow)
            End Get
        End Property
        
        Public Event EmpleadoRowChanged As EmpleadoRowChangeEventHandler
        
        Public Event EmpleadoRowChanging As EmpleadoRowChangeEventHandler
        
        Public Event EmpleadoRowDeleted As EmpleadoRowChangeEventHandler
        
        Public Event EmpleadoRowDeleting As EmpleadoRowChangeEventHandler
        
        Public Overloads Sub AddEmpleadoRow(ByVal row As EmpleadoRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddEmpleadoRow( _
                    ByVal Identificacion As String,  _
                    ByVal Nombre As String,  _
                    ByVal Estado_Civil As String,  _
                    ByVal Hijos As Integer,  _
                    ByVal parentNacionalidadRowByNacionalidadEmpleado As NacionalidadRow,  _
                    ByVal Fecha_Nacimiento As Date,  _
                    ByVal Edad As Integer,  _
                    ByVal Telefono1 As String,  _
                    ByVal Telefono2 As String,  _
                    ByVal Email As String,  _
                    ByVal Direccion As String,  _
                    ByVal Puesto As String,  _
                    ByVal Fecha_Ingreso As Date,  _
                    ByVal Fecha_Salida As Date,  _
                    ByVal Salario As Double,  _
                    ByVal parentDepartamentoRowByDepartamentoEmpleado As DepartamentoRow,  _
                    ByVal Masculino As Boolean,  _
                    ByVal Femenino As Boolean,  _
                    ByVal parentMonedaRowByMonedaEmpleado As MonedaRow,  _
                    ByVal Hora As Boolean,  _
                    ByVal Diario As Boolean,  _
                    ByVal Semana As Boolean,  _
                    ByVal Quincena As Boolean,  _
                    ByVal Mensual As Boolean,  _
                    ByVal parentEstado_EmpleadoRowByEstado_EmpleadoEmpleado As Estado_EmpleadoRow,  _
                    ByVal ContactoConCliente As Boolean,  _
                    ByVal CuentaBancaria As String,  _
                    ByVal id_usuario As String) As EmpleadoRow
            Dim rowEmpleadoRow As EmpleadoRow = CType(Me.NewRow,EmpleadoRow)
            rowEmpleadoRow.ItemArray = New Object() {Identificacion, Nombre, Estado_Civil, Hijos, parentNacionalidadRowByNacionalidadEmpleado(0), Fecha_Nacimiento, Edad, Telefono1, Telefono2, Email, Direccion, Puesto, Fecha_Ingreso, Fecha_Salida, Salario, parentDepartamentoRowByDepartamentoEmpleado(1), Masculino, Femenino, parentMonedaRowByMonedaEmpleado(0), Hora, Diario, Semana, Quincena, Mensual, parentEstado_EmpleadoRowByEstado_EmpleadoEmpleado(0), ContactoConCliente, CuentaBancaria, id_usuario}
            Me.Rows.Add(rowEmpleadoRow)
            Return rowEmpleadoRow
        End Function
        
        Public Function FindByIdentificacion(ByVal Identificacion As String) As EmpleadoRow
            Return CType(Me.Rows.Find(New Object() {Identificacion}),EmpleadoRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As EmpleadoDataTable = CType(MyBase.Clone,EmpleadoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New EmpleadoDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnIdentificacion = Me.Columns("Identificacion")
            Me.columnNombre = Me.Columns("Nombre")
            Me.columnEstado_Civil = Me.Columns("Estado_Civil")
            Me.columnHijos = Me.Columns("Hijos")
            Me.columnCod_Nacionalidad = Me.Columns("Cod_Nacionalidad")
            Me.columnFecha_Nacimiento = Me.Columns("Fecha_Nacimiento")
            Me.columnEdad = Me.Columns("Edad")
            Me.columnTelefono1 = Me.Columns("Telefono1")
            Me.columnTelefono2 = Me.Columns("Telefono2")
            Me.columnEmail = Me.Columns("Email")
            Me.columnDireccion = Me.Columns("Direccion")
            Me.columnPuesto = Me.Columns("Puesto")
            Me.columnFecha_Ingreso = Me.Columns("Fecha_Ingreso")
            Me.columnFecha_Salida = Me.Columns("Fecha_Salida")
            Me.columnSalario = Me.Columns("Salario")
            Me.columnCod_Departamento = Me.Columns("Cod_Departamento")
            Me.columnMasculino = Me.Columns("Masculino")
            Me.columnFemenino = Me.Columns("Femenino")
            Me.columnCod_Moneda = Me.Columns("Cod_Moneda")
            Me.columnHora = Me.Columns("Hora")
            Me.columnDiario = Me.Columns("Diario")
            Me.columnSemana = Me.Columns("Semana")
            Me.columnQuincena = Me.Columns("Quincena")
            Me.columnMensual = Me.Columns("Mensual")
            Me.columnCod_Estado = Me.Columns("Cod_Estado")
            Me.columnContactoConCliente = Me.Columns("ContactoConCliente")
            Me.columnCuentaBancaria = Me.Columns("CuentaBancaria")
            Me.columnid_usuario = Me.Columns("id_usuario")
        End Sub
        
        Private Sub InitClass()
            Me.columnIdentificacion = New DataColumn("Identificacion", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdentificacion)
            Me.columnNombre = New DataColumn("Nombre", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNombre)
            Me.columnEstado_Civil = New DataColumn("Estado_Civil", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEstado_Civil)
            Me.columnHijos = New DataColumn("Hijos", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHijos)
            Me.columnCod_Nacionalidad = New DataColumn("Cod_Nacionalidad", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCod_Nacionalidad)
            Me.columnFecha_Nacimiento = New DataColumn("Fecha_Nacimiento", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFecha_Nacimiento)
            Me.columnEdad = New DataColumn("Edad", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEdad)
            Me.columnTelefono1 = New DataColumn("Telefono1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTelefono1)
            Me.columnTelefono2 = New DataColumn("Telefono2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTelefono2)
            Me.columnEmail = New DataColumn("Email", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEmail)
            Me.columnDireccion = New DataColumn("Direccion", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDireccion)
            Me.columnPuesto = New DataColumn("Puesto", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPuesto)
            Me.columnFecha_Ingreso = New DataColumn("Fecha_Ingreso", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFecha_Ingreso)
            Me.columnFecha_Salida = New DataColumn("Fecha_Salida", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFecha_Salida)
            Me.columnSalario = New DataColumn("Salario", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSalario)
            Me.columnCod_Departamento = New DataColumn("Cod_Departamento", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCod_Departamento)
            Me.columnMasculino = New DataColumn("Masculino", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMasculino)
            Me.columnFemenino = New DataColumn("Femenino", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFemenino)
            Me.columnCod_Moneda = New DataColumn("Cod_Moneda", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCod_Moneda)
            Me.columnHora = New DataColumn("Hora", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHora)
            Me.columnDiario = New DataColumn("Diario", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDiario)
            Me.columnSemana = New DataColumn("Semana", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSemana)
            Me.columnQuincena = New DataColumn("Quincena", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnQuincena)
            Me.columnMensual = New DataColumn("Mensual", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMensual)
            Me.columnCod_Estado = New DataColumn("Cod_Estado", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCod_Estado)
            Me.columnContactoConCliente = New DataColumn("ContactoConCliente", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnContactoConCliente)
            Me.columnCuentaBancaria = New DataColumn("CuentaBancaria", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCuentaBancaria)
            Me.columnid_usuario = New DataColumn("id_usuario", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_usuario)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnIdentificacion}, true))
            Me.columnIdentificacion.AllowDBNull = false
            Me.columnIdentificacion.Unique = true
            Me.columnNombre.AllowDBNull = false
            Me.columnEstado_Civil.AllowDBNull = false
            Me.columnHijos.AllowDBNull = false
            Me.columnCod_Nacionalidad.AllowDBNull = false
            Me.columnFecha_Nacimiento.AllowDBNull = false
            Me.columnEdad.AllowDBNull = false
            Me.columnTelefono1.AllowDBNull = false
            Me.columnTelefono2.AllowDBNull = false
            Me.columnEmail.AllowDBNull = false
            Me.columnDireccion.AllowDBNull = false
            Me.columnPuesto.AllowDBNull = false
            Me.columnFecha_Ingreso.AllowDBNull = false
            Me.columnFecha_Salida.AllowDBNull = false
            Me.columnSalario.AllowDBNull = false
            Me.columnCod_Departamento.AllowDBNull = false
            Me.columnMasculino.AllowDBNull = false
            Me.columnFemenino.AllowDBNull = false
            Me.columnCod_Moneda.AllowDBNull = false
            Me.columnHora.AllowDBNull = false
            Me.columnDiario.AllowDBNull = false
            Me.columnSemana.AllowDBNull = false
            Me.columnQuincena.AllowDBNull = false
            Me.columnMensual.AllowDBNull = false
            Me.columnCod_Estado.AllowDBNull = false
            Me.columnContactoConCliente.AllowDBNull = false
        End Sub
        
        Public Function NewEmpleadoRow() As EmpleadoRow
            Return CType(Me.NewRow,EmpleadoRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New EmpleadoRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(EmpleadoRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EmpleadoRowChangedEvent) Is Nothing) Then
                RaiseEvent EmpleadoRowChanged(Me, New EmpleadoRowChangeEvent(CType(e.Row,EmpleadoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EmpleadoRowChangingEvent) Is Nothing) Then
                RaiseEvent EmpleadoRowChanging(Me, New EmpleadoRowChangeEvent(CType(e.Row,EmpleadoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EmpleadoRowDeletedEvent) Is Nothing) Then
                RaiseEvent EmpleadoRowDeleted(Me, New EmpleadoRowChangeEvent(CType(e.Row,EmpleadoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EmpleadoRowDeletingEvent) Is Nothing) Then
                RaiseEvent EmpleadoRowDeleting(Me, New EmpleadoRowChangeEvent(CType(e.Row,EmpleadoRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveEmpleadoRow(ByVal row As EmpleadoRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class EmpleadoRow
        Inherits DataRow
        
        Private tableEmpleado As EmpleadoDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableEmpleado = CType(Me.Table,EmpleadoDataTable)
        End Sub
        
        Public Property Identificacion As String
            Get
                Return CType(Me(Me.tableEmpleado.IdentificacionColumn),String)
            End Get
            Set
                Me(Me.tableEmpleado.IdentificacionColumn) = value
            End Set
        End Property
        
        Public Property Nombre As String
            Get
                Return CType(Me(Me.tableEmpleado.NombreColumn),String)
            End Get
            Set
                Me(Me.tableEmpleado.NombreColumn) = value
            End Set
        End Property
        
        Public Property Estado_Civil As String
            Get
                Return CType(Me(Me.tableEmpleado.Estado_CivilColumn),String)
            End Get
            Set
                Me(Me.tableEmpleado.Estado_CivilColumn) = value
            End Set
        End Property
        
        Public Property Hijos As Integer
            Get
                Return CType(Me(Me.tableEmpleado.HijosColumn),Integer)
            End Get
            Set
                Me(Me.tableEmpleado.HijosColumn) = value
            End Set
        End Property
        
        Public Property Cod_Nacionalidad As Integer
            Get
                Return CType(Me(Me.tableEmpleado.Cod_NacionalidadColumn),Integer)
            End Get
            Set
                Me(Me.tableEmpleado.Cod_NacionalidadColumn) = value
            End Set
        End Property
        
        Public Property Fecha_Nacimiento As Date
            Get
                Return CType(Me(Me.tableEmpleado.Fecha_NacimientoColumn),Date)
            End Get
            Set
                Me(Me.tableEmpleado.Fecha_NacimientoColumn) = value
            End Set
        End Property
        
        Public Property Edad As Integer
            Get
                Return CType(Me(Me.tableEmpleado.EdadColumn),Integer)
            End Get
            Set
                Me(Me.tableEmpleado.EdadColumn) = value
            End Set
        End Property
        
        Public Property Telefono1 As String
            Get
                Return CType(Me(Me.tableEmpleado.Telefono1Column),String)
            End Get
            Set
                Me(Me.tableEmpleado.Telefono1Column) = value
            End Set
        End Property
        
        Public Property Telefono2 As String
            Get
                Return CType(Me(Me.tableEmpleado.Telefono2Column),String)
            End Get
            Set
                Me(Me.tableEmpleado.Telefono2Column) = value
            End Set
        End Property
        
        Public Property Email As String
            Get
                Return CType(Me(Me.tableEmpleado.EmailColumn),String)
            End Get
            Set
                Me(Me.tableEmpleado.EmailColumn) = value
            End Set
        End Property
        
        Public Property Direccion As String
            Get
                Return CType(Me(Me.tableEmpleado.DireccionColumn),String)
            End Get
            Set
                Me(Me.tableEmpleado.DireccionColumn) = value
            End Set
        End Property
        
        Public Property Puesto As String
            Get
                Return CType(Me(Me.tableEmpleado.PuestoColumn),String)
            End Get
            Set
                Me(Me.tableEmpleado.PuestoColumn) = value
            End Set
        End Property
        
        Public Property Fecha_Ingreso As Date
            Get
                Return CType(Me(Me.tableEmpleado.Fecha_IngresoColumn),Date)
            End Get
            Set
                Me(Me.tableEmpleado.Fecha_IngresoColumn) = value
            End Set
        End Property
        
        Public Property Fecha_Salida As Date
            Get
                Return CType(Me(Me.tableEmpleado.Fecha_SalidaColumn),Date)
            End Get
            Set
                Me(Me.tableEmpleado.Fecha_SalidaColumn) = value
            End Set
        End Property
        
        Public Property Salario As Double
            Get
                Return CType(Me(Me.tableEmpleado.SalarioColumn),Double)
            End Get
            Set
                Me(Me.tableEmpleado.SalarioColumn) = value
            End Set
        End Property
        
        Public Property Cod_Departamento As Integer
            Get
                Return CType(Me(Me.tableEmpleado.Cod_DepartamentoColumn),Integer)
            End Get
            Set
                Me(Me.tableEmpleado.Cod_DepartamentoColumn) = value
            End Set
        End Property
        
        Public Property Masculino As Boolean
            Get
                Return CType(Me(Me.tableEmpleado.MasculinoColumn),Boolean)
            End Get
            Set
                Me(Me.tableEmpleado.MasculinoColumn) = value
            End Set
        End Property
        
        Public Property Femenino As Boolean
            Get
                Return CType(Me(Me.tableEmpleado.FemeninoColumn),Boolean)
            End Get
            Set
                Me(Me.tableEmpleado.FemeninoColumn) = value
            End Set
        End Property
        
        Public Property Cod_Moneda As Integer
            Get
                Return CType(Me(Me.tableEmpleado.Cod_MonedaColumn),Integer)
            End Get
            Set
                Me(Me.tableEmpleado.Cod_MonedaColumn) = value
            End Set
        End Property
        
        Public Property Hora As Boolean
            Get
                Return CType(Me(Me.tableEmpleado.HoraColumn),Boolean)
            End Get
            Set
                Me(Me.tableEmpleado.HoraColumn) = value
            End Set
        End Property
        
        Public Property Diario As Boolean
            Get
                Return CType(Me(Me.tableEmpleado.DiarioColumn),Boolean)
            End Get
            Set
                Me(Me.tableEmpleado.DiarioColumn) = value
            End Set
        End Property
        
        Public Property Semana As Boolean
            Get
                Return CType(Me(Me.tableEmpleado.SemanaColumn),Boolean)
            End Get
            Set
                Me(Me.tableEmpleado.SemanaColumn) = value
            End Set
        End Property
        
        Public Property Quincena As Boolean
            Get
                Return CType(Me(Me.tableEmpleado.QuincenaColumn),Boolean)
            End Get
            Set
                Me(Me.tableEmpleado.QuincenaColumn) = value
            End Set
        End Property
        
        Public Property Mensual As Boolean
            Get
                Return CType(Me(Me.tableEmpleado.MensualColumn),Boolean)
            End Get
            Set
                Me(Me.tableEmpleado.MensualColumn) = value
            End Set
        End Property
        
        Public Property Cod_Estado As Integer
            Get
                Return CType(Me(Me.tableEmpleado.Cod_EstadoColumn),Integer)
            End Get
            Set
                Me(Me.tableEmpleado.Cod_EstadoColumn) = value
            End Set
        End Property
        
        Public Property ContactoConCliente As Boolean
            Get
                Return CType(Me(Me.tableEmpleado.ContactoConClienteColumn),Boolean)
            End Get
            Set
                Me(Me.tableEmpleado.ContactoConClienteColumn) = value
            End Set
        End Property
        
        Public Property CuentaBancaria As String
            Get
                Try 
                    Return CType(Me(Me.tableEmpleado.CuentaBancariaColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEmpleado.CuentaBancariaColumn) = value
            End Set
        End Property
        
        Public Property id_usuario As String
            Get
                Try 
                    Return CType(Me(Me.tableEmpleado.id_usuarioColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEmpleado.id_usuarioColumn) = value
            End Set
        End Property
        
        Public Property Estado_EmpleadoRow As Estado_EmpleadoRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Estado_EmpleadoEmpleado")),Estado_EmpleadoRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Estado_EmpleadoEmpleado"))
            End Set
        End Property
        
        Public Property MonedaRow As MonedaRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("MonedaEmpleado")),MonedaRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("MonedaEmpleado"))
            End Set
        End Property
        
        Public Property DepartamentoRow As DepartamentoRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("DepartamentoEmpleado")),DepartamentoRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("DepartamentoEmpleado"))
            End Set
        End Property
        
        Public Property NacionalidadRow As NacionalidadRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("NacionalidadEmpleado")),NacionalidadRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("NacionalidadEmpleado"))
            End Set
        End Property
        
        Public Function IsCuentaBancariaNull() As Boolean
            Return Me.IsNull(Me.tableEmpleado.CuentaBancariaColumn)
        End Function
        
        Public Sub SetCuentaBancariaNull()
            Me(Me.tableEmpleado.CuentaBancariaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isid_usuarioNull() As Boolean
            Return Me.IsNull(Me.tableEmpleado.id_usuarioColumn)
        End Function
        
        Public Sub Setid_usuarioNull()
            Me(Me.tableEmpleado.id_usuarioColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetDistribucionContableRows() As DistribucionContableRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("EmpleadoDistribucionContable")),DistribucionContableRow())
        End Function
        
        Public Function GetEmpleado_LicenciasRows() As Empleado_LicenciasRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("EmpleadoEmpleado_Licencias")),Empleado_LicenciasRow())
        End Function
        
        Public Function GetEmpleado_AcademicoRows() As Empleado_AcademicoRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("EmpleadoEmpleado_Academico")),Empleado_AcademicoRow())
        End Function
        
        Public Function GetEmpleado_DeduccionesRows() As Empleado_DeduccionesRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("EmpleadoEmpleado_Deducciones")),Empleado_DeduccionesRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class EmpleadoRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As EmpleadoRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As EmpleadoRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As EmpleadoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
