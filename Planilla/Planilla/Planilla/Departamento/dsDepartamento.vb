'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class dsDepartamento
    Inherits DataSet
    
    Private tableDepartamento As DepartamentoDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Departamento")) Is Nothing) Then
                Me.Tables.Add(New DepartamentoDataTable(ds.Tables("Departamento")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Departamento As DepartamentoDataTable
        Get
            Return Me.tableDepartamento
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As dsDepartamento = CType(MyBase.Clone,dsDepartamento)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("Departamento")) Is Nothing) Then
            Me.Tables.Add(New DepartamentoDataTable(ds.Tables("Departamento")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableDepartamento = CType(Me.Tables("Departamento"),DepartamentoDataTable)
        If (Not (Me.tableDepartamento) Is Nothing) Then
            Me.tableDepartamento.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "dsDepartamento"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/dsDepartamento.xsd"
        Me.Locale = New System.Globalization.CultureInfo("es-CR")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableDepartamento = New DepartamentoDataTable
        Me.Tables.Add(Me.tableDepartamento)
    End Sub
    
    Private Function ShouldSerializeDepartamento() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub DepartamentoRowChangeEventHandler(ByVal sender As Object, ByVal e As DepartamentoRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DepartamentoDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnId As DataColumn
        
        Private columnDepartamento As DataColumn
        
        Private columnCuentaContableSalario As DataColumn
        
        Private columnCuentaContableCCSS As DataColumn
        
        Private columnCuentaContableAguinaldo As DataColumn
        
        Private columnCuentaContableVacaciones As DataColumn
        
        Private columnCuentaContableProvAguinaldo As DataColumn
        
        Private columnCuentaContableProvVacaciones As DataColumn
        
        Private columnCuentaContableRetencionesCCSS As DataColumn
        
        Friend Sub New()
            MyBase.New("Departamento")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IdColumn As DataColumn
            Get
                Return Me.columnId
            End Get
        End Property
        
        Friend ReadOnly Property DepartamentoColumn As DataColumn
            Get
                Return Me.columnDepartamento
            End Get
        End Property
        
        Friend ReadOnly Property CuentaContableSalarioColumn As DataColumn
            Get
                Return Me.columnCuentaContableSalario
            End Get
        End Property
        
        Friend ReadOnly Property CuentaContableCCSSColumn As DataColumn
            Get
                Return Me.columnCuentaContableCCSS
            End Get
        End Property
        
        Friend ReadOnly Property CuentaContableAguinaldoColumn As DataColumn
            Get
                Return Me.columnCuentaContableAguinaldo
            End Get
        End Property
        
        Friend ReadOnly Property CuentaContableVacacionesColumn As DataColumn
            Get
                Return Me.columnCuentaContableVacaciones
            End Get
        End Property
        
        Friend ReadOnly Property CuentaContableProvAguinaldoColumn As DataColumn
            Get
                Return Me.columnCuentaContableProvAguinaldo
            End Get
        End Property
        
        Friend ReadOnly Property CuentaContableProvVacacionesColumn As DataColumn
            Get
                Return Me.columnCuentaContableProvVacaciones
            End Get
        End Property
        
        Friend ReadOnly Property CuentaContableRetencionesCCSSColumn As DataColumn
            Get
                Return Me.columnCuentaContableRetencionesCCSS
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As DepartamentoRow
            Get
                Return CType(Me.Rows(index),DepartamentoRow)
            End Get
        End Property
        
        Public Event DepartamentoRowChanged As DepartamentoRowChangeEventHandler
        
        Public Event DepartamentoRowChanging As DepartamentoRowChangeEventHandler
        
        Public Event DepartamentoRowDeleted As DepartamentoRowChangeEventHandler
        
        Public Event DepartamentoRowDeleting As DepartamentoRowChangeEventHandler
        
        Public Overloads Sub AddDepartamentoRow(ByVal row As DepartamentoRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddDepartamentoRow(ByVal Departamento As String, ByVal CuentaContableSalario As String, ByVal CuentaContableCCSS As String, ByVal CuentaContableAguinaldo As String, ByVal CuentaContableVacaciones As String, ByVal CuentaContableProvAguinaldo As String, ByVal CuentaContableProvVacaciones As String, ByVal CuentaContableRetencionesCCSS As String) As DepartamentoRow
            Dim rowDepartamentoRow As DepartamentoRow = CType(Me.NewRow,DepartamentoRow)
            rowDepartamentoRow.ItemArray = New Object() {Nothing, Departamento, CuentaContableSalario, CuentaContableCCSS, CuentaContableAguinaldo, CuentaContableVacaciones, CuentaContableProvAguinaldo, CuentaContableProvVacaciones, CuentaContableRetencionesCCSS}
            Me.Rows.Add(rowDepartamentoRow)
            Return rowDepartamentoRow
        End Function
        
        Public Function FindById(ByVal Id As Integer) As DepartamentoRow
            Return CType(Me.Rows.Find(New Object() {Id}),DepartamentoRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As DepartamentoDataTable = CType(MyBase.Clone,DepartamentoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New DepartamentoDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnId = Me.Columns("Id")
            Me.columnDepartamento = Me.Columns("Departamento")
            Me.columnCuentaContableSalario = Me.Columns("CuentaContableSalario")
            Me.columnCuentaContableCCSS = Me.Columns("CuentaContableCCSS")
            Me.columnCuentaContableAguinaldo = Me.Columns("CuentaContableAguinaldo")
            Me.columnCuentaContableVacaciones = Me.Columns("CuentaContableVacaciones")
            Me.columnCuentaContableProvAguinaldo = Me.Columns("CuentaContableProvAguinaldo")
            Me.columnCuentaContableProvVacaciones = Me.Columns("CuentaContableProvVacaciones")
            Me.columnCuentaContableRetencionesCCSS = Me.Columns("CuentaContableRetencionesCCSS")
        End Sub
        
        Private Sub InitClass()
            Me.columnId = New DataColumn("Id", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId)
            Me.columnDepartamento = New DataColumn("Departamento", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDepartamento)
            Me.columnCuentaContableSalario = New DataColumn("CuentaContableSalario", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCuentaContableSalario)
            Me.columnCuentaContableCCSS = New DataColumn("CuentaContableCCSS", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCuentaContableCCSS)
            Me.columnCuentaContableAguinaldo = New DataColumn("CuentaContableAguinaldo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCuentaContableAguinaldo)
            Me.columnCuentaContableVacaciones = New DataColumn("CuentaContableVacaciones", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCuentaContableVacaciones)
            Me.columnCuentaContableProvAguinaldo = New DataColumn("CuentaContableProvAguinaldo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCuentaContableProvAguinaldo)
            Me.columnCuentaContableProvVacaciones = New DataColumn("CuentaContableProvVacaciones", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCuentaContableProvVacaciones)
            Me.columnCuentaContableRetencionesCCSS = New DataColumn("CuentaContableRetencionesCCSS", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCuentaContableRetencionesCCSS)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnId}, true))
            Me.columnId.AutoIncrement = true
            Me.columnId.AllowDBNull = false
            Me.columnId.ReadOnly = true
            Me.columnId.Unique = true
            Me.columnDepartamento.AllowDBNull = false
        End Sub
        
        Public Function NewDepartamentoRow() As DepartamentoRow
            Return CType(Me.NewRow,DepartamentoRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New DepartamentoRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(DepartamentoRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DepartamentoRowChangedEvent) Is Nothing) Then
                RaiseEvent DepartamentoRowChanged(Me, New DepartamentoRowChangeEvent(CType(e.Row,DepartamentoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DepartamentoRowChangingEvent) Is Nothing) Then
                RaiseEvent DepartamentoRowChanging(Me, New DepartamentoRowChangeEvent(CType(e.Row,DepartamentoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DepartamentoRowDeletedEvent) Is Nothing) Then
                RaiseEvent DepartamentoRowDeleted(Me, New DepartamentoRowChangeEvent(CType(e.Row,DepartamentoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DepartamentoRowDeletingEvent) Is Nothing) Then
                RaiseEvent DepartamentoRowDeleting(Me, New DepartamentoRowChangeEvent(CType(e.Row,DepartamentoRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveDepartamentoRow(ByVal row As DepartamentoRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DepartamentoRow
        Inherits DataRow
        
        Private tableDepartamento As DepartamentoDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableDepartamento = CType(Me.Table,DepartamentoDataTable)
        End Sub
        
        Public Property Id As Integer
            Get
                Return CType(Me(Me.tableDepartamento.IdColumn),Integer)
            End Get
            Set
                Me(Me.tableDepartamento.IdColumn) = value
            End Set
        End Property
        
        Public Property Departamento As String
            Get
                Return CType(Me(Me.tableDepartamento.DepartamentoColumn),String)
            End Get
            Set
                Me(Me.tableDepartamento.DepartamentoColumn) = value
            End Set
        End Property
        
        Public Property CuentaContableSalario As String
            Get
                Try 
                    Return CType(Me(Me.tableDepartamento.CuentaContableSalarioColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDepartamento.CuentaContableSalarioColumn) = value
            End Set
        End Property
        
        Public Property CuentaContableCCSS As String
            Get
                Try 
                    Return CType(Me(Me.tableDepartamento.CuentaContableCCSSColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDepartamento.CuentaContableCCSSColumn) = value
            End Set
        End Property
        
        Public Property CuentaContableAguinaldo As String
            Get
                Try 
                    Return CType(Me(Me.tableDepartamento.CuentaContableAguinaldoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDepartamento.CuentaContableAguinaldoColumn) = value
            End Set
        End Property
        
        Public Property CuentaContableVacaciones As String
            Get
                Try 
                    Return CType(Me(Me.tableDepartamento.CuentaContableVacacionesColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDepartamento.CuentaContableVacacionesColumn) = value
            End Set
        End Property
        
        Public Property CuentaContableProvAguinaldo As String
            Get
                Try 
                    Return CType(Me(Me.tableDepartamento.CuentaContableProvAguinaldoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDepartamento.CuentaContableProvAguinaldoColumn) = value
            End Set
        End Property
        
        Public Property CuentaContableProvVacaciones As String
            Get
                Try 
                    Return CType(Me(Me.tableDepartamento.CuentaContableProvVacacionesColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDepartamento.CuentaContableProvVacacionesColumn) = value
            End Set
        End Property
        
        Public Property CuentaContableRetencionesCCSS As String
            Get
                Try 
                    Return CType(Me(Me.tableDepartamento.CuentaContableRetencionesCCSSColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDepartamento.CuentaContableRetencionesCCSSColumn) = value
            End Set
        End Property
        
        Public Function IsCuentaContableSalarioNull() As Boolean
            Return Me.IsNull(Me.tableDepartamento.CuentaContableSalarioColumn)
        End Function
        
        Public Sub SetCuentaContableSalarioNull()
            Me(Me.tableDepartamento.CuentaContableSalarioColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCuentaContableCCSSNull() As Boolean
            Return Me.IsNull(Me.tableDepartamento.CuentaContableCCSSColumn)
        End Function
        
        Public Sub SetCuentaContableCCSSNull()
            Me(Me.tableDepartamento.CuentaContableCCSSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCuentaContableAguinaldoNull() As Boolean
            Return Me.IsNull(Me.tableDepartamento.CuentaContableAguinaldoColumn)
        End Function
        
        Public Sub SetCuentaContableAguinaldoNull()
            Me(Me.tableDepartamento.CuentaContableAguinaldoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCuentaContableVacacionesNull() As Boolean
            Return Me.IsNull(Me.tableDepartamento.CuentaContableVacacionesColumn)
        End Function
        
        Public Sub SetCuentaContableVacacionesNull()
            Me(Me.tableDepartamento.CuentaContableVacacionesColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCuentaContableProvAguinaldoNull() As Boolean
            Return Me.IsNull(Me.tableDepartamento.CuentaContableProvAguinaldoColumn)
        End Function
        
        Public Sub SetCuentaContableProvAguinaldoNull()
            Me(Me.tableDepartamento.CuentaContableProvAguinaldoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCuentaContableProvVacacionesNull() As Boolean
            Return Me.IsNull(Me.tableDepartamento.CuentaContableProvVacacionesColumn)
        End Function
        
        Public Sub SetCuentaContableProvVacacionesNull()
            Me(Me.tableDepartamento.CuentaContableProvVacacionesColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCuentaContableRetencionesCCSSNull() As Boolean
            Return Me.IsNull(Me.tableDepartamento.CuentaContableRetencionesCCSSColumn)
        End Function
        
        Public Sub SetCuentaContableRetencionesCCSSNull()
            Me(Me.tableDepartamento.CuentaContableRetencionesCCSSColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DepartamentoRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As DepartamentoRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As DepartamentoRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As DepartamentoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
