'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2032
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DataSetParametro
    Inherits DataSet
    
    Private tableParametroRenta As ParametroRentaDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("ParametroRenta")) Is Nothing) Then
                Me.Tables.Add(New ParametroRentaDataTable(ds.Tables("ParametroRenta")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ParametroRenta As ParametroRentaDataTable
        Get
            Return Me.tableParametroRenta
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DataSetParametro = CType(MyBase.Clone,DataSetParametro)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("ParametroRenta")) Is Nothing) Then
            Me.Tables.Add(New ParametroRentaDataTable(ds.Tables("ParametroRenta")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableParametroRenta = CType(Me.Tables("ParametroRenta"),ParametroRentaDataTable)
        If (Not (Me.tableParametroRenta) Is Nothing) Then
            Me.tableParametroRenta.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DataSetParametro"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DataSetParametro.xsd"
        Me.Locale = New System.Globalization.CultureInfo("es-ES")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableParametroRenta = New ParametroRentaDataTable
        Me.Tables.Add(Me.tableParametroRenta)
    End Sub
    
    Private Function ShouldSerializeParametroRenta() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub ParametroRentaRowChangeEventHandler(ByVal sender As Object, ByVal e As ParametroRentaRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ParametroRentaDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnId As DataColumn
        
        Private columnMontoExento As DataColumn
        
        Private columnMontoDe As DataColumn
        
        Private columnMontoHasta As DataColumn
        
        Private columnPorcentaje1 As DataColumn
        
        Private columnMontoEnAdelante As DataColumn
        
        Private columnPorcentaje2 As DataColumn
        
        Private columnEsposa As DataColumn
        
        Private columnHijo As DataColumn
        
        Friend Sub New()
            MyBase.New("ParametroRenta")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IdColumn As DataColumn
            Get
                Return Me.columnId
            End Get
        End Property
        
        Friend ReadOnly Property MontoExentoColumn As DataColumn
            Get
                Return Me.columnMontoExento
            End Get
        End Property
        
        Friend ReadOnly Property MontoDeColumn As DataColumn
            Get
                Return Me.columnMontoDe
            End Get
        End Property
        
        Friend ReadOnly Property MontoHastaColumn As DataColumn
            Get
                Return Me.columnMontoHasta
            End Get
        End Property
        
        Friend ReadOnly Property Porcentaje1Column As DataColumn
            Get
                Return Me.columnPorcentaje1
            End Get
        End Property
        
        Friend ReadOnly Property MontoEnAdelanteColumn As DataColumn
            Get
                Return Me.columnMontoEnAdelante
            End Get
        End Property
        
        Friend ReadOnly Property Porcentaje2Column As DataColumn
            Get
                Return Me.columnPorcentaje2
            End Get
        End Property
        
        Friend ReadOnly Property EsposaColumn As DataColumn
            Get
                Return Me.columnEsposa
            End Get
        End Property
        
        Friend ReadOnly Property HijoColumn As DataColumn
            Get
                Return Me.columnHijo
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ParametroRentaRow
            Get
                Return CType(Me.Rows(index),ParametroRentaRow)
            End Get
        End Property
        
        Public Event ParametroRentaRowChanged As ParametroRentaRowChangeEventHandler
        
        Public Event ParametroRentaRowChanging As ParametroRentaRowChangeEventHandler
        
        Public Event ParametroRentaRowDeleted As ParametroRentaRowChangeEventHandler
        
        Public Event ParametroRentaRowDeleting As ParametroRentaRowChangeEventHandler
        
        Public Overloads Sub AddParametroRentaRow(ByVal row As ParametroRentaRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddParametroRentaRow(ByVal MontoExento As Double, ByVal MontoDe As Double, ByVal MontoHasta As Double, ByVal Porcentaje1 As Double, ByVal MontoEnAdelante As Double, ByVal Porcentaje2 As Double, ByVal Esposa As Double, ByVal Hijo As Double) As ParametroRentaRow
            Dim rowParametroRentaRow As ParametroRentaRow = CType(Me.NewRow,ParametroRentaRow)
            rowParametroRentaRow.ItemArray = New Object() {Nothing, MontoExento, MontoDe, MontoHasta, Porcentaje1, MontoEnAdelante, Porcentaje2, Esposa, Hijo}
            Me.Rows.Add(rowParametroRentaRow)
            Return rowParametroRentaRow
        End Function
        
        Public Function FindById(ByVal Id As Integer) As ParametroRentaRow
            Return CType(Me.Rows.Find(New Object() {Id}),ParametroRentaRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ParametroRentaDataTable = CType(MyBase.Clone,ParametroRentaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ParametroRentaDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnId = Me.Columns("Id")
            Me.columnMontoExento = Me.Columns("MontoExento")
            Me.columnMontoDe = Me.Columns("MontoDe")
            Me.columnMontoHasta = Me.Columns("MontoHasta")
            Me.columnPorcentaje1 = Me.Columns("Porcentaje1")
            Me.columnMontoEnAdelante = Me.Columns("MontoEnAdelante")
            Me.columnPorcentaje2 = Me.Columns("Porcentaje2")
            Me.columnEsposa = Me.Columns("Esposa")
            Me.columnHijo = Me.Columns("Hijo")
        End Sub
        
        Private Sub InitClass()
            Me.columnId = New DataColumn("Id", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId)
            Me.columnMontoExento = New DataColumn("MontoExento", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMontoExento)
            Me.columnMontoDe = New DataColumn("MontoDe", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMontoDe)
            Me.columnMontoHasta = New DataColumn("MontoHasta", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMontoHasta)
            Me.columnPorcentaje1 = New DataColumn("Porcentaje1", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPorcentaje1)
            Me.columnMontoEnAdelante = New DataColumn("MontoEnAdelante", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMontoEnAdelante)
            Me.columnPorcentaje2 = New DataColumn("Porcentaje2", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPorcentaje2)
            Me.columnEsposa = New DataColumn("Esposa", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEsposa)
            Me.columnHijo = New DataColumn("Hijo", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHijo)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnId}, true))
            Me.columnId.AutoIncrement = true
            Me.columnId.AllowDBNull = false
            Me.columnId.ReadOnly = true
            Me.columnId.Unique = true
            Me.columnMontoExento.AllowDBNull = false
            Me.columnMontoDe.AllowDBNull = false
            Me.columnMontoHasta.AllowDBNull = false
            Me.columnPorcentaje1.AllowDBNull = false
            Me.columnMontoEnAdelante.AllowDBNull = false
            Me.columnPorcentaje2.AllowDBNull = false
            Me.columnEsposa.AllowDBNull = false
            Me.columnHijo.AllowDBNull = false
        End Sub
        
        Public Function NewParametroRentaRow() As ParametroRentaRow
            Return CType(Me.NewRow,ParametroRentaRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ParametroRentaRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ParametroRentaRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ParametroRentaRowChangedEvent) Is Nothing) Then
                RaiseEvent ParametroRentaRowChanged(Me, New ParametroRentaRowChangeEvent(CType(e.Row,ParametroRentaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ParametroRentaRowChangingEvent) Is Nothing) Then
                RaiseEvent ParametroRentaRowChanging(Me, New ParametroRentaRowChangeEvent(CType(e.Row,ParametroRentaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ParametroRentaRowDeletedEvent) Is Nothing) Then
                RaiseEvent ParametroRentaRowDeleted(Me, New ParametroRentaRowChangeEvent(CType(e.Row,ParametroRentaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ParametroRentaRowDeletingEvent) Is Nothing) Then
                RaiseEvent ParametroRentaRowDeleting(Me, New ParametroRentaRowChangeEvent(CType(e.Row,ParametroRentaRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveParametroRentaRow(ByVal row As ParametroRentaRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ParametroRentaRow
        Inherits DataRow
        
        Private tableParametroRenta As ParametroRentaDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableParametroRenta = CType(Me.Table,ParametroRentaDataTable)
        End Sub
        
        Public Property Id As Integer
            Get
                Return CType(Me(Me.tableParametroRenta.IdColumn),Integer)
            End Get
            Set
                Me(Me.tableParametroRenta.IdColumn) = value
            End Set
        End Property
        
        Public Property MontoExento As Double
            Get
                Return CType(Me(Me.tableParametroRenta.MontoExentoColumn),Double)
            End Get
            Set
                Me(Me.tableParametroRenta.MontoExentoColumn) = value
            End Set
        End Property
        
        Public Property MontoDe As Double
            Get
                Return CType(Me(Me.tableParametroRenta.MontoDeColumn),Double)
            End Get
            Set
                Me(Me.tableParametroRenta.MontoDeColumn) = value
            End Set
        End Property
        
        Public Property MontoHasta As Double
            Get
                Return CType(Me(Me.tableParametroRenta.MontoHastaColumn),Double)
            End Get
            Set
                Me(Me.tableParametroRenta.MontoHastaColumn) = value
            End Set
        End Property
        
        Public Property Porcentaje1 As Double
            Get
                Return CType(Me(Me.tableParametroRenta.Porcentaje1Column),Double)
            End Get
            Set
                Me(Me.tableParametroRenta.Porcentaje1Column) = value
            End Set
        End Property
        
        Public Property MontoEnAdelante As Double
            Get
                Return CType(Me(Me.tableParametroRenta.MontoEnAdelanteColumn),Double)
            End Get
            Set
                Me(Me.tableParametroRenta.MontoEnAdelanteColumn) = value
            End Set
        End Property
        
        Public Property Porcentaje2 As Double
            Get
                Return CType(Me(Me.tableParametroRenta.Porcentaje2Column),Double)
            End Get
            Set
                Me(Me.tableParametroRenta.Porcentaje2Column) = value
            End Set
        End Property
        
        Public Property Esposa As Double
            Get
                Return CType(Me(Me.tableParametroRenta.EsposaColumn),Double)
            End Get
            Set
                Me(Me.tableParametroRenta.EsposaColumn) = value
            End Set
        End Property
        
        Public Property Hijo As Double
            Get
                Return CType(Me(Me.tableParametroRenta.HijoColumn),Double)
            End Get
            Set
                Me(Me.tableParametroRenta.HijoColumn) = value
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ParametroRentaRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ParametroRentaRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ParametroRentaRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ParametroRentaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
