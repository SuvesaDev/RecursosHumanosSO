'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2032
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DsReporte
    Inherits DataSet
    
    Private tablePlanilla As PlanillaDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Planilla")) Is Nothing) Then
                Me.Tables.Add(New PlanillaDataTable(ds.Tables("Planilla")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Planilla As PlanillaDataTable
        Get
            Return Me.tablePlanilla
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DsReporte = CType(MyBase.Clone,DsReporte)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("Planilla")) Is Nothing) Then
            Me.Tables.Add(New PlanillaDataTable(ds.Tables("Planilla")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tablePlanilla = CType(Me.Tables("Planilla"),PlanillaDataTable)
        If (Not (Me.tablePlanilla) Is Nothing) Then
            Me.tablePlanilla.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DsReporte"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DsReporte.xsd"
        Me.Locale = New System.Globalization.CultureInfo("es-MX")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tablePlanilla = New PlanillaDataTable
        Me.Tables.Add(Me.tablePlanilla)
    End Sub
    
    Private Function ShouldSerializePlanilla() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub PlanillaRowChangeEventHandler(ByVal sender As Object, ByVal e As PlanillaRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PlanillaDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnId_Planilla As DataColumn
        
        Private columnFecha As DataColumn
        
        Private columnFechaInicial As DataColumn
        
        Private columnFechaFinal As DataColumn
        
        Private columnCierreMes As DataColumn
        
        Private columnCed_Usuario As DataColumn
        
        Private columnNombre_Usuario As DataColumn
        
        Private columnAnulado As DataColumn
        
        Friend Sub New()
            MyBase.New("Planilla")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property Id_PlanillaColumn As DataColumn
            Get
                Return Me.columnId_Planilla
            End Get
        End Property
        
        Friend ReadOnly Property FechaColumn As DataColumn
            Get
                Return Me.columnFecha
            End Get
        End Property
        
        Friend ReadOnly Property FechaInicialColumn As DataColumn
            Get
                Return Me.columnFechaInicial
            End Get
        End Property
        
        Friend ReadOnly Property FechaFinalColumn As DataColumn
            Get
                Return Me.columnFechaFinal
            End Get
        End Property
        
        Friend ReadOnly Property CierreMesColumn As DataColumn
            Get
                Return Me.columnCierreMes
            End Get
        End Property
        
        Friend ReadOnly Property Ced_UsuarioColumn As DataColumn
            Get
                Return Me.columnCed_Usuario
            End Get
        End Property
        
        Friend ReadOnly Property Nombre_UsuarioColumn As DataColumn
            Get
                Return Me.columnNombre_Usuario
            End Get
        End Property
        
        Friend ReadOnly Property AnuladoColumn As DataColumn
            Get
                Return Me.columnAnulado
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PlanillaRow
            Get
                Return CType(Me.Rows(index),PlanillaRow)
            End Get
        End Property
        
        Public Event PlanillaRowChanged As PlanillaRowChangeEventHandler
        
        Public Event PlanillaRowChanging As PlanillaRowChangeEventHandler
        
        Public Event PlanillaRowDeleted As PlanillaRowChangeEventHandler
        
        Public Event PlanillaRowDeleting As PlanillaRowChangeEventHandler
        
        Public Overloads Sub AddPlanillaRow(ByVal row As PlanillaRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPlanillaRow(ByVal Id_Planilla As Long, ByVal Fecha As Date, ByVal FechaInicial As Date, ByVal FechaFinal As Date, ByVal CierreMes As Boolean, ByVal Ced_Usuario As String, ByVal Nombre_Usuario As String, ByVal Anulado As Boolean) As PlanillaRow
            Dim rowPlanillaRow As PlanillaRow = CType(Me.NewRow,PlanillaRow)
            rowPlanillaRow.ItemArray = New Object() {Id_Planilla, Fecha, FechaInicial, FechaFinal, CierreMes, Ced_Usuario, Nombre_Usuario, Anulado}
            Me.Rows.Add(rowPlanillaRow)
            Return rowPlanillaRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PlanillaDataTable = CType(MyBase.Clone,PlanillaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PlanillaDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnId_Planilla = Me.Columns("Id_Planilla")
            Me.columnFecha = Me.Columns("Fecha")
            Me.columnFechaInicial = Me.Columns("FechaInicial")
            Me.columnFechaFinal = Me.Columns("FechaFinal")
            Me.columnCierreMes = Me.Columns("CierreMes")
            Me.columnCed_Usuario = Me.Columns("Ced_Usuario")
            Me.columnNombre_Usuario = Me.Columns("Nombre_Usuario")
            Me.columnAnulado = Me.Columns("Anulado")
        End Sub
        
        Private Sub InitClass()
            Me.columnId_Planilla = New DataColumn("Id_Planilla", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId_Planilla)
            Me.columnFecha = New DataColumn("Fecha", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFecha)
            Me.columnFechaInicial = New DataColumn("FechaInicial", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFechaInicial)
            Me.columnFechaFinal = New DataColumn("FechaFinal", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFechaFinal)
            Me.columnCierreMes = New DataColumn("CierreMes", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCierreMes)
            Me.columnCed_Usuario = New DataColumn("Ced_Usuario", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCed_Usuario)
            Me.columnNombre_Usuario = New DataColumn("Nombre_Usuario", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNombre_Usuario)
            Me.columnAnulado = New DataColumn("Anulado", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAnulado)
            Me.columnId_Planilla.AllowDBNull = false
            Me.columnFecha.AllowDBNull = false
            Me.columnFechaInicial.AllowDBNull = false
            Me.columnFechaFinal.AllowDBNull = false
            Me.columnCierreMes.AllowDBNull = false
            Me.columnCed_Usuario.AllowDBNull = false
            Me.columnNombre_Usuario.AllowDBNull = false
            Me.columnAnulado.AllowDBNull = false
        End Sub
        
        Public Function NewPlanillaRow() As PlanillaRow
            Return CType(Me.NewRow,PlanillaRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PlanillaRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PlanillaRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PlanillaRowChangedEvent) Is Nothing) Then
                RaiseEvent PlanillaRowChanged(Me, New PlanillaRowChangeEvent(CType(e.Row,PlanillaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PlanillaRowChangingEvent) Is Nothing) Then
                RaiseEvent PlanillaRowChanging(Me, New PlanillaRowChangeEvent(CType(e.Row,PlanillaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PlanillaRowDeletedEvent) Is Nothing) Then
                RaiseEvent PlanillaRowDeleted(Me, New PlanillaRowChangeEvent(CType(e.Row,PlanillaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PlanillaRowDeletingEvent) Is Nothing) Then
                RaiseEvent PlanillaRowDeleting(Me, New PlanillaRowChangeEvent(CType(e.Row,PlanillaRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePlanillaRow(ByVal row As PlanillaRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PlanillaRow
        Inherits DataRow
        
        Private tablePlanilla As PlanillaDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePlanilla = CType(Me.Table,PlanillaDataTable)
        End Sub
        
        Public Property Id_Planilla As Long
            Get
                Return CType(Me(Me.tablePlanilla.Id_PlanillaColumn),Long)
            End Get
            Set
                Me(Me.tablePlanilla.Id_PlanillaColumn) = value
            End Set
        End Property
        
        Public Property Fecha As Date
            Get
                Return CType(Me(Me.tablePlanilla.FechaColumn),Date)
            End Get
            Set
                Me(Me.tablePlanilla.FechaColumn) = value
            End Set
        End Property
        
        Public Property FechaInicial As Date
            Get
                Return CType(Me(Me.tablePlanilla.FechaInicialColumn),Date)
            End Get
            Set
                Me(Me.tablePlanilla.FechaInicialColumn) = value
            End Set
        End Property
        
        Public Property FechaFinal As Date
            Get
                Return CType(Me(Me.tablePlanilla.FechaFinalColumn),Date)
            End Get
            Set
                Me(Me.tablePlanilla.FechaFinalColumn) = value
            End Set
        End Property
        
        Public Property CierreMes As Boolean
            Get
                Return CType(Me(Me.tablePlanilla.CierreMesColumn),Boolean)
            End Get
            Set
                Me(Me.tablePlanilla.CierreMesColumn) = value
            End Set
        End Property
        
        Public Property Ced_Usuario As String
            Get
                Return CType(Me(Me.tablePlanilla.Ced_UsuarioColumn),String)
            End Get
            Set
                Me(Me.tablePlanilla.Ced_UsuarioColumn) = value
            End Set
        End Property
        
        Public Property Nombre_Usuario As String
            Get
                Return CType(Me(Me.tablePlanilla.Nombre_UsuarioColumn),String)
            End Get
            Set
                Me(Me.tablePlanilla.Nombre_UsuarioColumn) = value
            End Set
        End Property
        
        Public Property Anulado As Boolean
            Get
                Return CType(Me(Me.tablePlanilla.AnuladoColumn),Boolean)
            End Get
            Set
                Me(Me.tablePlanilla.AnuladoColumn) = value
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PlanillaRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PlanillaRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PlanillaRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PlanillaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
