'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2032
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DsEmpleadoHoras
    Inherits DataSet
    
    Private tableEmpleado As EmpleadoDataTable
    
    Private tableEmpleado_Proyecto As Empleado_ProyectoDataTable
    
    Private tableHorasTrabajadas As HorasTrabajadasDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Empleado")) Is Nothing) Then
                Me.Tables.Add(New EmpleadoDataTable(ds.Tables("Empleado")))
            End If
            If (Not (ds.Tables("Empleado_Proyecto")) Is Nothing) Then
                Me.Tables.Add(New Empleado_ProyectoDataTable(ds.Tables("Empleado_Proyecto")))
            End If
            If (Not (ds.Tables("HorasTrabajadas")) Is Nothing) Then
                Me.Tables.Add(New HorasTrabajadasDataTable(ds.Tables("HorasTrabajadas")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Empleado As EmpleadoDataTable
        Get
            Return Me.tableEmpleado
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Empleado_Proyecto As Empleado_ProyectoDataTable
        Get
            Return Me.tableEmpleado_Proyecto
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property HorasTrabajadas As HorasTrabajadasDataTable
        Get
            Return Me.tableHorasTrabajadas
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DsEmpleadoHoras = CType(MyBase.Clone,DsEmpleadoHoras)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("Empleado")) Is Nothing) Then
            Me.Tables.Add(New EmpleadoDataTable(ds.Tables("Empleado")))
        End If
        If (Not (ds.Tables("Empleado_Proyecto")) Is Nothing) Then
            Me.Tables.Add(New Empleado_ProyectoDataTable(ds.Tables("Empleado_Proyecto")))
        End If
        If (Not (ds.Tables("HorasTrabajadas")) Is Nothing) Then
            Me.Tables.Add(New HorasTrabajadasDataTable(ds.Tables("HorasTrabajadas")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableEmpleado = CType(Me.Tables("Empleado"),EmpleadoDataTable)
        If (Not (Me.tableEmpleado) Is Nothing) Then
            Me.tableEmpleado.InitVars
        End If
        Me.tableEmpleado_Proyecto = CType(Me.Tables("Empleado_Proyecto"),Empleado_ProyectoDataTable)
        If (Not (Me.tableEmpleado_Proyecto) Is Nothing) Then
            Me.tableEmpleado_Proyecto.InitVars
        End If
        Me.tableHorasTrabajadas = CType(Me.Tables("HorasTrabajadas"),HorasTrabajadasDataTable)
        If (Not (Me.tableHorasTrabajadas) Is Nothing) Then
            Me.tableHorasTrabajadas.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DsEmpleadoHoras"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DsEmpleadoHoras.xsd"
        Me.Locale = New System.Globalization.CultureInfo("es-MX")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableEmpleado = New EmpleadoDataTable
        Me.Tables.Add(Me.tableEmpleado)
        Me.tableEmpleado_Proyecto = New Empleado_ProyectoDataTable
        Me.Tables.Add(Me.tableEmpleado_Proyecto)
        Me.tableHorasTrabajadas = New HorasTrabajadasDataTable
        Me.Tables.Add(Me.tableHorasTrabajadas)
    End Sub
    
    Private Function ShouldSerializeEmpleado() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeEmpleado_Proyecto() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeHorasTrabajadas() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub EmpleadoRowChangeEventHandler(ByVal sender As Object, ByVal e As EmpleadoRowChangeEvent)
    
    Public Delegate Sub Empleado_ProyectoRowChangeEventHandler(ByVal sender As Object, ByVal e As Empleado_ProyectoRowChangeEvent)
    
    Public Delegate Sub HorasTrabajadasRowChangeEventHandler(ByVal sender As Object, ByVal e As HorasTrabajadasRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class EmpleadoDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnIdentificacion As DataColumn
        
        Private columnNombre As DataColumn
        
        Friend Sub New()
            MyBase.New("Empleado")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IdentificacionColumn As DataColumn
            Get
                Return Me.columnIdentificacion
            End Get
        End Property
        
        Friend ReadOnly Property NombreColumn As DataColumn
            Get
                Return Me.columnNombre
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As EmpleadoRow
            Get
                Return CType(Me.Rows(index),EmpleadoRow)
            End Get
        End Property
        
        Public Event EmpleadoRowChanged As EmpleadoRowChangeEventHandler
        
        Public Event EmpleadoRowChanging As EmpleadoRowChangeEventHandler
        
        Public Event EmpleadoRowDeleted As EmpleadoRowChangeEventHandler
        
        Public Event EmpleadoRowDeleting As EmpleadoRowChangeEventHandler
        
        Public Overloads Sub AddEmpleadoRow(ByVal row As EmpleadoRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddEmpleadoRow(ByVal Identificacion As String, ByVal Nombre As String) As EmpleadoRow
            Dim rowEmpleadoRow As EmpleadoRow = CType(Me.NewRow,EmpleadoRow)
            rowEmpleadoRow.ItemArray = New Object() {Identificacion, Nombre}
            Me.Rows.Add(rowEmpleadoRow)
            Return rowEmpleadoRow
        End Function
        
        Public Function FindByIdentificacion(ByVal Identificacion As String) As EmpleadoRow
            Return CType(Me.Rows.Find(New Object() {Identificacion}),EmpleadoRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As EmpleadoDataTable = CType(MyBase.Clone,EmpleadoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New EmpleadoDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnIdentificacion = Me.Columns("Identificacion")
            Me.columnNombre = Me.Columns("Nombre")
        End Sub
        
        Private Sub InitClass()
            Me.columnIdentificacion = New DataColumn("Identificacion", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdentificacion)
            Me.columnNombre = New DataColumn("Nombre", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNombre)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnIdentificacion}, true))
            Me.columnIdentificacion.AllowDBNull = false
            Me.columnIdentificacion.Unique = true
            Me.columnNombre.AllowDBNull = false
        End Sub
        
        Public Function NewEmpleadoRow() As EmpleadoRow
            Return CType(Me.NewRow,EmpleadoRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New EmpleadoRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(EmpleadoRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EmpleadoRowChangedEvent) Is Nothing) Then
                RaiseEvent EmpleadoRowChanged(Me, New EmpleadoRowChangeEvent(CType(e.Row,EmpleadoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EmpleadoRowChangingEvent) Is Nothing) Then
                RaiseEvent EmpleadoRowChanging(Me, New EmpleadoRowChangeEvent(CType(e.Row,EmpleadoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EmpleadoRowDeletedEvent) Is Nothing) Then
                RaiseEvent EmpleadoRowDeleted(Me, New EmpleadoRowChangeEvent(CType(e.Row,EmpleadoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EmpleadoRowDeletingEvent) Is Nothing) Then
                RaiseEvent EmpleadoRowDeleting(Me, New EmpleadoRowChangeEvent(CType(e.Row,EmpleadoRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveEmpleadoRow(ByVal row As EmpleadoRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class EmpleadoRow
        Inherits DataRow
        
        Private tableEmpleado As EmpleadoDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableEmpleado = CType(Me.Table,EmpleadoDataTable)
        End Sub
        
        Public Property Identificacion As String
            Get
                Return CType(Me(Me.tableEmpleado.IdentificacionColumn),String)
            End Get
            Set
                Me(Me.tableEmpleado.IdentificacionColumn) = value
            End Set
        End Property
        
        Public Property Nombre As String
            Get
                Return CType(Me(Me.tableEmpleado.NombreColumn),String)
            End Get
            Set
                Me(Me.tableEmpleado.NombreColumn) = value
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class EmpleadoRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As EmpleadoRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As EmpleadoRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As EmpleadoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Empleado_ProyectoDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnId As DataColumn
        
        Private columnIdentificacion As DataColumn
        
        Private columnId_Proyecto As DataColumn
        
        Friend Sub New()
            MyBase.New("Empleado_Proyecto")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IdColumn As DataColumn
            Get
                Return Me.columnId
            End Get
        End Property
        
        Friend ReadOnly Property IdentificacionColumn As DataColumn
            Get
                Return Me.columnIdentificacion
            End Get
        End Property
        
        Friend ReadOnly Property Id_ProyectoColumn As DataColumn
            Get
                Return Me.columnId_Proyecto
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Empleado_ProyectoRow
            Get
                Return CType(Me.Rows(index),Empleado_ProyectoRow)
            End Get
        End Property
        
        Public Event Empleado_ProyectoRowChanged As Empleado_ProyectoRowChangeEventHandler
        
        Public Event Empleado_ProyectoRowChanging As Empleado_ProyectoRowChangeEventHandler
        
        Public Event Empleado_ProyectoRowDeleted As Empleado_ProyectoRowChangeEventHandler
        
        Public Event Empleado_ProyectoRowDeleting As Empleado_ProyectoRowChangeEventHandler
        
        Public Overloads Sub AddEmpleado_ProyectoRow(ByVal row As Empleado_ProyectoRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddEmpleado_ProyectoRow(ByVal Identificacion As String, ByVal Id_Proyecto As Integer) As Empleado_ProyectoRow
            Dim rowEmpleado_ProyectoRow As Empleado_ProyectoRow = CType(Me.NewRow,Empleado_ProyectoRow)
            rowEmpleado_ProyectoRow.ItemArray = New Object() {Nothing, Identificacion, Id_Proyecto}
            Me.Rows.Add(rowEmpleado_ProyectoRow)
            Return rowEmpleado_ProyectoRow
        End Function
        
        Public Function FindById(ByVal Id As Long) As Empleado_ProyectoRow
            Return CType(Me.Rows.Find(New Object() {Id}),Empleado_ProyectoRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Empleado_ProyectoDataTable = CType(MyBase.Clone,Empleado_ProyectoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Empleado_ProyectoDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnId = Me.Columns("Id")
            Me.columnIdentificacion = Me.Columns("Identificacion")
            Me.columnId_Proyecto = Me.Columns("Id_Proyecto")
        End Sub
        
        Private Sub InitClass()
            Me.columnId = New DataColumn("Id", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId)
            Me.columnIdentificacion = New DataColumn("Identificacion", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdentificacion)
            Me.columnId_Proyecto = New DataColumn("Id_Proyecto", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId_Proyecto)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnId}, true))
            Me.columnId.AutoIncrement = true
            Me.columnId.AllowDBNull = false
            Me.columnId.ReadOnly = true
            Me.columnId.Unique = true
            Me.columnIdentificacion.AllowDBNull = false
            Me.columnId_Proyecto.AllowDBNull = false
        End Sub
        
        Public Function NewEmpleado_ProyectoRow() As Empleado_ProyectoRow
            Return CType(Me.NewRow,Empleado_ProyectoRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Empleado_ProyectoRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Empleado_ProyectoRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Empleado_ProyectoRowChangedEvent) Is Nothing) Then
                RaiseEvent Empleado_ProyectoRowChanged(Me, New Empleado_ProyectoRowChangeEvent(CType(e.Row,Empleado_ProyectoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Empleado_ProyectoRowChangingEvent) Is Nothing) Then
                RaiseEvent Empleado_ProyectoRowChanging(Me, New Empleado_ProyectoRowChangeEvent(CType(e.Row,Empleado_ProyectoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Empleado_ProyectoRowDeletedEvent) Is Nothing) Then
                RaiseEvent Empleado_ProyectoRowDeleted(Me, New Empleado_ProyectoRowChangeEvent(CType(e.Row,Empleado_ProyectoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Empleado_ProyectoRowDeletingEvent) Is Nothing) Then
                RaiseEvent Empleado_ProyectoRowDeleting(Me, New Empleado_ProyectoRowChangeEvent(CType(e.Row,Empleado_ProyectoRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveEmpleado_ProyectoRow(ByVal row As Empleado_ProyectoRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Empleado_ProyectoRow
        Inherits DataRow
        
        Private tableEmpleado_Proyecto As Empleado_ProyectoDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableEmpleado_Proyecto = CType(Me.Table,Empleado_ProyectoDataTable)
        End Sub
        
        Public Property Id As Long
            Get
                Return CType(Me(Me.tableEmpleado_Proyecto.IdColumn),Long)
            End Get
            Set
                Me(Me.tableEmpleado_Proyecto.IdColumn) = value
            End Set
        End Property
        
        Public Property Identificacion As String
            Get
                Return CType(Me(Me.tableEmpleado_Proyecto.IdentificacionColumn),String)
            End Get
            Set
                Me(Me.tableEmpleado_Proyecto.IdentificacionColumn) = value
            End Set
        End Property
        
        Public Property Id_Proyecto As Integer
            Get
                Return CType(Me(Me.tableEmpleado_Proyecto.Id_ProyectoColumn),Integer)
            End Get
            Set
                Me(Me.tableEmpleado_Proyecto.Id_ProyectoColumn) = value
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Empleado_ProyectoRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Empleado_ProyectoRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Empleado_ProyectoRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Empleado_ProyectoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class HorasTrabajadasDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnId As DataColumn
        
        Private columnIdentificacion As DataColumn
        
        Private columnFecha As DataColumn
        
        Private columnHoraOrdinaria As DataColumn
        
        Private columnHoraExtra As DataColumn
        
        Private columnHoraDoble As DataColumn
        
        Private columnId_Proyecto As DataColumn
        
        Friend Sub New()
            MyBase.New("HorasTrabajadas")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IdColumn As DataColumn
            Get
                Return Me.columnId
            End Get
        End Property
        
        Friend ReadOnly Property IdentificacionColumn As DataColumn
            Get
                Return Me.columnIdentificacion
            End Get
        End Property
        
        Friend ReadOnly Property FechaColumn As DataColumn
            Get
                Return Me.columnFecha
            End Get
        End Property
        
        Friend ReadOnly Property HoraOrdinariaColumn As DataColumn
            Get
                Return Me.columnHoraOrdinaria
            End Get
        End Property
        
        Friend ReadOnly Property HoraExtraColumn As DataColumn
            Get
                Return Me.columnHoraExtra
            End Get
        End Property
        
        Friend ReadOnly Property HoraDobleColumn As DataColumn
            Get
                Return Me.columnHoraDoble
            End Get
        End Property
        
        Friend ReadOnly Property Id_ProyectoColumn As DataColumn
            Get
                Return Me.columnId_Proyecto
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As HorasTrabajadasRow
            Get
                Return CType(Me.Rows(index),HorasTrabajadasRow)
            End Get
        End Property
        
        Public Event HorasTrabajadasRowChanged As HorasTrabajadasRowChangeEventHandler
        
        Public Event HorasTrabajadasRowChanging As HorasTrabajadasRowChangeEventHandler
        
        Public Event HorasTrabajadasRowDeleted As HorasTrabajadasRowChangeEventHandler
        
        Public Event HorasTrabajadasRowDeleting As HorasTrabajadasRowChangeEventHandler
        
        Public Overloads Sub AddHorasTrabajadasRow(ByVal row As HorasTrabajadasRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddHorasTrabajadasRow(ByVal Identificacion As String, ByVal Fecha As Date, ByVal HoraOrdinaria As Double, ByVal HoraExtra As String, ByVal HoraDoble As String, ByVal Id_Proyecto As Integer) As HorasTrabajadasRow
            Dim rowHorasTrabajadasRow As HorasTrabajadasRow = CType(Me.NewRow,HorasTrabajadasRow)
            rowHorasTrabajadasRow.ItemArray = New Object() {Nothing, Identificacion, Fecha, HoraOrdinaria, HoraExtra, HoraDoble, Id_Proyecto}
            Me.Rows.Add(rowHorasTrabajadasRow)
            Return rowHorasTrabajadasRow
        End Function
        
        Public Function FindById(ByVal Id As Long) As HorasTrabajadasRow
            Return CType(Me.Rows.Find(New Object() {Id}),HorasTrabajadasRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As HorasTrabajadasDataTable = CType(MyBase.Clone,HorasTrabajadasDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New HorasTrabajadasDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnId = Me.Columns("Id")
            Me.columnIdentificacion = Me.Columns("Identificacion")
            Me.columnFecha = Me.Columns("Fecha")
            Me.columnHoraOrdinaria = Me.Columns("HoraOrdinaria")
            Me.columnHoraExtra = Me.Columns("HoraExtra")
            Me.columnHoraDoble = Me.Columns("HoraDoble")
            Me.columnId_Proyecto = Me.Columns("Id_Proyecto")
        End Sub
        
        Private Sub InitClass()
            Me.columnId = New DataColumn("Id", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId)
            Me.columnIdentificacion = New DataColumn("Identificacion", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdentificacion)
            Me.columnFecha = New DataColumn("Fecha", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFecha)
            Me.columnHoraOrdinaria = New DataColumn("HoraOrdinaria", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHoraOrdinaria)
            Me.columnHoraExtra = New DataColumn("HoraExtra", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHoraExtra)
            Me.columnHoraDoble = New DataColumn("HoraDoble", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHoraDoble)
            Me.columnId_Proyecto = New DataColumn("Id_Proyecto", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId_Proyecto)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnId}, true))
            Me.columnId.AutoIncrement = true
            Me.columnId.AllowDBNull = false
            Me.columnId.ReadOnly = true
            Me.columnId.Unique = true
            Me.columnIdentificacion.AllowDBNull = false
            Me.columnFecha.AllowDBNull = false
            Me.columnHoraOrdinaria.AllowDBNull = false
            Me.columnHoraExtra.AllowDBNull = false
            Me.columnHoraDoble.AllowDBNull = false
            Me.columnId_Proyecto.AllowDBNull = false
        End Sub
        
        Public Function NewHorasTrabajadasRow() As HorasTrabajadasRow
            Return CType(Me.NewRow,HorasTrabajadasRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New HorasTrabajadasRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(HorasTrabajadasRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.HorasTrabajadasRowChangedEvent) Is Nothing) Then
                RaiseEvent HorasTrabajadasRowChanged(Me, New HorasTrabajadasRowChangeEvent(CType(e.Row,HorasTrabajadasRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.HorasTrabajadasRowChangingEvent) Is Nothing) Then
                RaiseEvent HorasTrabajadasRowChanging(Me, New HorasTrabajadasRowChangeEvent(CType(e.Row,HorasTrabajadasRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.HorasTrabajadasRowDeletedEvent) Is Nothing) Then
                RaiseEvent HorasTrabajadasRowDeleted(Me, New HorasTrabajadasRowChangeEvent(CType(e.Row,HorasTrabajadasRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.HorasTrabajadasRowDeletingEvent) Is Nothing) Then
                RaiseEvent HorasTrabajadasRowDeleting(Me, New HorasTrabajadasRowChangeEvent(CType(e.Row,HorasTrabajadasRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveHorasTrabajadasRow(ByVal row As HorasTrabajadasRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class HorasTrabajadasRow
        Inherits DataRow
        
        Private tableHorasTrabajadas As HorasTrabajadasDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableHorasTrabajadas = CType(Me.Table,HorasTrabajadasDataTable)
        End Sub
        
        Public Property Id As Long
            Get
                Return CType(Me(Me.tableHorasTrabajadas.IdColumn),Long)
            End Get
            Set
                Me(Me.tableHorasTrabajadas.IdColumn) = value
            End Set
        End Property
        
        Public Property Identificacion As String
            Get
                Return CType(Me(Me.tableHorasTrabajadas.IdentificacionColumn),String)
            End Get
            Set
                Me(Me.tableHorasTrabajadas.IdentificacionColumn) = value
            End Set
        End Property
        
        Public Property Fecha As Date
            Get
                Return CType(Me(Me.tableHorasTrabajadas.FechaColumn),Date)
            End Get
            Set
                Me(Me.tableHorasTrabajadas.FechaColumn) = value
            End Set
        End Property
        
        Public Property HoraOrdinaria As Double
            Get
                Return CType(Me(Me.tableHorasTrabajadas.HoraOrdinariaColumn),Double)
            End Get
            Set
                Me(Me.tableHorasTrabajadas.HoraOrdinariaColumn) = value
            End Set
        End Property
        
        Public Property HoraExtra As String
            Get
                Return CType(Me(Me.tableHorasTrabajadas.HoraExtraColumn),String)
            End Get
            Set
                Me(Me.tableHorasTrabajadas.HoraExtraColumn) = value
            End Set
        End Property
        
        Public Property HoraDoble As String
            Get
                Return CType(Me(Me.tableHorasTrabajadas.HoraDobleColumn),String)
            End Get
            Set
                Me(Me.tableHorasTrabajadas.HoraDobleColumn) = value
            End Set
        End Property
        
        Public Property Id_Proyecto As Integer
            Get
                Return CType(Me(Me.tableHorasTrabajadas.Id_ProyectoColumn),Integer)
            End Get
            Set
                Me(Me.tableHorasTrabajadas.Id_ProyectoColumn) = value
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class HorasTrabajadasRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As HorasTrabajadasRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As HorasTrabajadasRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As HorasTrabajadasRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
