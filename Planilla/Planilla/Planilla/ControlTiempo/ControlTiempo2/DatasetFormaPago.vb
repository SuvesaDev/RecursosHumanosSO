'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DatasetFormaPago
    Inherits DataSet
    
    Private tableFormaPago As FormaPagoDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("FormaPago")) Is Nothing) Then
                Me.Tables.Add(New FormaPagoDataTable(ds.Tables("FormaPago")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FormaPago As FormaPagoDataTable
        Get
            Return Me.tableFormaPago
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DatasetFormaPago = CType(MyBase.Clone,DatasetFormaPago)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("FormaPago")) Is Nothing) Then
            Me.Tables.Add(New FormaPagoDataTable(ds.Tables("FormaPago")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableFormaPago = CType(Me.Tables("FormaPago"),FormaPagoDataTable)
        If (Not (Me.tableFormaPago) Is Nothing) Then
            Me.tableFormaPago.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DatasetFormaPago"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/DatasetFormaPago.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableFormaPago = New FormaPagoDataTable
        Me.Tables.Add(Me.tableFormaPago)
    End Sub
    
    Private Function ShouldSerializeFormaPago() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub FormaPagoRowChangeEventHandler(ByVal sender As Object, ByVal e As FormaPagoRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class FormaPagoDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnNombre As DataColumn
        
        Private columnCedula As DataColumn
        
        Private columnSalarioNeto As DataColumn
        
        Private columnCuentaBancaria As DataColumn
        
        Private columnTipo As DataColumn
        
        Private columnComprobante As DataColumn
        
        Private columnBanco As DataColumn
        
        Private columnCodigo_Banco As DataColumn
        
        Private columnId_CuentaBancaria As DataColumn
        
        Private columnId_Planilla As DataColumn
        
        Friend Sub New()
            MyBase.New("FormaPago")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property NombreColumn As DataColumn
            Get
                Return Me.columnNombre
            End Get
        End Property
        
        Friend ReadOnly Property CedulaColumn As DataColumn
            Get
                Return Me.columnCedula
            End Get
        End Property
        
        Friend ReadOnly Property SalarioNetoColumn As DataColumn
            Get
                Return Me.columnSalarioNeto
            End Get
        End Property
        
        Friend ReadOnly Property CuentaBancariaColumn As DataColumn
            Get
                Return Me.columnCuentaBancaria
            End Get
        End Property
        
        Friend ReadOnly Property TipoColumn As DataColumn
            Get
                Return Me.columnTipo
            End Get
        End Property
        
        Friend ReadOnly Property ComprobanteColumn As DataColumn
            Get
                Return Me.columnComprobante
            End Get
        End Property
        
        Friend ReadOnly Property BancoColumn As DataColumn
            Get
                Return Me.columnBanco
            End Get
        End Property
        
        Friend ReadOnly Property Codigo_BancoColumn As DataColumn
            Get
                Return Me.columnCodigo_Banco
            End Get
        End Property
        
        Friend ReadOnly Property Id_CuentaBancariaColumn As DataColumn
            Get
                Return Me.columnId_CuentaBancaria
            End Get
        End Property
        
        Friend ReadOnly Property Id_PlanillaColumn As DataColumn
            Get
                Return Me.columnId_Planilla
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As FormaPagoRow
            Get
                Return CType(Me.Rows(index),FormaPagoRow)
            End Get
        End Property
        
        Public Event FormaPagoRowChanged As FormaPagoRowChangeEventHandler
        
        Public Event FormaPagoRowChanging As FormaPagoRowChangeEventHandler
        
        Public Event FormaPagoRowDeleted As FormaPagoRowChangeEventHandler
        
        Public Event FormaPagoRowDeleting As FormaPagoRowChangeEventHandler
        
        Public Overloads Sub AddFormaPagoRow(ByVal row As FormaPagoRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddFormaPagoRow(ByVal Nombre As String, ByVal Cedula As String, ByVal SalarioNeto As Single, ByVal CuentaBancaria As String, ByVal Tipo As String, ByVal Comprobante As String, ByVal Banco As String, ByVal Codigo_Banco As Double, ByVal Id_CuentaBancaria As Double, ByVal Id_Planilla As Double) As FormaPagoRow
            Dim rowFormaPagoRow As FormaPagoRow = CType(Me.NewRow,FormaPagoRow)
            rowFormaPagoRow.ItemArray = New Object() {Nombre, Cedula, SalarioNeto, CuentaBancaria, Tipo, Comprobante, Banco, Codigo_Banco, Id_CuentaBancaria, Id_Planilla}
            Me.Rows.Add(rowFormaPagoRow)
            Return rowFormaPagoRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As FormaPagoDataTable = CType(MyBase.Clone,FormaPagoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New FormaPagoDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnNombre = Me.Columns("Nombre")
            Me.columnCedula = Me.Columns("Cedula")
            Me.columnSalarioNeto = Me.Columns("SalarioNeto")
            Me.columnCuentaBancaria = Me.Columns("CuentaBancaria")
            Me.columnTipo = Me.Columns("Tipo")
            Me.columnComprobante = Me.Columns("Comprobante")
            Me.columnBanco = Me.Columns("Banco")
            Me.columnCodigo_Banco = Me.Columns("Codigo_Banco")
            Me.columnId_CuentaBancaria = Me.Columns("Id_CuentaBancaria")
            Me.columnId_Planilla = Me.Columns("Id_Planilla")
        End Sub
        
        Private Sub InitClass()
            Me.columnNombre = New DataColumn("Nombre", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNombre)
            Me.columnCedula = New DataColumn("Cedula", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCedula)
            Me.columnSalarioNeto = New DataColumn("SalarioNeto", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSalarioNeto)
            Me.columnCuentaBancaria = New DataColumn("CuentaBancaria", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCuentaBancaria)
            Me.columnTipo = New DataColumn("Tipo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTipo)
            Me.columnComprobante = New DataColumn("Comprobante", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnComprobante)
            Me.columnBanco = New DataColumn("Banco", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBanco)
            Me.columnCodigo_Banco = New DataColumn("Codigo_Banco", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCodigo_Banco)
            Me.columnId_CuentaBancaria = New DataColumn("Id_CuentaBancaria", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId_CuentaBancaria)
            Me.columnId_Planilla = New DataColumn("Id_Planilla", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId_Planilla)
        End Sub
        
        Public Function NewFormaPagoRow() As FormaPagoRow
            Return CType(Me.NewRow,FormaPagoRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New FormaPagoRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(FormaPagoRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FormaPagoRowChangedEvent) Is Nothing) Then
                RaiseEvent FormaPagoRowChanged(Me, New FormaPagoRowChangeEvent(CType(e.Row,FormaPagoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FormaPagoRowChangingEvent) Is Nothing) Then
                RaiseEvent FormaPagoRowChanging(Me, New FormaPagoRowChangeEvent(CType(e.Row,FormaPagoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FormaPagoRowDeletedEvent) Is Nothing) Then
                RaiseEvent FormaPagoRowDeleted(Me, New FormaPagoRowChangeEvent(CType(e.Row,FormaPagoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FormaPagoRowDeletingEvent) Is Nothing) Then
                RaiseEvent FormaPagoRowDeleting(Me, New FormaPagoRowChangeEvent(CType(e.Row,FormaPagoRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveFormaPagoRow(ByVal row As FormaPagoRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class FormaPagoRow
        Inherits DataRow
        
        Private tableFormaPago As FormaPagoDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableFormaPago = CType(Me.Table,FormaPagoDataTable)
        End Sub
        
        Public Property Nombre As String
            Get
                Try 
                    Return CType(Me(Me.tableFormaPago.NombreColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFormaPago.NombreColumn) = value
            End Set
        End Property
        
        Public Property Cedula As String
            Get
                Try 
                    Return CType(Me(Me.tableFormaPago.CedulaColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFormaPago.CedulaColumn) = value
            End Set
        End Property
        
        Public Property SalarioNeto As Single
            Get
                Try 
                    Return CType(Me(Me.tableFormaPago.SalarioNetoColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFormaPago.SalarioNetoColumn) = value
            End Set
        End Property
        
        Public Property CuentaBancaria As String
            Get
                Try 
                    Return CType(Me(Me.tableFormaPago.CuentaBancariaColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFormaPago.CuentaBancariaColumn) = value
            End Set
        End Property
        
        Public Property Tipo As String
            Get
                Try 
                    Return CType(Me(Me.tableFormaPago.TipoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFormaPago.TipoColumn) = value
            End Set
        End Property
        
        Public Property Comprobante As String
            Get
                Try 
                    Return CType(Me(Me.tableFormaPago.ComprobanteColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFormaPago.ComprobanteColumn) = value
            End Set
        End Property
        
        Public Property Banco As String
            Get
                Try 
                    Return CType(Me(Me.tableFormaPago.BancoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFormaPago.BancoColumn) = value
            End Set
        End Property
        
        Public Property Codigo_Banco As Double
            Get
                Try 
                    Return CType(Me(Me.tableFormaPago.Codigo_BancoColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFormaPago.Codigo_BancoColumn) = value
            End Set
        End Property
        
        Public Property Id_CuentaBancaria As Double
            Get
                Try 
                    Return CType(Me(Me.tableFormaPago.Id_CuentaBancariaColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFormaPago.Id_CuentaBancariaColumn) = value
            End Set
        End Property
        
        Public Property Id_Planilla As Double
            Get
                Try 
                    Return CType(Me(Me.tableFormaPago.Id_PlanillaColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFormaPago.Id_PlanillaColumn) = value
            End Set
        End Property
        
        Public Function IsNombreNull() As Boolean
            Return Me.IsNull(Me.tableFormaPago.NombreColumn)
        End Function
        
        Public Sub SetNombreNull()
            Me(Me.tableFormaPago.NombreColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCedulaNull() As Boolean
            Return Me.IsNull(Me.tableFormaPago.CedulaColumn)
        End Function
        
        Public Sub SetCedulaNull()
            Me(Me.tableFormaPago.CedulaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSalarioNetoNull() As Boolean
            Return Me.IsNull(Me.tableFormaPago.SalarioNetoColumn)
        End Function
        
        Public Sub SetSalarioNetoNull()
            Me(Me.tableFormaPago.SalarioNetoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCuentaBancariaNull() As Boolean
            Return Me.IsNull(Me.tableFormaPago.CuentaBancariaColumn)
        End Function
        
        Public Sub SetCuentaBancariaNull()
            Me(Me.tableFormaPago.CuentaBancariaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTipoNull() As Boolean
            Return Me.IsNull(Me.tableFormaPago.TipoColumn)
        End Function
        
        Public Sub SetTipoNull()
            Me(Me.tableFormaPago.TipoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsComprobanteNull() As Boolean
            Return Me.IsNull(Me.tableFormaPago.ComprobanteColumn)
        End Function
        
        Public Sub SetComprobanteNull()
            Me(Me.tableFormaPago.ComprobanteColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBancoNull() As Boolean
            Return Me.IsNull(Me.tableFormaPago.BancoColumn)
        End Function
        
        Public Sub SetBancoNull()
            Me(Me.tableFormaPago.BancoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCodigo_BancoNull() As Boolean
            Return Me.IsNull(Me.tableFormaPago.Codigo_BancoColumn)
        End Function
        
        Public Sub SetCodigo_BancoNull()
            Me(Me.tableFormaPago.Codigo_BancoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsId_CuentaBancariaNull() As Boolean
            Return Me.IsNull(Me.tableFormaPago.Id_CuentaBancariaColumn)
        End Function
        
        Public Sub SetId_CuentaBancariaNull()
            Me(Me.tableFormaPago.Id_CuentaBancariaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsId_PlanillaNull() As Boolean
            Return Me.IsNull(Me.tableFormaPago.Id_PlanillaColumn)
        End Function
        
        Public Sub SetId_PlanillaNull()
            Me(Me.tableFormaPago.Id_PlanillaColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class FormaPagoRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As FormaPagoRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As FormaPagoRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As FormaPagoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
