'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class dsPlanilla
    Inherits DataSet
    
    Private tableAccionPersonal As AccionPersonalDataTable
    
    Private tableAdelantos As AdelantosDataTable
    
    Private tableDeducciones As DeduccionesDataTable
    
    Private tableEmpleado As EmpleadoDataTable
    
    Private tableEmpleado_Deducciones As Empleado_DeduccionesDataTable
    
    Private tableHorasTrabajadas As HorasTrabajadasDataTable
    
    Private tableParametroRenta As ParametroRentaDataTable
    
    Private tablePlanilla_Deducciones As Planilla_DeduccionesDataTable
    
    Private tablePlanilla_Detalle As Planilla_DetalleDataTable
    
    Private tableAdelantos_Detalle As Adelantos_DetalleDataTable
    
    Private tablePlanilla As PlanillaDataTable
    
    Private tableMoneda As MonedaDataTable
    
    Private tableHoras_Ordinarias As Horas_OrdinariasDataTable
    
    Private relationPlanillaPlanilla_Detalle As DataRelation
    
    Private relationPlanilla_DetallePlanilla_Deducciones As DataRelation
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("AccionPersonal")) Is Nothing) Then
                Me.Tables.Add(New AccionPersonalDataTable(ds.Tables("AccionPersonal")))
            End If
            If (Not (ds.Tables("Adelantos")) Is Nothing) Then
                Me.Tables.Add(New AdelantosDataTable(ds.Tables("Adelantos")))
            End If
            If (Not (ds.Tables("Deducciones")) Is Nothing) Then
                Me.Tables.Add(New DeduccionesDataTable(ds.Tables("Deducciones")))
            End If
            If (Not (ds.Tables("Empleado")) Is Nothing) Then
                Me.Tables.Add(New EmpleadoDataTable(ds.Tables("Empleado")))
            End If
            If (Not (ds.Tables("Empleado_Deducciones")) Is Nothing) Then
                Me.Tables.Add(New Empleado_DeduccionesDataTable(ds.Tables("Empleado_Deducciones")))
            End If
            If (Not (ds.Tables("HorasTrabajadas")) Is Nothing) Then
                Me.Tables.Add(New HorasTrabajadasDataTable(ds.Tables("HorasTrabajadas")))
            End If
            If (Not (ds.Tables("ParametroRenta")) Is Nothing) Then
                Me.Tables.Add(New ParametroRentaDataTable(ds.Tables("ParametroRenta")))
            End If
            If (Not (ds.Tables("Planilla_Deducciones")) Is Nothing) Then
                Me.Tables.Add(New Planilla_DeduccionesDataTable(ds.Tables("Planilla_Deducciones")))
            End If
            If (Not (ds.Tables("Planilla_Detalle")) Is Nothing) Then
                Me.Tables.Add(New Planilla_DetalleDataTable(ds.Tables("Planilla_Detalle")))
            End If
            If (Not (ds.Tables("Adelantos_Detalle")) Is Nothing) Then
                Me.Tables.Add(New Adelantos_DetalleDataTable(ds.Tables("Adelantos_Detalle")))
            End If
            If (Not (ds.Tables("Planilla")) Is Nothing) Then
                Me.Tables.Add(New PlanillaDataTable(ds.Tables("Planilla")))
            End If
            If (Not (ds.Tables("Moneda")) Is Nothing) Then
                Me.Tables.Add(New MonedaDataTable(ds.Tables("Moneda")))
            End If
            If (Not (ds.Tables("Horas_Ordinarias")) Is Nothing) Then
                Me.Tables.Add(New Horas_OrdinariasDataTable(ds.Tables("Horas_Ordinarias")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property AccionPersonal As AccionPersonalDataTable
        Get
            Return Me.tableAccionPersonal
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Adelantos As AdelantosDataTable
        Get
            Return Me.tableAdelantos
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Deducciones As DeduccionesDataTable
        Get
            Return Me.tableDeducciones
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Empleado As EmpleadoDataTable
        Get
            Return Me.tableEmpleado
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Empleado_Deducciones As Empleado_DeduccionesDataTable
        Get
            Return Me.tableEmpleado_Deducciones
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property HorasTrabajadas As HorasTrabajadasDataTable
        Get
            Return Me.tableHorasTrabajadas
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ParametroRenta As ParametroRentaDataTable
        Get
            Return Me.tableParametroRenta
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Planilla_Deducciones As Planilla_DeduccionesDataTable
        Get
            Return Me.tablePlanilla_Deducciones
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Planilla_Detalle As Planilla_DetalleDataTable
        Get
            Return Me.tablePlanilla_Detalle
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Adelantos_Detalle As Adelantos_DetalleDataTable
        Get
            Return Me.tableAdelantos_Detalle
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Planilla As PlanillaDataTable
        Get
            Return Me.tablePlanilla
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Moneda As MonedaDataTable
        Get
            Return Me.tableMoneda
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Horas_Ordinarias As Horas_OrdinariasDataTable
        Get
            Return Me.tableHoras_Ordinarias
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As dsPlanilla = CType(MyBase.Clone,dsPlanilla)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("AccionPersonal")) Is Nothing) Then
            Me.Tables.Add(New AccionPersonalDataTable(ds.Tables("AccionPersonal")))
        End If
        If (Not (ds.Tables("Adelantos")) Is Nothing) Then
            Me.Tables.Add(New AdelantosDataTable(ds.Tables("Adelantos")))
        End If
        If (Not (ds.Tables("Deducciones")) Is Nothing) Then
            Me.Tables.Add(New DeduccionesDataTable(ds.Tables("Deducciones")))
        End If
        If (Not (ds.Tables("Empleado")) Is Nothing) Then
            Me.Tables.Add(New EmpleadoDataTable(ds.Tables("Empleado")))
        End If
        If (Not (ds.Tables("Empleado_Deducciones")) Is Nothing) Then
            Me.Tables.Add(New Empleado_DeduccionesDataTable(ds.Tables("Empleado_Deducciones")))
        End If
        If (Not (ds.Tables("HorasTrabajadas")) Is Nothing) Then
            Me.Tables.Add(New HorasTrabajadasDataTable(ds.Tables("HorasTrabajadas")))
        End If
        If (Not (ds.Tables("ParametroRenta")) Is Nothing) Then
            Me.Tables.Add(New ParametroRentaDataTable(ds.Tables("ParametroRenta")))
        End If
        If (Not (ds.Tables("Planilla_Deducciones")) Is Nothing) Then
            Me.Tables.Add(New Planilla_DeduccionesDataTable(ds.Tables("Planilla_Deducciones")))
        End If
        If (Not (ds.Tables("Planilla_Detalle")) Is Nothing) Then
            Me.Tables.Add(New Planilla_DetalleDataTable(ds.Tables("Planilla_Detalle")))
        End If
        If (Not (ds.Tables("Adelantos_Detalle")) Is Nothing) Then
            Me.Tables.Add(New Adelantos_DetalleDataTable(ds.Tables("Adelantos_Detalle")))
        End If
        If (Not (ds.Tables("Planilla")) Is Nothing) Then
            Me.Tables.Add(New PlanillaDataTable(ds.Tables("Planilla")))
        End If
        If (Not (ds.Tables("Moneda")) Is Nothing) Then
            Me.Tables.Add(New MonedaDataTable(ds.Tables("Moneda")))
        End If
        If (Not (ds.Tables("Horas_Ordinarias")) Is Nothing) Then
            Me.Tables.Add(New Horas_OrdinariasDataTable(ds.Tables("Horas_Ordinarias")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableAccionPersonal = CType(Me.Tables("AccionPersonal"),AccionPersonalDataTable)
        If (Not (Me.tableAccionPersonal) Is Nothing) Then
            Me.tableAccionPersonal.InitVars
        End If
        Me.tableAdelantos = CType(Me.Tables("Adelantos"),AdelantosDataTable)
        If (Not (Me.tableAdelantos) Is Nothing) Then
            Me.tableAdelantos.InitVars
        End If
        Me.tableDeducciones = CType(Me.Tables("Deducciones"),DeduccionesDataTable)
        If (Not (Me.tableDeducciones) Is Nothing) Then
            Me.tableDeducciones.InitVars
        End If
        Me.tableEmpleado = CType(Me.Tables("Empleado"),EmpleadoDataTable)
        If (Not (Me.tableEmpleado) Is Nothing) Then
            Me.tableEmpleado.InitVars
        End If
        Me.tableEmpleado_Deducciones = CType(Me.Tables("Empleado_Deducciones"),Empleado_DeduccionesDataTable)
        If (Not (Me.tableEmpleado_Deducciones) Is Nothing) Then
            Me.tableEmpleado_Deducciones.InitVars
        End If
        Me.tableHorasTrabajadas = CType(Me.Tables("HorasTrabajadas"),HorasTrabajadasDataTable)
        If (Not (Me.tableHorasTrabajadas) Is Nothing) Then
            Me.tableHorasTrabajadas.InitVars
        End If
        Me.tableParametroRenta = CType(Me.Tables("ParametroRenta"),ParametroRentaDataTable)
        If (Not (Me.tableParametroRenta) Is Nothing) Then
            Me.tableParametroRenta.InitVars
        End If
        Me.tablePlanilla_Deducciones = CType(Me.Tables("Planilla_Deducciones"),Planilla_DeduccionesDataTable)
        If (Not (Me.tablePlanilla_Deducciones) Is Nothing) Then
            Me.tablePlanilla_Deducciones.InitVars
        End If
        Me.tablePlanilla_Detalle = CType(Me.Tables("Planilla_Detalle"),Planilla_DetalleDataTable)
        If (Not (Me.tablePlanilla_Detalle) Is Nothing) Then
            Me.tablePlanilla_Detalle.InitVars
        End If
        Me.tableAdelantos_Detalle = CType(Me.Tables("Adelantos_Detalle"),Adelantos_DetalleDataTable)
        If (Not (Me.tableAdelantos_Detalle) Is Nothing) Then
            Me.tableAdelantos_Detalle.InitVars
        End If
        Me.tablePlanilla = CType(Me.Tables("Planilla"),PlanillaDataTable)
        If (Not (Me.tablePlanilla) Is Nothing) Then
            Me.tablePlanilla.InitVars
        End If
        Me.tableMoneda = CType(Me.Tables("Moneda"),MonedaDataTable)
        If (Not (Me.tableMoneda) Is Nothing) Then
            Me.tableMoneda.InitVars
        End If
        Me.tableHoras_Ordinarias = CType(Me.Tables("Horas_Ordinarias"),Horas_OrdinariasDataTable)
        If (Not (Me.tableHoras_Ordinarias) Is Nothing) Then
            Me.tableHoras_Ordinarias.InitVars
        End If
        Me.relationPlanillaPlanilla_Detalle = Me.Relations("PlanillaPlanilla_Detalle")
        Me.relationPlanilla_DetallePlanilla_Deducciones = Me.Relations("Planilla_DetallePlanilla_Deducciones")
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "dsPlanilla"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/dsPlanilla.xsd"
        Me.Locale = New System.Globalization.CultureInfo("es-MX")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableAccionPersonal = New AccionPersonalDataTable
        Me.Tables.Add(Me.tableAccionPersonal)
        Me.tableAdelantos = New AdelantosDataTable
        Me.Tables.Add(Me.tableAdelantos)
        Me.tableDeducciones = New DeduccionesDataTable
        Me.Tables.Add(Me.tableDeducciones)
        Me.tableEmpleado = New EmpleadoDataTable
        Me.Tables.Add(Me.tableEmpleado)
        Me.tableEmpleado_Deducciones = New Empleado_DeduccionesDataTable
        Me.Tables.Add(Me.tableEmpleado_Deducciones)
        Me.tableHorasTrabajadas = New HorasTrabajadasDataTable
        Me.Tables.Add(Me.tableHorasTrabajadas)
        Me.tableParametroRenta = New ParametroRentaDataTable
        Me.Tables.Add(Me.tableParametroRenta)
        Me.tablePlanilla_Deducciones = New Planilla_DeduccionesDataTable
        Me.Tables.Add(Me.tablePlanilla_Deducciones)
        Me.tablePlanilla_Detalle = New Planilla_DetalleDataTable
        Me.Tables.Add(Me.tablePlanilla_Detalle)
        Me.tableAdelantos_Detalle = New Adelantos_DetalleDataTable
        Me.Tables.Add(Me.tableAdelantos_Detalle)
        Me.tablePlanilla = New PlanillaDataTable
        Me.Tables.Add(Me.tablePlanilla)
        Me.tableMoneda = New MonedaDataTable
        Me.Tables.Add(Me.tableMoneda)
        Me.tableHoras_Ordinarias = New Horas_OrdinariasDataTable
        Me.Tables.Add(Me.tableHoras_Ordinarias)
        Dim fkc As ForeignKeyConstraint
        fkc = New ForeignKeyConstraint("Planilla_DetallePlanilla_Deducciones", New DataColumn() {Me.tablePlanilla_Detalle.IdColumn}, New DataColumn() {Me.tablePlanilla_Deducciones.Id_PlanillaDetalleColumn})
        Me.tablePlanilla_Deducciones.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("PlanillaPlanilla_Detalle", New DataColumn() {Me.tablePlanilla.Id_PlanillaColumn}, New DataColumn() {Me.tablePlanilla_Detalle.Id_PlanillaColumn})
        Me.tablePlanilla_Detalle.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        Me.relationPlanillaPlanilla_Detalle = New DataRelation("PlanillaPlanilla_Detalle", New DataColumn() {Me.tablePlanilla.Id_PlanillaColumn}, New DataColumn() {Me.tablePlanilla_Detalle.Id_PlanillaColumn}, false)
        Me.Relations.Add(Me.relationPlanillaPlanilla_Detalle)
        Me.relationPlanilla_DetallePlanilla_Deducciones = New DataRelation("Planilla_DetallePlanilla_Deducciones", New DataColumn() {Me.tablePlanilla_Detalle.IdColumn}, New DataColumn() {Me.tablePlanilla_Deducciones.Id_PlanillaDetalleColumn}, false)
        Me.Relations.Add(Me.relationPlanilla_DetallePlanilla_Deducciones)
    End Sub
    
    Private Function ShouldSerializeAccionPersonal() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeAdelantos() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeDeducciones() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeEmpleado() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeEmpleado_Deducciones() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeHorasTrabajadas() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeParametroRenta() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePlanilla_Deducciones() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePlanilla_Detalle() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeAdelantos_Detalle() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePlanilla() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeMoneda() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeHoras_Ordinarias() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub AccionPersonalRowChangeEventHandler(ByVal sender As Object, ByVal e As AccionPersonalRowChangeEvent)
    
    Public Delegate Sub AdelantosRowChangeEventHandler(ByVal sender As Object, ByVal e As AdelantosRowChangeEvent)
    
    Public Delegate Sub DeduccionesRowChangeEventHandler(ByVal sender As Object, ByVal e As DeduccionesRowChangeEvent)
    
    Public Delegate Sub EmpleadoRowChangeEventHandler(ByVal sender As Object, ByVal e As EmpleadoRowChangeEvent)
    
    Public Delegate Sub Empleado_DeduccionesRowChangeEventHandler(ByVal sender As Object, ByVal e As Empleado_DeduccionesRowChangeEvent)
    
    Public Delegate Sub HorasTrabajadasRowChangeEventHandler(ByVal sender As Object, ByVal e As HorasTrabajadasRowChangeEvent)
    
    Public Delegate Sub ParametroRentaRowChangeEventHandler(ByVal sender As Object, ByVal e As ParametroRentaRowChangeEvent)
    
    Public Delegate Sub Planilla_DeduccionesRowChangeEventHandler(ByVal sender As Object, ByVal e As Planilla_DeduccionesRowChangeEvent)
    
    Public Delegate Sub Planilla_DetalleRowChangeEventHandler(ByVal sender As Object, ByVal e As Planilla_DetalleRowChangeEvent)
    
    Public Delegate Sub Adelantos_DetalleRowChangeEventHandler(ByVal sender As Object, ByVal e As Adelantos_DetalleRowChangeEvent)
    
    Public Delegate Sub PlanillaRowChangeEventHandler(ByVal sender As Object, ByVal e As PlanillaRowChangeEvent)
    
    Public Delegate Sub MonedaRowChangeEventHandler(ByVal sender As Object, ByVal e As MonedaRowChangeEvent)
    
    Public Delegate Sub Horas_OrdinariasRowChangeEventHandler(ByVal sender As Object, ByVal e As Horas_OrdinariasRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AccionPersonalDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnNum_Accion As DataColumn
        
        Private columnId_Empleado As DataColumn
        
        Private columnNombre_Empleado As DataColumn
        
        Private columnPuesto As DataColumn
        
        Private columnId_Accion As DataColumn
        
        Private columnFecha As DataColumn
        
        Private columnObservaciones As DataColumn
        
        Private columnRigeDesde As DataColumn
        
        Private columnRigeHasta As DataColumn
        
        Private columnDiasaDescontar As DataColumn
        
        Private columnHechoPor As DataColumn
        
        Private columnNombreUsuario As DataColumn
        
        Private columnAnula As DataColumn
        
        Friend Sub New()
            MyBase.New("AccionPersonal")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property Num_AccionColumn As DataColumn
            Get
                Return Me.columnNum_Accion
            End Get
        End Property
        
        Friend ReadOnly Property Id_EmpleadoColumn As DataColumn
            Get
                Return Me.columnId_Empleado
            End Get
        End Property
        
        Friend ReadOnly Property Nombre_EmpleadoColumn As DataColumn
            Get
                Return Me.columnNombre_Empleado
            End Get
        End Property
        
        Friend ReadOnly Property PuestoColumn As DataColumn
            Get
                Return Me.columnPuesto
            End Get
        End Property
        
        Friend ReadOnly Property Id_AccionColumn As DataColumn
            Get
                Return Me.columnId_Accion
            End Get
        End Property
        
        Friend ReadOnly Property FechaColumn As DataColumn
            Get
                Return Me.columnFecha
            End Get
        End Property
        
        Friend ReadOnly Property ObservacionesColumn As DataColumn
            Get
                Return Me.columnObservaciones
            End Get
        End Property
        
        Friend ReadOnly Property RigeDesdeColumn As DataColumn
            Get
                Return Me.columnRigeDesde
            End Get
        End Property
        
        Friend ReadOnly Property RigeHastaColumn As DataColumn
            Get
                Return Me.columnRigeHasta
            End Get
        End Property
        
        Friend ReadOnly Property DiasaDescontarColumn As DataColumn
            Get
                Return Me.columnDiasaDescontar
            End Get
        End Property
        
        Friend ReadOnly Property HechoPorColumn As DataColumn
            Get
                Return Me.columnHechoPor
            End Get
        End Property
        
        Friend ReadOnly Property NombreUsuarioColumn As DataColumn
            Get
                Return Me.columnNombreUsuario
            End Get
        End Property
        
        Friend ReadOnly Property AnulaColumn As DataColumn
            Get
                Return Me.columnAnula
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As AccionPersonalRow
            Get
                Return CType(Me.Rows(index),AccionPersonalRow)
            End Get
        End Property
        
        Public Event AccionPersonalRowChanged As AccionPersonalRowChangeEventHandler
        
        Public Event AccionPersonalRowChanging As AccionPersonalRowChangeEventHandler
        
        Public Event AccionPersonalRowDeleted As AccionPersonalRowChangeEventHandler
        
        Public Event AccionPersonalRowDeleting As AccionPersonalRowChangeEventHandler
        
        Public Overloads Sub AddAccionPersonalRow(ByVal row As AccionPersonalRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddAccionPersonalRow(ByVal Num_Accion As Long, ByVal Id_Empleado As String, ByVal Nombre_Empleado As String, ByVal Puesto As String, ByVal Id_Accion As Integer, ByVal Fecha As Date, ByVal Observaciones As String, ByVal RigeDesde As Date, ByVal RigeHasta As Date, ByVal DiasaDescontar As Double, ByVal HechoPor As String, ByVal NombreUsuario As String, ByVal Anula As Boolean) As AccionPersonalRow
            Dim rowAccionPersonalRow As AccionPersonalRow = CType(Me.NewRow,AccionPersonalRow)
            rowAccionPersonalRow.ItemArray = New Object() {Num_Accion, Id_Empleado, Nombre_Empleado, Puesto, Id_Accion, Fecha, Observaciones, RigeDesde, RigeHasta, DiasaDescontar, HechoPor, NombreUsuario, Anula}
            Me.Rows.Add(rowAccionPersonalRow)
            Return rowAccionPersonalRow
        End Function
        
        Public Function FindByNum_Accion(ByVal Num_Accion As Long) As AccionPersonalRow
            Return CType(Me.Rows.Find(New Object() {Num_Accion}),AccionPersonalRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As AccionPersonalDataTable = CType(MyBase.Clone,AccionPersonalDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New AccionPersonalDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnNum_Accion = Me.Columns("Num_Accion")
            Me.columnId_Empleado = Me.Columns("Id_Empleado")
            Me.columnNombre_Empleado = Me.Columns("Nombre_Empleado")
            Me.columnPuesto = Me.Columns("Puesto")
            Me.columnId_Accion = Me.Columns("Id_Accion")
            Me.columnFecha = Me.Columns("Fecha")
            Me.columnObservaciones = Me.Columns("Observaciones")
            Me.columnRigeDesde = Me.Columns("RigeDesde")
            Me.columnRigeHasta = Me.Columns("RigeHasta")
            Me.columnDiasaDescontar = Me.Columns("DiasaDescontar")
            Me.columnHechoPor = Me.Columns("HechoPor")
            Me.columnNombreUsuario = Me.Columns("NombreUsuario")
            Me.columnAnula = Me.Columns("Anula")
        End Sub
        
        Private Sub InitClass()
            Me.columnNum_Accion = New DataColumn("Num_Accion", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNum_Accion)
            Me.columnId_Empleado = New DataColumn("Id_Empleado", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId_Empleado)
            Me.columnNombre_Empleado = New DataColumn("Nombre_Empleado", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNombre_Empleado)
            Me.columnPuesto = New DataColumn("Puesto", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPuesto)
            Me.columnId_Accion = New DataColumn("Id_Accion", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId_Accion)
            Me.columnFecha = New DataColumn("Fecha", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFecha)
            Me.columnObservaciones = New DataColumn("Observaciones", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnObservaciones)
            Me.columnRigeDesde = New DataColumn("RigeDesde", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRigeDesde)
            Me.columnRigeHasta = New DataColumn("RigeHasta", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRigeHasta)
            Me.columnDiasaDescontar = New DataColumn("DiasaDescontar", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDiasaDescontar)
            Me.columnHechoPor = New DataColumn("HechoPor", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHechoPor)
            Me.columnNombreUsuario = New DataColumn("NombreUsuario", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNombreUsuario)
            Me.columnAnula = New DataColumn("Anula", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAnula)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnNum_Accion}, true))
            Me.columnNum_Accion.AllowDBNull = false
            Me.columnNum_Accion.Unique = true
            Me.columnId_Empleado.AllowDBNull = false
            Me.columnNombre_Empleado.AllowDBNull = false
            Me.columnPuesto.AllowDBNull = false
            Me.columnId_Accion.AllowDBNull = false
            Me.columnFecha.AllowDBNull = false
            Me.columnObservaciones.AllowDBNull = false
            Me.columnRigeDesde.AllowDBNull = false
            Me.columnRigeHasta.AllowDBNull = false
            Me.columnDiasaDescontar.AllowDBNull = false
            Me.columnHechoPor.AllowDBNull = false
            Me.columnNombreUsuario.AllowDBNull = false
            Me.columnAnula.AllowDBNull = false
        End Sub
        
        Public Function NewAccionPersonalRow() As AccionPersonalRow
            Return CType(Me.NewRow,AccionPersonalRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New AccionPersonalRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(AccionPersonalRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AccionPersonalRowChangedEvent) Is Nothing) Then
                RaiseEvent AccionPersonalRowChanged(Me, New AccionPersonalRowChangeEvent(CType(e.Row,AccionPersonalRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AccionPersonalRowChangingEvent) Is Nothing) Then
                RaiseEvent AccionPersonalRowChanging(Me, New AccionPersonalRowChangeEvent(CType(e.Row,AccionPersonalRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AccionPersonalRowDeletedEvent) Is Nothing) Then
                RaiseEvent AccionPersonalRowDeleted(Me, New AccionPersonalRowChangeEvent(CType(e.Row,AccionPersonalRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AccionPersonalRowDeletingEvent) Is Nothing) Then
                RaiseEvent AccionPersonalRowDeleting(Me, New AccionPersonalRowChangeEvent(CType(e.Row,AccionPersonalRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveAccionPersonalRow(ByVal row As AccionPersonalRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AccionPersonalRow
        Inherits DataRow
        
        Private tableAccionPersonal As AccionPersonalDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableAccionPersonal = CType(Me.Table,AccionPersonalDataTable)
        End Sub
        
        Public Property Num_Accion As Long
            Get
                Return CType(Me(Me.tableAccionPersonal.Num_AccionColumn),Long)
            End Get
            Set
                Me(Me.tableAccionPersonal.Num_AccionColumn) = value
            End Set
        End Property
        
        Public Property Id_Empleado As String
            Get
                Return CType(Me(Me.tableAccionPersonal.Id_EmpleadoColumn),String)
            End Get
            Set
                Me(Me.tableAccionPersonal.Id_EmpleadoColumn) = value
            End Set
        End Property
        
        Public Property Nombre_Empleado As String
            Get
                Return CType(Me(Me.tableAccionPersonal.Nombre_EmpleadoColumn),String)
            End Get
            Set
                Me(Me.tableAccionPersonal.Nombre_EmpleadoColumn) = value
            End Set
        End Property
        
        Public Property Puesto As String
            Get
                Return CType(Me(Me.tableAccionPersonal.PuestoColumn),String)
            End Get
            Set
                Me(Me.tableAccionPersonal.PuestoColumn) = value
            End Set
        End Property
        
        Public Property Id_Accion As Integer
            Get
                Return CType(Me(Me.tableAccionPersonal.Id_AccionColumn),Integer)
            End Get
            Set
                Me(Me.tableAccionPersonal.Id_AccionColumn) = value
            End Set
        End Property
        
        Public Property Fecha As Date
            Get
                Return CType(Me(Me.tableAccionPersonal.FechaColumn),Date)
            End Get
            Set
                Me(Me.tableAccionPersonal.FechaColumn) = value
            End Set
        End Property
        
        Public Property Observaciones As String
            Get
                Return CType(Me(Me.tableAccionPersonal.ObservacionesColumn),String)
            End Get
            Set
                Me(Me.tableAccionPersonal.ObservacionesColumn) = value
            End Set
        End Property
        
        Public Property RigeDesde As Date
            Get
                Return CType(Me(Me.tableAccionPersonal.RigeDesdeColumn),Date)
            End Get
            Set
                Me(Me.tableAccionPersonal.RigeDesdeColumn) = value
            End Set
        End Property
        
        Public Property RigeHasta As Date
            Get
                Return CType(Me(Me.tableAccionPersonal.RigeHastaColumn),Date)
            End Get
            Set
                Me(Me.tableAccionPersonal.RigeHastaColumn) = value
            End Set
        End Property
        
        Public Property DiasaDescontar As Double
            Get
                Return CType(Me(Me.tableAccionPersonal.DiasaDescontarColumn),Double)
            End Get
            Set
                Me(Me.tableAccionPersonal.DiasaDescontarColumn) = value
            End Set
        End Property
        
        Public Property HechoPor As String
            Get
                Return CType(Me(Me.tableAccionPersonal.HechoPorColumn),String)
            End Get
            Set
                Me(Me.tableAccionPersonal.HechoPorColumn) = value
            End Set
        End Property
        
        Public Property NombreUsuario As String
            Get
                Return CType(Me(Me.tableAccionPersonal.NombreUsuarioColumn),String)
            End Get
            Set
                Me(Me.tableAccionPersonal.NombreUsuarioColumn) = value
            End Set
        End Property
        
        Public Property Anula As Boolean
            Get
                Return CType(Me(Me.tableAccionPersonal.AnulaColumn),Boolean)
            End Get
            Set
                Me(Me.tableAccionPersonal.AnulaColumn) = value
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AccionPersonalRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As AccionPersonalRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As AccionPersonalRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As AccionPersonalRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AdelantosDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnNumero As DataColumn
        
        Private columnIdentificacion As DataColumn
        
        Private columnNombre As DataColumn
        
        Private columnAdelanto As DataColumn
        
        Private columnPrestamo As DataColumn
        
        Private columnPuesto As DataColumn
        
        Private columnSalario As DataColumn
        
        Private columnFechaComprobante As DataColumn
        
        Private columnNum_Pago As DataColumn
        
        Private columnMonto As DataColumn
        
        Private columnMontoEnLetras As DataColumn
        
        Private columnFechaCobro As DataColumn
        
        Private columnObservaciones As DataColumn
        
        Private columnDeducirxPago As DataColumn
        
        Private columnUsuario As DataColumn
        
        Private columnNombreUsuario As DataColumn
        
        Private columnCod_Moneda As DataColumn
        
        Private columnAnulado As DataColumn
        
        Private columnSaldo As DataColumn
        
        Friend Sub New()
            MyBase.New("Adelantos")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property NumeroColumn As DataColumn
            Get
                Return Me.columnNumero
            End Get
        End Property
        
        Friend ReadOnly Property IdentificacionColumn As DataColumn
            Get
                Return Me.columnIdentificacion
            End Get
        End Property
        
        Friend ReadOnly Property NombreColumn As DataColumn
            Get
                Return Me.columnNombre
            End Get
        End Property
        
        Friend ReadOnly Property AdelantoColumn As DataColumn
            Get
                Return Me.columnAdelanto
            End Get
        End Property
        
        Friend ReadOnly Property PrestamoColumn As DataColumn
            Get
                Return Me.columnPrestamo
            End Get
        End Property
        
        Friend ReadOnly Property PuestoColumn As DataColumn
            Get
                Return Me.columnPuesto
            End Get
        End Property
        
        Friend ReadOnly Property SalarioColumn As DataColumn
            Get
                Return Me.columnSalario
            End Get
        End Property
        
        Friend ReadOnly Property FechaComprobanteColumn As DataColumn
            Get
                Return Me.columnFechaComprobante
            End Get
        End Property
        
        Friend ReadOnly Property Num_PagoColumn As DataColumn
            Get
                Return Me.columnNum_Pago
            End Get
        End Property
        
        Friend ReadOnly Property MontoColumn As DataColumn
            Get
                Return Me.columnMonto
            End Get
        End Property
        
        Friend ReadOnly Property MontoEnLetrasColumn As DataColumn
            Get
                Return Me.columnMontoEnLetras
            End Get
        End Property
        
        Friend ReadOnly Property FechaCobroColumn As DataColumn
            Get
                Return Me.columnFechaCobro
            End Get
        End Property
        
        Friend ReadOnly Property ObservacionesColumn As DataColumn
            Get
                Return Me.columnObservaciones
            End Get
        End Property
        
        Friend ReadOnly Property DeducirxPagoColumn As DataColumn
            Get
                Return Me.columnDeducirxPago
            End Get
        End Property
        
        Friend ReadOnly Property UsuarioColumn As DataColumn
            Get
                Return Me.columnUsuario
            End Get
        End Property
        
        Friend ReadOnly Property NombreUsuarioColumn As DataColumn
            Get
                Return Me.columnNombreUsuario
            End Get
        End Property
        
        Friend ReadOnly Property Cod_MonedaColumn As DataColumn
            Get
                Return Me.columnCod_Moneda
            End Get
        End Property
        
        Friend ReadOnly Property AnuladoColumn As DataColumn
            Get
                Return Me.columnAnulado
            End Get
        End Property
        
        Friend ReadOnly Property SaldoColumn As DataColumn
            Get
                Return Me.columnSaldo
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As AdelantosRow
            Get
                Return CType(Me.Rows(index),AdelantosRow)
            End Get
        End Property
        
        Public Event AdelantosRowChanged As AdelantosRowChangeEventHandler
        
        Public Event AdelantosRowChanging As AdelantosRowChangeEventHandler
        
        Public Event AdelantosRowDeleted As AdelantosRowChangeEventHandler
        
        Public Event AdelantosRowDeleting As AdelantosRowChangeEventHandler
        
        Public Overloads Sub AddAdelantosRow(ByVal row As AdelantosRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddAdelantosRow( _
                    ByVal Identificacion As String,  _
                    ByVal Nombre As String,  _
                    ByVal Adelanto As Boolean,  _
                    ByVal Prestamo As Boolean,  _
                    ByVal Puesto As String,  _
                    ByVal Salario As Double,  _
                    ByVal FechaComprobante As Date,  _
                    ByVal Num_Pago As Integer,  _
                    ByVal Monto As Double,  _
                    ByVal MontoEnLetras As String,  _
                    ByVal FechaCobro As Date,  _
                    ByVal Observaciones As String,  _
                    ByVal DeducirxPago As Double,  _
                    ByVal Usuario As String,  _
                    ByVal NombreUsuario As String,  _
                    ByVal Cod_Moneda As Integer,  _
                    ByVal Anulado As Boolean,  _
                    ByVal Saldo As Double) As AdelantosRow
            Dim rowAdelantosRow As AdelantosRow = CType(Me.NewRow,AdelantosRow)
            rowAdelantosRow.ItemArray = New Object() {Nothing, Identificacion, Nombre, Adelanto, Prestamo, Puesto, Salario, FechaComprobante, Num_Pago, Monto, MontoEnLetras, FechaCobro, Observaciones, DeducirxPago, Usuario, NombreUsuario, Cod_Moneda, Anulado, Saldo}
            Me.Rows.Add(rowAdelantosRow)
            Return rowAdelantosRow
        End Function
        
        Public Function FindByNumero(ByVal Numero As Long) As AdelantosRow
            Return CType(Me.Rows.Find(New Object() {Numero}),AdelantosRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As AdelantosDataTable = CType(MyBase.Clone,AdelantosDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New AdelantosDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnNumero = Me.Columns("Numero")
            Me.columnIdentificacion = Me.Columns("Identificacion")
            Me.columnNombre = Me.Columns("Nombre")
            Me.columnAdelanto = Me.Columns("Adelanto")
            Me.columnPrestamo = Me.Columns("Prestamo")
            Me.columnPuesto = Me.Columns("Puesto")
            Me.columnSalario = Me.Columns("Salario")
            Me.columnFechaComprobante = Me.Columns("FechaComprobante")
            Me.columnNum_Pago = Me.Columns("Num_Pago")
            Me.columnMonto = Me.Columns("Monto")
            Me.columnMontoEnLetras = Me.Columns("MontoEnLetras")
            Me.columnFechaCobro = Me.Columns("FechaCobro")
            Me.columnObservaciones = Me.Columns("Observaciones")
            Me.columnDeducirxPago = Me.Columns("DeducirxPago")
            Me.columnUsuario = Me.Columns("Usuario")
            Me.columnNombreUsuario = Me.Columns("NombreUsuario")
            Me.columnCod_Moneda = Me.Columns("Cod_Moneda")
            Me.columnAnulado = Me.Columns("Anulado")
            Me.columnSaldo = Me.Columns("Saldo")
        End Sub
        
        Private Sub InitClass()
            Me.columnNumero = New DataColumn("Numero", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNumero)
            Me.columnIdentificacion = New DataColumn("Identificacion", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdentificacion)
            Me.columnNombre = New DataColumn("Nombre", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNombre)
            Me.columnAdelanto = New DataColumn("Adelanto", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAdelanto)
            Me.columnPrestamo = New DataColumn("Prestamo", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPrestamo)
            Me.columnPuesto = New DataColumn("Puesto", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPuesto)
            Me.columnSalario = New DataColumn("Salario", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSalario)
            Me.columnFechaComprobante = New DataColumn("FechaComprobante", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFechaComprobante)
            Me.columnNum_Pago = New DataColumn("Num_Pago", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNum_Pago)
            Me.columnMonto = New DataColumn("Monto", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMonto)
            Me.columnMontoEnLetras = New DataColumn("MontoEnLetras", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMontoEnLetras)
            Me.columnFechaCobro = New DataColumn("FechaCobro", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFechaCobro)
            Me.columnObservaciones = New DataColumn("Observaciones", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnObservaciones)
            Me.columnDeducirxPago = New DataColumn("DeducirxPago", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDeducirxPago)
            Me.columnUsuario = New DataColumn("Usuario", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUsuario)
            Me.columnNombreUsuario = New DataColumn("NombreUsuario", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNombreUsuario)
            Me.columnCod_Moneda = New DataColumn("Cod_Moneda", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCod_Moneda)
            Me.columnAnulado = New DataColumn("Anulado", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAnulado)
            Me.columnSaldo = New DataColumn("Saldo", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSaldo)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnNumero}, true))
            Me.columnNumero.AutoIncrement = true
            Me.columnNumero.AllowDBNull = false
            Me.columnNumero.ReadOnly = true
            Me.columnNumero.Unique = true
            Me.columnIdentificacion.AllowDBNull = false
            Me.columnNombre.AllowDBNull = false
            Me.columnAdelanto.AllowDBNull = false
            Me.columnPrestamo.AllowDBNull = false
            Me.columnPuesto.AllowDBNull = false
            Me.columnSalario.AllowDBNull = false
            Me.columnFechaComprobante.AllowDBNull = false
            Me.columnNum_Pago.AllowDBNull = false
            Me.columnMonto.AllowDBNull = false
            Me.columnMontoEnLetras.AllowDBNull = false
            Me.columnFechaCobro.AllowDBNull = false
            Me.columnObservaciones.AllowDBNull = false
            Me.columnDeducirxPago.AllowDBNull = false
            Me.columnUsuario.AllowDBNull = false
            Me.columnNombreUsuario.AllowDBNull = false
            Me.columnCod_Moneda.AllowDBNull = false
            Me.columnAnulado.AllowDBNull = false
        End Sub
        
        Public Function NewAdelantosRow() As AdelantosRow
            Return CType(Me.NewRow,AdelantosRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New AdelantosRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(AdelantosRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AdelantosRowChangedEvent) Is Nothing) Then
                RaiseEvent AdelantosRowChanged(Me, New AdelantosRowChangeEvent(CType(e.Row,AdelantosRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AdelantosRowChangingEvent) Is Nothing) Then
                RaiseEvent AdelantosRowChanging(Me, New AdelantosRowChangeEvent(CType(e.Row,AdelantosRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AdelantosRowDeletedEvent) Is Nothing) Then
                RaiseEvent AdelantosRowDeleted(Me, New AdelantosRowChangeEvent(CType(e.Row,AdelantosRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AdelantosRowDeletingEvent) Is Nothing) Then
                RaiseEvent AdelantosRowDeleting(Me, New AdelantosRowChangeEvent(CType(e.Row,AdelantosRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveAdelantosRow(ByVal row As AdelantosRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AdelantosRow
        Inherits DataRow
        
        Private tableAdelantos As AdelantosDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableAdelantos = CType(Me.Table,AdelantosDataTable)
        End Sub
        
        Public Property Numero As Long
            Get
                Return CType(Me(Me.tableAdelantos.NumeroColumn),Long)
            End Get
            Set
                Me(Me.tableAdelantos.NumeroColumn) = value
            End Set
        End Property
        
        Public Property Identificacion As String
            Get
                Return CType(Me(Me.tableAdelantos.IdentificacionColumn),String)
            End Get
            Set
                Me(Me.tableAdelantos.IdentificacionColumn) = value
            End Set
        End Property
        
        Public Property Nombre As String
            Get
                Return CType(Me(Me.tableAdelantos.NombreColumn),String)
            End Get
            Set
                Me(Me.tableAdelantos.NombreColumn) = value
            End Set
        End Property
        
        Public Property Adelanto As Boolean
            Get
                Return CType(Me(Me.tableAdelantos.AdelantoColumn),Boolean)
            End Get
            Set
                Me(Me.tableAdelantos.AdelantoColumn) = value
            End Set
        End Property
        
        Public Property Prestamo As Boolean
            Get
                Return CType(Me(Me.tableAdelantos.PrestamoColumn),Boolean)
            End Get
            Set
                Me(Me.tableAdelantos.PrestamoColumn) = value
            End Set
        End Property
        
        Public Property Puesto As String
            Get
                Return CType(Me(Me.tableAdelantos.PuestoColumn),String)
            End Get
            Set
                Me(Me.tableAdelantos.PuestoColumn) = value
            End Set
        End Property
        
        Public Property Salario As Double
            Get
                Return CType(Me(Me.tableAdelantos.SalarioColumn),Double)
            End Get
            Set
                Me(Me.tableAdelantos.SalarioColumn) = value
            End Set
        End Property
        
        Public Property FechaComprobante As Date
            Get
                Return CType(Me(Me.tableAdelantos.FechaComprobanteColumn),Date)
            End Get
            Set
                Me(Me.tableAdelantos.FechaComprobanteColumn) = value
            End Set
        End Property
        
        Public Property Num_Pago As Integer
            Get
                Return CType(Me(Me.tableAdelantos.Num_PagoColumn),Integer)
            End Get
            Set
                Me(Me.tableAdelantos.Num_PagoColumn) = value
            End Set
        End Property
        
        Public Property Monto As Double
            Get
                Return CType(Me(Me.tableAdelantos.MontoColumn),Double)
            End Get
            Set
                Me(Me.tableAdelantos.MontoColumn) = value
            End Set
        End Property
        
        Public Property MontoEnLetras As String
            Get
                Return CType(Me(Me.tableAdelantos.MontoEnLetrasColumn),String)
            End Get
            Set
                Me(Me.tableAdelantos.MontoEnLetrasColumn) = value
            End Set
        End Property
        
        Public Property FechaCobro As Date
            Get
                Return CType(Me(Me.tableAdelantos.FechaCobroColumn),Date)
            End Get
            Set
                Me(Me.tableAdelantos.FechaCobroColumn) = value
            End Set
        End Property
        
        Public Property Observaciones As String
            Get
                Return CType(Me(Me.tableAdelantos.ObservacionesColumn),String)
            End Get
            Set
                Me(Me.tableAdelantos.ObservacionesColumn) = value
            End Set
        End Property
        
        Public Property DeducirxPago As Double
            Get
                Return CType(Me(Me.tableAdelantos.DeducirxPagoColumn),Double)
            End Get
            Set
                Me(Me.tableAdelantos.DeducirxPagoColumn) = value
            End Set
        End Property
        
        Public Property Usuario As String
            Get
                Return CType(Me(Me.tableAdelantos.UsuarioColumn),String)
            End Get
            Set
                Me(Me.tableAdelantos.UsuarioColumn) = value
            End Set
        End Property
        
        Public Property NombreUsuario As String
            Get
                Return CType(Me(Me.tableAdelantos.NombreUsuarioColumn),String)
            End Get
            Set
                Me(Me.tableAdelantos.NombreUsuarioColumn) = value
            End Set
        End Property
        
        Public Property Cod_Moneda As Integer
            Get
                Return CType(Me(Me.tableAdelantos.Cod_MonedaColumn),Integer)
            End Get
            Set
                Me(Me.tableAdelantos.Cod_MonedaColumn) = value
            End Set
        End Property
        
        Public Property Anulado As Boolean
            Get
                Return CType(Me(Me.tableAdelantos.AnuladoColumn),Boolean)
            End Get
            Set
                Me(Me.tableAdelantos.AnuladoColumn) = value
            End Set
        End Property
        
        Public Property Saldo As Double
            Get
                Try 
                    Return CType(Me(Me.tableAdelantos.SaldoColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAdelantos.SaldoColumn) = value
            End Set
        End Property
        
        Public Function IsSaldoNull() As Boolean
            Return Me.IsNull(Me.tableAdelantos.SaldoColumn)
        End Function
        
        Public Sub SetSaldoNull()
            Me(Me.tableAdelantos.SaldoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AdelantosRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As AdelantosRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As AdelantosRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As AdelantosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DeduccionesDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCodigo As DataColumn
        
        Private columnDescripcion As DataColumn
        
        Private columnMonto As DataColumn
        
        Private columnTipo As DataColumn
        
        Private columnAplica As DataColumn
        
        Private columnCod_Moneda As DataColumn
        
        Friend Sub New()
            MyBase.New("Deducciones")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property CodigoColumn As DataColumn
            Get
                Return Me.columnCodigo
            End Get
        End Property
        
        Friend ReadOnly Property DescripcionColumn As DataColumn
            Get
                Return Me.columnDescripcion
            End Get
        End Property
        
        Friend ReadOnly Property MontoColumn As DataColumn
            Get
                Return Me.columnMonto
            End Get
        End Property
        
        Friend ReadOnly Property TipoColumn As DataColumn
            Get
                Return Me.columnTipo
            End Get
        End Property
        
        Friend ReadOnly Property AplicaColumn As DataColumn
            Get
                Return Me.columnAplica
            End Get
        End Property
        
        Friend ReadOnly Property Cod_MonedaColumn As DataColumn
            Get
                Return Me.columnCod_Moneda
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As DeduccionesRow
            Get
                Return CType(Me.Rows(index),DeduccionesRow)
            End Get
        End Property
        
        Public Event DeduccionesRowChanged As DeduccionesRowChangeEventHandler
        
        Public Event DeduccionesRowChanging As DeduccionesRowChangeEventHandler
        
        Public Event DeduccionesRowDeleted As DeduccionesRowChangeEventHandler
        
        Public Event DeduccionesRowDeleting As DeduccionesRowChangeEventHandler
        
        Public Overloads Sub AddDeduccionesRow(ByVal row As DeduccionesRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddDeduccionesRow(ByVal Descripcion As String, ByVal Monto As Double, ByVal Tipo As String, ByVal Aplica As Boolean, ByVal Cod_Moneda As Integer) As DeduccionesRow
            Dim rowDeduccionesRow As DeduccionesRow = CType(Me.NewRow,DeduccionesRow)
            rowDeduccionesRow.ItemArray = New Object() {Nothing, Descripcion, Monto, Tipo, Aplica, Cod_Moneda}
            Me.Rows.Add(rowDeduccionesRow)
            Return rowDeduccionesRow
        End Function
        
        Public Function FindByCodigo(ByVal Codigo As Integer) As DeduccionesRow
            Return CType(Me.Rows.Find(New Object() {Codigo}),DeduccionesRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As DeduccionesDataTable = CType(MyBase.Clone,DeduccionesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New DeduccionesDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCodigo = Me.Columns("Codigo")
            Me.columnDescripcion = Me.Columns("Descripcion")
            Me.columnMonto = Me.Columns("Monto")
            Me.columnTipo = Me.Columns("Tipo")
            Me.columnAplica = Me.Columns("Aplica")
            Me.columnCod_Moneda = Me.Columns("Cod_Moneda")
        End Sub
        
        Private Sub InitClass()
            Me.columnCodigo = New DataColumn("Codigo", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCodigo)
            Me.columnDescripcion = New DataColumn("Descripcion", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescripcion)
            Me.columnMonto = New DataColumn("Monto", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMonto)
            Me.columnTipo = New DataColumn("Tipo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTipo)
            Me.columnAplica = New DataColumn("Aplica", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAplica)
            Me.columnCod_Moneda = New DataColumn("Cod_Moneda", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCod_Moneda)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnCodigo}, true))
            Me.columnCodigo.AutoIncrement = true
            Me.columnCodigo.AllowDBNull = false
            Me.columnCodigo.ReadOnly = true
            Me.columnCodigo.Unique = true
            Me.columnDescripcion.AllowDBNull = false
            Me.columnMonto.AllowDBNull = false
            Me.columnTipo.AllowDBNull = false
            Me.columnAplica.AllowDBNull = false
            Me.columnCod_Moneda.AllowDBNull = false
        End Sub
        
        Public Function NewDeduccionesRow() As DeduccionesRow
            Return CType(Me.NewRow,DeduccionesRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New DeduccionesRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(DeduccionesRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DeduccionesRowChangedEvent) Is Nothing) Then
                RaiseEvent DeduccionesRowChanged(Me, New DeduccionesRowChangeEvent(CType(e.Row,DeduccionesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DeduccionesRowChangingEvent) Is Nothing) Then
                RaiseEvent DeduccionesRowChanging(Me, New DeduccionesRowChangeEvent(CType(e.Row,DeduccionesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DeduccionesRowDeletedEvent) Is Nothing) Then
                RaiseEvent DeduccionesRowDeleted(Me, New DeduccionesRowChangeEvent(CType(e.Row,DeduccionesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DeduccionesRowDeletingEvent) Is Nothing) Then
                RaiseEvent DeduccionesRowDeleting(Me, New DeduccionesRowChangeEvent(CType(e.Row,DeduccionesRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveDeduccionesRow(ByVal row As DeduccionesRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DeduccionesRow
        Inherits DataRow
        
        Private tableDeducciones As DeduccionesDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableDeducciones = CType(Me.Table,DeduccionesDataTable)
        End Sub
        
        Public Property Codigo As Integer
            Get
                Return CType(Me(Me.tableDeducciones.CodigoColumn),Integer)
            End Get
            Set
                Me(Me.tableDeducciones.CodigoColumn) = value
            End Set
        End Property
        
        Public Property Descripcion As String
            Get
                Return CType(Me(Me.tableDeducciones.DescripcionColumn),String)
            End Get
            Set
                Me(Me.tableDeducciones.DescripcionColumn) = value
            End Set
        End Property
        
        Public Property Monto As Double
            Get
                Return CType(Me(Me.tableDeducciones.MontoColumn),Double)
            End Get
            Set
                Me(Me.tableDeducciones.MontoColumn) = value
            End Set
        End Property
        
        Public Property Tipo As String
            Get
                Return CType(Me(Me.tableDeducciones.TipoColumn),String)
            End Get
            Set
                Me(Me.tableDeducciones.TipoColumn) = value
            End Set
        End Property
        
        Public Property Aplica As Boolean
            Get
                Return CType(Me(Me.tableDeducciones.AplicaColumn),Boolean)
            End Get
            Set
                Me(Me.tableDeducciones.AplicaColumn) = value
            End Set
        End Property
        
        Public Property Cod_Moneda As Integer
            Get
                Return CType(Me(Me.tableDeducciones.Cod_MonedaColumn),Integer)
            End Get
            Set
                Me(Me.tableDeducciones.Cod_MonedaColumn) = value
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DeduccionesRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As DeduccionesRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As DeduccionesRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As DeduccionesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class EmpleadoDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnIdentificacion As DataColumn
        
        Private columnNombre As DataColumn
        
        Private columnEstado_Civil As DataColumn
        
        Private columnHijos As DataColumn
        
        Private columnCod_Nacionalidad As DataColumn
        
        Private columnFecha_Nacimiento As DataColumn
        
        Private columnEdad As DataColumn
        
        Private columnTelefono1 As DataColumn
        
        Private columnTelefono2 As DataColumn
        
        Private columnEmail As DataColumn
        
        Private columnDireccion As DataColumn
        
        Private columnPuesto As DataColumn
        
        Private columnFecha_Ingreso As DataColumn
        
        Private columnFecha_Salida As DataColumn
        
        Private columnSalario As DataColumn
        
        Private columnCod_Departamento As DataColumn
        
        Private columnMasculino As DataColumn
        
        Private columnFemenino As DataColumn
        
        Private columnCod_Moneda As DataColumn
        
        Private columnHora As DataColumn
        
        Private columnDiario As DataColumn
        
        Private columnSemana As DataColumn
        
        Private columnQuincena As DataColumn
        
        Private columnMensual As DataColumn
        
        Private columnCod_Estado As DataColumn
        
        Private columnFoto As DataColumn
        
        Friend Sub New()
            MyBase.New("Empleado")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IdentificacionColumn As DataColumn
            Get
                Return Me.columnIdentificacion
            End Get
        End Property
        
        Friend ReadOnly Property NombreColumn As DataColumn
            Get
                Return Me.columnNombre
            End Get
        End Property
        
        Friend ReadOnly Property Estado_CivilColumn As DataColumn
            Get
                Return Me.columnEstado_Civil
            End Get
        End Property
        
        Friend ReadOnly Property HijosColumn As DataColumn
            Get
                Return Me.columnHijos
            End Get
        End Property
        
        Friend ReadOnly Property Cod_NacionalidadColumn As DataColumn
            Get
                Return Me.columnCod_Nacionalidad
            End Get
        End Property
        
        Friend ReadOnly Property Fecha_NacimientoColumn As DataColumn
            Get
                Return Me.columnFecha_Nacimiento
            End Get
        End Property
        
        Friend ReadOnly Property EdadColumn As DataColumn
            Get
                Return Me.columnEdad
            End Get
        End Property
        
        Friend ReadOnly Property Telefono1Column As DataColumn
            Get
                Return Me.columnTelefono1
            End Get
        End Property
        
        Friend ReadOnly Property Telefono2Column As DataColumn
            Get
                Return Me.columnTelefono2
            End Get
        End Property
        
        Friend ReadOnly Property EmailColumn As DataColumn
            Get
                Return Me.columnEmail
            End Get
        End Property
        
        Friend ReadOnly Property DireccionColumn As DataColumn
            Get
                Return Me.columnDireccion
            End Get
        End Property
        
        Friend ReadOnly Property PuestoColumn As DataColumn
            Get
                Return Me.columnPuesto
            End Get
        End Property
        
        Friend ReadOnly Property Fecha_IngresoColumn As DataColumn
            Get
                Return Me.columnFecha_Ingreso
            End Get
        End Property
        
        Friend ReadOnly Property Fecha_SalidaColumn As DataColumn
            Get
                Return Me.columnFecha_Salida
            End Get
        End Property
        
        Friend ReadOnly Property SalarioColumn As DataColumn
            Get
                Return Me.columnSalario
            End Get
        End Property
        
        Friend ReadOnly Property Cod_DepartamentoColumn As DataColumn
            Get
                Return Me.columnCod_Departamento
            End Get
        End Property
        
        Friend ReadOnly Property MasculinoColumn As DataColumn
            Get
                Return Me.columnMasculino
            End Get
        End Property
        
        Friend ReadOnly Property FemeninoColumn As DataColumn
            Get
                Return Me.columnFemenino
            End Get
        End Property
        
        Friend ReadOnly Property Cod_MonedaColumn As DataColumn
            Get
                Return Me.columnCod_Moneda
            End Get
        End Property
        
        Friend ReadOnly Property HoraColumn As DataColumn
            Get
                Return Me.columnHora
            End Get
        End Property
        
        Friend ReadOnly Property DiarioColumn As DataColumn
            Get
                Return Me.columnDiario
            End Get
        End Property
        
        Friend ReadOnly Property SemanaColumn As DataColumn
            Get
                Return Me.columnSemana
            End Get
        End Property
        
        Friend ReadOnly Property QuincenaColumn As DataColumn
            Get
                Return Me.columnQuincena
            End Get
        End Property
        
        Friend ReadOnly Property MensualColumn As DataColumn
            Get
                Return Me.columnMensual
            End Get
        End Property
        
        Friend ReadOnly Property Cod_EstadoColumn As DataColumn
            Get
                Return Me.columnCod_Estado
            End Get
        End Property
        
        Friend ReadOnly Property FotoColumn As DataColumn
            Get
                Return Me.columnFoto
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As EmpleadoRow
            Get
                Return CType(Me.Rows(index),EmpleadoRow)
            End Get
        End Property
        
        Public Event EmpleadoRowChanged As EmpleadoRowChangeEventHandler
        
        Public Event EmpleadoRowChanging As EmpleadoRowChangeEventHandler
        
        Public Event EmpleadoRowDeleted As EmpleadoRowChangeEventHandler
        
        Public Event EmpleadoRowDeleting As EmpleadoRowChangeEventHandler
        
        Public Overloads Sub AddEmpleadoRow(ByVal row As EmpleadoRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddEmpleadoRow( _
                    ByVal Identificacion As String,  _
                    ByVal Nombre As String,  _
                    ByVal Estado_Civil As String,  _
                    ByVal Hijos As Integer,  _
                    ByVal Cod_Nacionalidad As Integer,  _
                    ByVal Fecha_Nacimiento As Date,  _
                    ByVal Edad As Integer,  _
                    ByVal Telefono1 As String,  _
                    ByVal Telefono2 As String,  _
                    ByVal Email As String,  _
                    ByVal Direccion As String,  _
                    ByVal Puesto As String,  _
                    ByVal Fecha_Ingreso As Date,  _
                    ByVal Fecha_Salida As Date,  _
                    ByVal Salario As Double,  _
                    ByVal Cod_Departamento As Integer,  _
                    ByVal Masculino As Boolean,  _
                    ByVal Femenino As Boolean,  _
                    ByVal Cod_Moneda As Integer,  _
                    ByVal Hora As Boolean,  _
                    ByVal Diario As Boolean,  _
                    ByVal Semana As Boolean,  _
                    ByVal Quincena As Boolean,  _
                    ByVal Mensual As Boolean,  _
                    ByVal Cod_Estado As Integer,  _
                    ByVal Foto() As Byte) As EmpleadoRow
            Dim rowEmpleadoRow As EmpleadoRow = CType(Me.NewRow,EmpleadoRow)
            rowEmpleadoRow.ItemArray = New Object() {Identificacion, Nombre, Estado_Civil, Hijos, Cod_Nacionalidad, Fecha_Nacimiento, Edad, Telefono1, Telefono2, Email, Direccion, Puesto, Fecha_Ingreso, Fecha_Salida, Salario, Cod_Departamento, Masculino, Femenino, Cod_Moneda, Hora, Diario, Semana, Quincena, Mensual, Cod_Estado, Foto}
            Me.Rows.Add(rowEmpleadoRow)
            Return rowEmpleadoRow
        End Function
        
        Public Function FindByIdentificacion(ByVal Identificacion As String) As EmpleadoRow
            Return CType(Me.Rows.Find(New Object() {Identificacion}),EmpleadoRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As EmpleadoDataTable = CType(MyBase.Clone,EmpleadoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New EmpleadoDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnIdentificacion = Me.Columns("Identificacion")
            Me.columnNombre = Me.Columns("Nombre")
            Me.columnEstado_Civil = Me.Columns("Estado_Civil")
            Me.columnHijos = Me.Columns("Hijos")
            Me.columnCod_Nacionalidad = Me.Columns("Cod_Nacionalidad")
            Me.columnFecha_Nacimiento = Me.Columns("Fecha_Nacimiento")
            Me.columnEdad = Me.Columns("Edad")
            Me.columnTelefono1 = Me.Columns("Telefono1")
            Me.columnTelefono2 = Me.Columns("Telefono2")
            Me.columnEmail = Me.Columns("Email")
            Me.columnDireccion = Me.Columns("Direccion")
            Me.columnPuesto = Me.Columns("Puesto")
            Me.columnFecha_Ingreso = Me.Columns("Fecha_Ingreso")
            Me.columnFecha_Salida = Me.Columns("Fecha_Salida")
            Me.columnSalario = Me.Columns("Salario")
            Me.columnCod_Departamento = Me.Columns("Cod_Departamento")
            Me.columnMasculino = Me.Columns("Masculino")
            Me.columnFemenino = Me.Columns("Femenino")
            Me.columnCod_Moneda = Me.Columns("Cod_Moneda")
            Me.columnHora = Me.Columns("Hora")
            Me.columnDiario = Me.Columns("Diario")
            Me.columnSemana = Me.Columns("Semana")
            Me.columnQuincena = Me.Columns("Quincena")
            Me.columnMensual = Me.Columns("Mensual")
            Me.columnCod_Estado = Me.Columns("Cod_Estado")
            Me.columnFoto = Me.Columns("Foto")
        End Sub
        
        Private Sub InitClass()
            Me.columnIdentificacion = New DataColumn("Identificacion", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdentificacion)
            Me.columnNombre = New DataColumn("Nombre", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNombre)
            Me.columnEstado_Civil = New DataColumn("Estado_Civil", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEstado_Civil)
            Me.columnHijos = New DataColumn("Hijos", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHijos)
            Me.columnCod_Nacionalidad = New DataColumn("Cod_Nacionalidad", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCod_Nacionalidad)
            Me.columnFecha_Nacimiento = New DataColumn("Fecha_Nacimiento", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFecha_Nacimiento)
            Me.columnEdad = New DataColumn("Edad", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEdad)
            Me.columnTelefono1 = New DataColumn("Telefono1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTelefono1)
            Me.columnTelefono2 = New DataColumn("Telefono2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTelefono2)
            Me.columnEmail = New DataColumn("Email", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEmail)
            Me.columnDireccion = New DataColumn("Direccion", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDireccion)
            Me.columnPuesto = New DataColumn("Puesto", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPuesto)
            Me.columnFecha_Ingreso = New DataColumn("Fecha_Ingreso", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFecha_Ingreso)
            Me.columnFecha_Salida = New DataColumn("Fecha_Salida", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFecha_Salida)
            Me.columnSalario = New DataColumn("Salario", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSalario)
            Me.columnCod_Departamento = New DataColumn("Cod_Departamento", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCod_Departamento)
            Me.columnMasculino = New DataColumn("Masculino", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMasculino)
            Me.columnFemenino = New DataColumn("Femenino", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFemenino)
            Me.columnCod_Moneda = New DataColumn("Cod_Moneda", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCod_Moneda)
            Me.columnHora = New DataColumn("Hora", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHora)
            Me.columnDiario = New DataColumn("Diario", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDiario)
            Me.columnSemana = New DataColumn("Semana", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSemana)
            Me.columnQuincena = New DataColumn("Quincena", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnQuincena)
            Me.columnMensual = New DataColumn("Mensual", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMensual)
            Me.columnCod_Estado = New DataColumn("Cod_Estado", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCod_Estado)
            Me.columnFoto = New DataColumn("Foto", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFoto)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnIdentificacion}, true))
            Me.columnIdentificacion.AllowDBNull = false
            Me.columnIdentificacion.Unique = true
            Me.columnNombre.AllowDBNull = false
            Me.columnEstado_Civil.AllowDBNull = false
            Me.columnHijos.AllowDBNull = false
            Me.columnCod_Nacionalidad.AllowDBNull = false
            Me.columnFecha_Nacimiento.AllowDBNull = false
            Me.columnEdad.AllowDBNull = false
            Me.columnTelefono1.AllowDBNull = false
            Me.columnTelefono2.AllowDBNull = false
            Me.columnEmail.AllowDBNull = false
            Me.columnDireccion.AllowDBNull = false
            Me.columnPuesto.AllowDBNull = false
            Me.columnFecha_Ingreso.AllowDBNull = false
            Me.columnFecha_Salida.AllowDBNull = false
            Me.columnSalario.AllowDBNull = false
            Me.columnCod_Departamento.AllowDBNull = false
            Me.columnMasculino.AllowDBNull = false
            Me.columnFemenino.AllowDBNull = false
            Me.columnCod_Moneda.AllowDBNull = false
            Me.columnHora.AllowDBNull = false
            Me.columnDiario.AllowDBNull = false
            Me.columnSemana.AllowDBNull = false
            Me.columnQuincena.AllowDBNull = false
            Me.columnMensual.AllowDBNull = false
            Me.columnCod_Estado.AllowDBNull = false
        End Sub
        
        Public Function NewEmpleadoRow() As EmpleadoRow
            Return CType(Me.NewRow,EmpleadoRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New EmpleadoRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(EmpleadoRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EmpleadoRowChangedEvent) Is Nothing) Then
                RaiseEvent EmpleadoRowChanged(Me, New EmpleadoRowChangeEvent(CType(e.Row,EmpleadoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EmpleadoRowChangingEvent) Is Nothing) Then
                RaiseEvent EmpleadoRowChanging(Me, New EmpleadoRowChangeEvent(CType(e.Row,EmpleadoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EmpleadoRowDeletedEvent) Is Nothing) Then
                RaiseEvent EmpleadoRowDeleted(Me, New EmpleadoRowChangeEvent(CType(e.Row,EmpleadoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EmpleadoRowDeletingEvent) Is Nothing) Then
                RaiseEvent EmpleadoRowDeleting(Me, New EmpleadoRowChangeEvent(CType(e.Row,EmpleadoRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveEmpleadoRow(ByVal row As EmpleadoRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class EmpleadoRow
        Inherits DataRow
        
        Private tableEmpleado As EmpleadoDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableEmpleado = CType(Me.Table,EmpleadoDataTable)
        End Sub
        
        Public Property Identificacion As String
            Get
                Return CType(Me(Me.tableEmpleado.IdentificacionColumn),String)
            End Get
            Set
                Me(Me.tableEmpleado.IdentificacionColumn) = value
            End Set
        End Property
        
        Public Property Nombre As String
            Get
                Return CType(Me(Me.tableEmpleado.NombreColumn),String)
            End Get
            Set
                Me(Me.tableEmpleado.NombreColumn) = value
            End Set
        End Property
        
        Public Property Estado_Civil As String
            Get
                Return CType(Me(Me.tableEmpleado.Estado_CivilColumn),String)
            End Get
            Set
                Me(Me.tableEmpleado.Estado_CivilColumn) = value
            End Set
        End Property
        
        Public Property Hijos As Integer
            Get
                Return CType(Me(Me.tableEmpleado.HijosColumn),Integer)
            End Get
            Set
                Me(Me.tableEmpleado.HijosColumn) = value
            End Set
        End Property
        
        Public Property Cod_Nacionalidad As Integer
            Get
                Return CType(Me(Me.tableEmpleado.Cod_NacionalidadColumn),Integer)
            End Get
            Set
                Me(Me.tableEmpleado.Cod_NacionalidadColumn) = value
            End Set
        End Property
        
        Public Property Fecha_Nacimiento As Date
            Get
                Return CType(Me(Me.tableEmpleado.Fecha_NacimientoColumn),Date)
            End Get
            Set
                Me(Me.tableEmpleado.Fecha_NacimientoColumn) = value
            End Set
        End Property
        
        Public Property Edad As Integer
            Get
                Return CType(Me(Me.tableEmpleado.EdadColumn),Integer)
            End Get
            Set
                Me(Me.tableEmpleado.EdadColumn) = value
            End Set
        End Property
        
        Public Property Telefono1 As String
            Get
                Return CType(Me(Me.tableEmpleado.Telefono1Column),String)
            End Get
            Set
                Me(Me.tableEmpleado.Telefono1Column) = value
            End Set
        End Property
        
        Public Property Telefono2 As String
            Get
                Return CType(Me(Me.tableEmpleado.Telefono2Column),String)
            End Get
            Set
                Me(Me.tableEmpleado.Telefono2Column) = value
            End Set
        End Property
        
        Public Property Email As String
            Get
                Return CType(Me(Me.tableEmpleado.EmailColumn),String)
            End Get
            Set
                Me(Me.tableEmpleado.EmailColumn) = value
            End Set
        End Property
        
        Public Property Direccion As String
            Get
                Return CType(Me(Me.tableEmpleado.DireccionColumn),String)
            End Get
            Set
                Me(Me.tableEmpleado.DireccionColumn) = value
            End Set
        End Property
        
        Public Property Puesto As String
            Get
                Return CType(Me(Me.tableEmpleado.PuestoColumn),String)
            End Get
            Set
                Me(Me.tableEmpleado.PuestoColumn) = value
            End Set
        End Property
        
        Public Property Fecha_Ingreso As Date
            Get
                Return CType(Me(Me.tableEmpleado.Fecha_IngresoColumn),Date)
            End Get
            Set
                Me(Me.tableEmpleado.Fecha_IngresoColumn) = value
            End Set
        End Property
        
        Public Property Fecha_Salida As Date
            Get
                Return CType(Me(Me.tableEmpleado.Fecha_SalidaColumn),Date)
            End Get
            Set
                Me(Me.tableEmpleado.Fecha_SalidaColumn) = value
            End Set
        End Property
        
        Public Property Salario As Double
            Get
                Return CType(Me(Me.tableEmpleado.SalarioColumn),Double)
            End Get
            Set
                Me(Me.tableEmpleado.SalarioColumn) = value
            End Set
        End Property
        
        Public Property Cod_Departamento As Integer
            Get
                Return CType(Me(Me.tableEmpleado.Cod_DepartamentoColumn),Integer)
            End Get
            Set
                Me(Me.tableEmpleado.Cod_DepartamentoColumn) = value
            End Set
        End Property
        
        Public Property Masculino As Boolean
            Get
                Return CType(Me(Me.tableEmpleado.MasculinoColumn),Boolean)
            End Get
            Set
                Me(Me.tableEmpleado.MasculinoColumn) = value
            End Set
        End Property
        
        Public Property Femenino As Boolean
            Get
                Return CType(Me(Me.tableEmpleado.FemeninoColumn),Boolean)
            End Get
            Set
                Me(Me.tableEmpleado.FemeninoColumn) = value
            End Set
        End Property
        
        Public Property Cod_Moneda As Integer
            Get
                Return CType(Me(Me.tableEmpleado.Cod_MonedaColumn),Integer)
            End Get
            Set
                Me(Me.tableEmpleado.Cod_MonedaColumn) = value
            End Set
        End Property
        
        Public Property Hora As Boolean
            Get
                Return CType(Me(Me.tableEmpleado.HoraColumn),Boolean)
            End Get
            Set
                Me(Me.tableEmpleado.HoraColumn) = value
            End Set
        End Property
        
        Public Property Diario As Boolean
            Get
                Return CType(Me(Me.tableEmpleado.DiarioColumn),Boolean)
            End Get
            Set
                Me(Me.tableEmpleado.DiarioColumn) = value
            End Set
        End Property
        
        Public Property Semana As Boolean
            Get
                Return CType(Me(Me.tableEmpleado.SemanaColumn),Boolean)
            End Get
            Set
                Me(Me.tableEmpleado.SemanaColumn) = value
            End Set
        End Property
        
        Public Property Quincena As Boolean
            Get
                Return CType(Me(Me.tableEmpleado.QuincenaColumn),Boolean)
            End Get
            Set
                Me(Me.tableEmpleado.QuincenaColumn) = value
            End Set
        End Property
        
        Public Property Mensual As Boolean
            Get
                Return CType(Me(Me.tableEmpleado.MensualColumn),Boolean)
            End Get
            Set
                Me(Me.tableEmpleado.MensualColumn) = value
            End Set
        End Property
        
        Public Property Cod_Estado As Integer
            Get
                Return CType(Me(Me.tableEmpleado.Cod_EstadoColumn),Integer)
            End Get
            Set
                Me(Me.tableEmpleado.Cod_EstadoColumn) = value
            End Set
        End Property
        
        Public Property Foto As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableEmpleado.FotoColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEmpleado.FotoColumn) = value
            End Set
        End Property
        
        Public Function IsFotoNull() As Boolean
            Return Me.IsNull(Me.tableEmpleado.FotoColumn)
        End Function
        
        Public Sub SetFotoNull()
            Me(Me.tableEmpleado.FotoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class EmpleadoRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As EmpleadoRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As EmpleadoRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As EmpleadoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Empleado_DeduccionesDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnId As DataColumn
        
        Private columnIdentificacion As DataColumn
        
        Private columnCodigo As DataColumn
        
        Private columnDescripcion As DataColumn
        
        Private columnMonto As DataColumn
        
        Private columnTipo As DataColumn
        
        Private columnCod_Moneda As DataColumn
        
        Friend Sub New()
            MyBase.New("Empleado_Deducciones")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IdColumn As DataColumn
            Get
                Return Me.columnId
            End Get
        End Property
        
        Friend ReadOnly Property IdentificacionColumn As DataColumn
            Get
                Return Me.columnIdentificacion
            End Get
        End Property
        
        Friend ReadOnly Property CodigoColumn As DataColumn
            Get
                Return Me.columnCodigo
            End Get
        End Property
        
        Friend ReadOnly Property DescripcionColumn As DataColumn
            Get
                Return Me.columnDescripcion
            End Get
        End Property
        
        Friend ReadOnly Property MontoColumn As DataColumn
            Get
                Return Me.columnMonto
            End Get
        End Property
        
        Friend ReadOnly Property TipoColumn As DataColumn
            Get
                Return Me.columnTipo
            End Get
        End Property
        
        Friend ReadOnly Property Cod_MonedaColumn As DataColumn
            Get
                Return Me.columnCod_Moneda
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Empleado_DeduccionesRow
            Get
                Return CType(Me.Rows(index),Empleado_DeduccionesRow)
            End Get
        End Property
        
        Public Event Empleado_DeduccionesRowChanged As Empleado_DeduccionesRowChangeEventHandler
        
        Public Event Empleado_DeduccionesRowChanging As Empleado_DeduccionesRowChangeEventHandler
        
        Public Event Empleado_DeduccionesRowDeleted As Empleado_DeduccionesRowChangeEventHandler
        
        Public Event Empleado_DeduccionesRowDeleting As Empleado_DeduccionesRowChangeEventHandler
        
        Public Overloads Sub AddEmpleado_DeduccionesRow(ByVal row As Empleado_DeduccionesRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddEmpleado_DeduccionesRow(ByVal Identificacion As String, ByVal Codigo As Integer, ByVal Descripcion As String, ByVal Monto As Double, ByVal Tipo As String, ByVal Cod_Moneda As Integer) As Empleado_DeduccionesRow
            Dim rowEmpleado_DeduccionesRow As Empleado_DeduccionesRow = CType(Me.NewRow,Empleado_DeduccionesRow)
            rowEmpleado_DeduccionesRow.ItemArray = New Object() {Nothing, Identificacion, Codigo, Descripcion, Monto, Tipo, Cod_Moneda}
            Me.Rows.Add(rowEmpleado_DeduccionesRow)
            Return rowEmpleado_DeduccionesRow
        End Function
        
        Public Function FindById(ByVal Id As Long) As Empleado_DeduccionesRow
            Return CType(Me.Rows.Find(New Object() {Id}),Empleado_DeduccionesRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Empleado_DeduccionesDataTable = CType(MyBase.Clone,Empleado_DeduccionesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Empleado_DeduccionesDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnId = Me.Columns("Id")
            Me.columnIdentificacion = Me.Columns("Identificacion")
            Me.columnCodigo = Me.Columns("Codigo")
            Me.columnDescripcion = Me.Columns("Descripcion")
            Me.columnMonto = Me.Columns("Monto")
            Me.columnTipo = Me.Columns("Tipo")
            Me.columnCod_Moneda = Me.Columns("Cod_Moneda")
        End Sub
        
        Private Sub InitClass()
            Me.columnId = New DataColumn("Id", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId)
            Me.columnIdentificacion = New DataColumn("Identificacion", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdentificacion)
            Me.columnCodigo = New DataColumn("Codigo", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCodigo)
            Me.columnDescripcion = New DataColumn("Descripcion", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescripcion)
            Me.columnMonto = New DataColumn("Monto", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMonto)
            Me.columnTipo = New DataColumn("Tipo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTipo)
            Me.columnCod_Moneda = New DataColumn("Cod_Moneda", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCod_Moneda)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnId}, true))
            Me.columnId.AutoIncrement = true
            Me.columnId.AllowDBNull = false
            Me.columnId.ReadOnly = true
            Me.columnId.Unique = true
            Me.columnIdentificacion.AllowDBNull = false
            Me.columnCodigo.AllowDBNull = false
            Me.columnDescripcion.AllowDBNull = false
            Me.columnMonto.AllowDBNull = false
            Me.columnTipo.AllowDBNull = false
            Me.columnCod_Moneda.AllowDBNull = false
        End Sub
        
        Public Function NewEmpleado_DeduccionesRow() As Empleado_DeduccionesRow
            Return CType(Me.NewRow,Empleado_DeduccionesRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Empleado_DeduccionesRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Empleado_DeduccionesRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Empleado_DeduccionesRowChangedEvent) Is Nothing) Then
                RaiseEvent Empleado_DeduccionesRowChanged(Me, New Empleado_DeduccionesRowChangeEvent(CType(e.Row,Empleado_DeduccionesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Empleado_DeduccionesRowChangingEvent) Is Nothing) Then
                RaiseEvent Empleado_DeduccionesRowChanging(Me, New Empleado_DeduccionesRowChangeEvent(CType(e.Row,Empleado_DeduccionesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Empleado_DeduccionesRowDeletedEvent) Is Nothing) Then
                RaiseEvent Empleado_DeduccionesRowDeleted(Me, New Empleado_DeduccionesRowChangeEvent(CType(e.Row,Empleado_DeduccionesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Empleado_DeduccionesRowDeletingEvent) Is Nothing) Then
                RaiseEvent Empleado_DeduccionesRowDeleting(Me, New Empleado_DeduccionesRowChangeEvent(CType(e.Row,Empleado_DeduccionesRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveEmpleado_DeduccionesRow(ByVal row As Empleado_DeduccionesRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Empleado_DeduccionesRow
        Inherits DataRow
        
        Private tableEmpleado_Deducciones As Empleado_DeduccionesDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableEmpleado_Deducciones = CType(Me.Table,Empleado_DeduccionesDataTable)
        End Sub
        
        Public Property Id As Long
            Get
                Return CType(Me(Me.tableEmpleado_Deducciones.IdColumn),Long)
            End Get
            Set
                Me(Me.tableEmpleado_Deducciones.IdColumn) = value
            End Set
        End Property
        
        Public Property Identificacion As String
            Get
                Return CType(Me(Me.tableEmpleado_Deducciones.IdentificacionColumn),String)
            End Get
            Set
                Me(Me.tableEmpleado_Deducciones.IdentificacionColumn) = value
            End Set
        End Property
        
        Public Property Codigo As Integer
            Get
                Return CType(Me(Me.tableEmpleado_Deducciones.CodigoColumn),Integer)
            End Get
            Set
                Me(Me.tableEmpleado_Deducciones.CodigoColumn) = value
            End Set
        End Property
        
        Public Property Descripcion As String
            Get
                Return CType(Me(Me.tableEmpleado_Deducciones.DescripcionColumn),String)
            End Get
            Set
                Me(Me.tableEmpleado_Deducciones.DescripcionColumn) = value
            End Set
        End Property
        
        Public Property Monto As Double
            Get
                Return CType(Me(Me.tableEmpleado_Deducciones.MontoColumn),Double)
            End Get
            Set
                Me(Me.tableEmpleado_Deducciones.MontoColumn) = value
            End Set
        End Property
        
        Public Property Tipo As String
            Get
                Return CType(Me(Me.tableEmpleado_Deducciones.TipoColumn),String)
            End Get
            Set
                Me(Me.tableEmpleado_Deducciones.TipoColumn) = value
            End Set
        End Property
        
        Public Property Cod_Moneda As Integer
            Get
                Return CType(Me(Me.tableEmpleado_Deducciones.Cod_MonedaColumn),Integer)
            End Get
            Set
                Me(Me.tableEmpleado_Deducciones.Cod_MonedaColumn) = value
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Empleado_DeduccionesRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Empleado_DeduccionesRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Empleado_DeduccionesRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Empleado_DeduccionesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class HorasTrabajadasDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnId As DataColumn
        
        Private columnIdentificacion As DataColumn
        
        Private columnFecha As DataColumn
        
        Private columnHoraOrdinaria As DataColumn
        
        Private columnHoraExtra As DataColumn
        
        Private columnHoraDoble As DataColumn
        
        Private columnId_Proyecto As DataColumn
        
        Friend Sub New()
            MyBase.New("HorasTrabajadas")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IdColumn As DataColumn
            Get
                Return Me.columnId
            End Get
        End Property
        
        Friend ReadOnly Property IdentificacionColumn As DataColumn
            Get
                Return Me.columnIdentificacion
            End Get
        End Property
        
        Friend ReadOnly Property FechaColumn As DataColumn
            Get
                Return Me.columnFecha
            End Get
        End Property
        
        Friend ReadOnly Property HoraOrdinariaColumn As DataColumn
            Get
                Return Me.columnHoraOrdinaria
            End Get
        End Property
        
        Friend ReadOnly Property HoraExtraColumn As DataColumn
            Get
                Return Me.columnHoraExtra
            End Get
        End Property
        
        Friend ReadOnly Property HoraDobleColumn As DataColumn
            Get
                Return Me.columnHoraDoble
            End Get
        End Property
        
        Friend ReadOnly Property Id_ProyectoColumn As DataColumn
            Get
                Return Me.columnId_Proyecto
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As HorasTrabajadasRow
            Get
                Return CType(Me.Rows(index),HorasTrabajadasRow)
            End Get
        End Property
        
        Public Event HorasTrabajadasRowChanged As HorasTrabajadasRowChangeEventHandler
        
        Public Event HorasTrabajadasRowChanging As HorasTrabajadasRowChangeEventHandler
        
        Public Event HorasTrabajadasRowDeleted As HorasTrabajadasRowChangeEventHandler
        
        Public Event HorasTrabajadasRowDeleting As HorasTrabajadasRowChangeEventHandler
        
        Public Overloads Sub AddHorasTrabajadasRow(ByVal row As HorasTrabajadasRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddHorasTrabajadasRow(ByVal Identificacion As String, ByVal Fecha As Date, ByVal HoraOrdinaria As Double, ByVal HoraExtra As String, ByVal HoraDoble As String, ByVal Id_Proyecto As Integer) As HorasTrabajadasRow
            Dim rowHorasTrabajadasRow As HorasTrabajadasRow = CType(Me.NewRow,HorasTrabajadasRow)
            rowHorasTrabajadasRow.ItemArray = New Object() {Nothing, Identificacion, Fecha, HoraOrdinaria, HoraExtra, HoraDoble, Id_Proyecto}
            Me.Rows.Add(rowHorasTrabajadasRow)
            Return rowHorasTrabajadasRow
        End Function
        
        Public Function FindById(ByVal Id As Long) As HorasTrabajadasRow
            Return CType(Me.Rows.Find(New Object() {Id}),HorasTrabajadasRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As HorasTrabajadasDataTable = CType(MyBase.Clone,HorasTrabajadasDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New HorasTrabajadasDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnId = Me.Columns("Id")
            Me.columnIdentificacion = Me.Columns("Identificacion")
            Me.columnFecha = Me.Columns("Fecha")
            Me.columnHoraOrdinaria = Me.Columns("HoraOrdinaria")
            Me.columnHoraExtra = Me.Columns("HoraExtra")
            Me.columnHoraDoble = Me.Columns("HoraDoble")
            Me.columnId_Proyecto = Me.Columns("Id_Proyecto")
        End Sub
        
        Private Sub InitClass()
            Me.columnId = New DataColumn("Id", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId)
            Me.columnIdentificacion = New DataColumn("Identificacion", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdentificacion)
            Me.columnFecha = New DataColumn("Fecha", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFecha)
            Me.columnHoraOrdinaria = New DataColumn("HoraOrdinaria", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHoraOrdinaria)
            Me.columnHoraExtra = New DataColumn("HoraExtra", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHoraExtra)
            Me.columnHoraDoble = New DataColumn("HoraDoble", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHoraDoble)
            Me.columnId_Proyecto = New DataColumn("Id_Proyecto", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId_Proyecto)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnId}, true))
            Me.columnId.AutoIncrement = true
            Me.columnId.AllowDBNull = false
            Me.columnId.ReadOnly = true
            Me.columnId.Unique = true
            Me.columnIdentificacion.AllowDBNull = false
            Me.columnFecha.AllowDBNull = false
            Me.columnHoraOrdinaria.AllowDBNull = false
            Me.columnHoraExtra.AllowDBNull = false
            Me.columnHoraDoble.AllowDBNull = false
            Me.columnId_Proyecto.AllowDBNull = false
        End Sub
        
        Public Function NewHorasTrabajadasRow() As HorasTrabajadasRow
            Return CType(Me.NewRow,HorasTrabajadasRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New HorasTrabajadasRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(HorasTrabajadasRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.HorasTrabajadasRowChangedEvent) Is Nothing) Then
                RaiseEvent HorasTrabajadasRowChanged(Me, New HorasTrabajadasRowChangeEvent(CType(e.Row,HorasTrabajadasRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.HorasTrabajadasRowChangingEvent) Is Nothing) Then
                RaiseEvent HorasTrabajadasRowChanging(Me, New HorasTrabajadasRowChangeEvent(CType(e.Row,HorasTrabajadasRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.HorasTrabajadasRowDeletedEvent) Is Nothing) Then
                RaiseEvent HorasTrabajadasRowDeleted(Me, New HorasTrabajadasRowChangeEvent(CType(e.Row,HorasTrabajadasRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.HorasTrabajadasRowDeletingEvent) Is Nothing) Then
                RaiseEvent HorasTrabajadasRowDeleting(Me, New HorasTrabajadasRowChangeEvent(CType(e.Row,HorasTrabajadasRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveHorasTrabajadasRow(ByVal row As HorasTrabajadasRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class HorasTrabajadasRow
        Inherits DataRow
        
        Private tableHorasTrabajadas As HorasTrabajadasDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableHorasTrabajadas = CType(Me.Table,HorasTrabajadasDataTable)
        End Sub
        
        Public Property Id As Long
            Get
                Return CType(Me(Me.tableHorasTrabajadas.IdColumn),Long)
            End Get
            Set
                Me(Me.tableHorasTrabajadas.IdColumn) = value
            End Set
        End Property
        
        Public Property Identificacion As String
            Get
                Return CType(Me(Me.tableHorasTrabajadas.IdentificacionColumn),String)
            End Get
            Set
                Me(Me.tableHorasTrabajadas.IdentificacionColumn) = value
            End Set
        End Property
        
        Public Property Fecha As Date
            Get
                Return CType(Me(Me.tableHorasTrabajadas.FechaColumn),Date)
            End Get
            Set
                Me(Me.tableHorasTrabajadas.FechaColumn) = value
            End Set
        End Property
        
        Public Property HoraOrdinaria As Double
            Get
                Return CType(Me(Me.tableHorasTrabajadas.HoraOrdinariaColumn),Double)
            End Get
            Set
                Me(Me.tableHorasTrabajadas.HoraOrdinariaColumn) = value
            End Set
        End Property
        
        Public Property HoraExtra As String
            Get
                Return CType(Me(Me.tableHorasTrabajadas.HoraExtraColumn),String)
            End Get
            Set
                Me(Me.tableHorasTrabajadas.HoraExtraColumn) = value
            End Set
        End Property
        
        Public Property HoraDoble As String
            Get
                Return CType(Me(Me.tableHorasTrabajadas.HoraDobleColumn),String)
            End Get
            Set
                Me(Me.tableHorasTrabajadas.HoraDobleColumn) = value
            End Set
        End Property
        
        Public Property Id_Proyecto As Integer
            Get
                Return CType(Me(Me.tableHorasTrabajadas.Id_ProyectoColumn),Integer)
            End Get
            Set
                Me(Me.tableHorasTrabajadas.Id_ProyectoColumn) = value
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class HorasTrabajadasRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As HorasTrabajadasRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As HorasTrabajadasRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As HorasTrabajadasRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ParametroRentaDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnId As DataColumn
        
        Private columnMontoExento As DataColumn
        
        Private columnMontoDe As DataColumn
        
        Private columnMontoHasta As DataColumn
        
        Private columnPorcentaje1 As DataColumn
        
        Private columnMontoEnAdelante As DataColumn
        
        Private columnPorcentaje2 As DataColumn
        
        Private columnEsposa As DataColumn
        
        Private columnHijo As DataColumn
        
        Friend Sub New()
            MyBase.New("ParametroRenta")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IdColumn As DataColumn
            Get
                Return Me.columnId
            End Get
        End Property
        
        Friend ReadOnly Property MontoExentoColumn As DataColumn
            Get
                Return Me.columnMontoExento
            End Get
        End Property
        
        Friend ReadOnly Property MontoDeColumn As DataColumn
            Get
                Return Me.columnMontoDe
            End Get
        End Property
        
        Friend ReadOnly Property MontoHastaColumn As DataColumn
            Get
                Return Me.columnMontoHasta
            End Get
        End Property
        
        Friend ReadOnly Property Porcentaje1Column As DataColumn
            Get
                Return Me.columnPorcentaje1
            End Get
        End Property
        
        Friend ReadOnly Property MontoEnAdelanteColumn As DataColumn
            Get
                Return Me.columnMontoEnAdelante
            End Get
        End Property
        
        Friend ReadOnly Property Porcentaje2Column As DataColumn
            Get
                Return Me.columnPorcentaje2
            End Get
        End Property
        
        Friend ReadOnly Property EsposaColumn As DataColumn
            Get
                Return Me.columnEsposa
            End Get
        End Property
        
        Friend ReadOnly Property HijoColumn As DataColumn
            Get
                Return Me.columnHijo
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ParametroRentaRow
            Get
                Return CType(Me.Rows(index),ParametroRentaRow)
            End Get
        End Property
        
        Public Event ParametroRentaRowChanged As ParametroRentaRowChangeEventHandler
        
        Public Event ParametroRentaRowChanging As ParametroRentaRowChangeEventHandler
        
        Public Event ParametroRentaRowDeleted As ParametroRentaRowChangeEventHandler
        
        Public Event ParametroRentaRowDeleting As ParametroRentaRowChangeEventHandler
        
        Public Overloads Sub AddParametroRentaRow(ByVal row As ParametroRentaRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddParametroRentaRow(ByVal MontoExento As Double, ByVal MontoDe As Double, ByVal MontoHasta As Double, ByVal Porcentaje1 As Double, ByVal MontoEnAdelante As Double, ByVal Porcentaje2 As Double, ByVal Esposa As Double, ByVal Hijo As Double) As ParametroRentaRow
            Dim rowParametroRentaRow As ParametroRentaRow = CType(Me.NewRow,ParametroRentaRow)
            rowParametroRentaRow.ItemArray = New Object() {Nothing, MontoExento, MontoDe, MontoHasta, Porcentaje1, MontoEnAdelante, Porcentaje2, Esposa, Hijo}
            Me.Rows.Add(rowParametroRentaRow)
            Return rowParametroRentaRow
        End Function
        
        Public Function FindById(ByVal Id As Integer) As ParametroRentaRow
            Return CType(Me.Rows.Find(New Object() {Id}),ParametroRentaRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ParametroRentaDataTable = CType(MyBase.Clone,ParametroRentaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ParametroRentaDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnId = Me.Columns("Id")
            Me.columnMontoExento = Me.Columns("MontoExento")
            Me.columnMontoDe = Me.Columns("MontoDe")
            Me.columnMontoHasta = Me.Columns("MontoHasta")
            Me.columnPorcentaje1 = Me.Columns("Porcentaje1")
            Me.columnMontoEnAdelante = Me.Columns("MontoEnAdelante")
            Me.columnPorcentaje2 = Me.Columns("Porcentaje2")
            Me.columnEsposa = Me.Columns("Esposa")
            Me.columnHijo = Me.Columns("Hijo")
        End Sub
        
        Private Sub InitClass()
            Me.columnId = New DataColumn("Id", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId)
            Me.columnMontoExento = New DataColumn("MontoExento", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMontoExento)
            Me.columnMontoDe = New DataColumn("MontoDe", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMontoDe)
            Me.columnMontoHasta = New DataColumn("MontoHasta", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMontoHasta)
            Me.columnPorcentaje1 = New DataColumn("Porcentaje1", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPorcentaje1)
            Me.columnMontoEnAdelante = New DataColumn("MontoEnAdelante", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMontoEnAdelante)
            Me.columnPorcentaje2 = New DataColumn("Porcentaje2", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPorcentaje2)
            Me.columnEsposa = New DataColumn("Esposa", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEsposa)
            Me.columnHijo = New DataColumn("Hijo", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHijo)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnId}, true))
            Me.columnId.AutoIncrement = true
            Me.columnId.AllowDBNull = false
            Me.columnId.ReadOnly = true
            Me.columnId.Unique = true
            Me.columnMontoExento.AllowDBNull = false
            Me.columnMontoDe.AllowDBNull = false
            Me.columnMontoHasta.AllowDBNull = false
            Me.columnPorcentaje1.AllowDBNull = false
            Me.columnMontoEnAdelante.AllowDBNull = false
            Me.columnPorcentaje2.AllowDBNull = false
            Me.columnEsposa.AllowDBNull = false
            Me.columnHijo.AllowDBNull = false
        End Sub
        
        Public Function NewParametroRentaRow() As ParametroRentaRow
            Return CType(Me.NewRow,ParametroRentaRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ParametroRentaRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ParametroRentaRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ParametroRentaRowChangedEvent) Is Nothing) Then
                RaiseEvent ParametroRentaRowChanged(Me, New ParametroRentaRowChangeEvent(CType(e.Row,ParametroRentaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ParametroRentaRowChangingEvent) Is Nothing) Then
                RaiseEvent ParametroRentaRowChanging(Me, New ParametroRentaRowChangeEvent(CType(e.Row,ParametroRentaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ParametroRentaRowDeletedEvent) Is Nothing) Then
                RaiseEvent ParametroRentaRowDeleted(Me, New ParametroRentaRowChangeEvent(CType(e.Row,ParametroRentaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ParametroRentaRowDeletingEvent) Is Nothing) Then
                RaiseEvent ParametroRentaRowDeleting(Me, New ParametroRentaRowChangeEvent(CType(e.Row,ParametroRentaRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveParametroRentaRow(ByVal row As ParametroRentaRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ParametroRentaRow
        Inherits DataRow
        
        Private tableParametroRenta As ParametroRentaDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableParametroRenta = CType(Me.Table,ParametroRentaDataTable)
        End Sub
        
        Public Property Id As Integer
            Get
                Return CType(Me(Me.tableParametroRenta.IdColumn),Integer)
            End Get
            Set
                Me(Me.tableParametroRenta.IdColumn) = value
            End Set
        End Property
        
        Public Property MontoExento As Double
            Get
                Return CType(Me(Me.tableParametroRenta.MontoExentoColumn),Double)
            End Get
            Set
                Me(Me.tableParametroRenta.MontoExentoColumn) = value
            End Set
        End Property
        
        Public Property MontoDe As Double
            Get
                Return CType(Me(Me.tableParametroRenta.MontoDeColumn),Double)
            End Get
            Set
                Me(Me.tableParametroRenta.MontoDeColumn) = value
            End Set
        End Property
        
        Public Property MontoHasta As Double
            Get
                Return CType(Me(Me.tableParametroRenta.MontoHastaColumn),Double)
            End Get
            Set
                Me(Me.tableParametroRenta.MontoHastaColumn) = value
            End Set
        End Property
        
        Public Property Porcentaje1 As Double
            Get
                Return CType(Me(Me.tableParametroRenta.Porcentaje1Column),Double)
            End Get
            Set
                Me(Me.tableParametroRenta.Porcentaje1Column) = value
            End Set
        End Property
        
        Public Property MontoEnAdelante As Double
            Get
                Return CType(Me(Me.tableParametroRenta.MontoEnAdelanteColumn),Double)
            End Get
            Set
                Me(Me.tableParametroRenta.MontoEnAdelanteColumn) = value
            End Set
        End Property
        
        Public Property Porcentaje2 As Double
            Get
                Return CType(Me(Me.tableParametroRenta.Porcentaje2Column),Double)
            End Get
            Set
                Me(Me.tableParametroRenta.Porcentaje2Column) = value
            End Set
        End Property
        
        Public Property Esposa As Double
            Get
                Return CType(Me(Me.tableParametroRenta.EsposaColumn),Double)
            End Get
            Set
                Me(Me.tableParametroRenta.EsposaColumn) = value
            End Set
        End Property
        
        Public Property Hijo As Double
            Get
                Return CType(Me(Me.tableParametroRenta.HijoColumn),Double)
            End Get
            Set
                Me(Me.tableParametroRenta.HijoColumn) = value
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ParametroRentaRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ParametroRentaRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ParametroRentaRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ParametroRentaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Planilla_DeduccionesDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnId As DataColumn
        
        Private columnId_PlanillaDetalle As DataColumn
        
        Private columnCod_Deduccion As DataColumn
        
        Private columnNombre As DataColumn
        
        Private columnMonto As DataColumn
        
        Private columnCod_Moneda As DataColumn
        
        Friend Sub New()
            MyBase.New("Planilla_Deducciones")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IdColumn As DataColumn
            Get
                Return Me.columnId
            End Get
        End Property
        
        Friend ReadOnly Property Id_PlanillaDetalleColumn As DataColumn
            Get
                Return Me.columnId_PlanillaDetalle
            End Get
        End Property
        
        Friend ReadOnly Property Cod_DeduccionColumn As DataColumn
            Get
                Return Me.columnCod_Deduccion
            End Get
        End Property
        
        Friend ReadOnly Property NombreColumn As DataColumn
            Get
                Return Me.columnNombre
            End Get
        End Property
        
        Friend ReadOnly Property MontoColumn As DataColumn
            Get
                Return Me.columnMonto
            End Get
        End Property
        
        Friend ReadOnly Property Cod_MonedaColumn As DataColumn
            Get
                Return Me.columnCod_Moneda
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Planilla_DeduccionesRow
            Get
                Return CType(Me.Rows(index),Planilla_DeduccionesRow)
            End Get
        End Property
        
        Public Event Planilla_DeduccionesRowChanged As Planilla_DeduccionesRowChangeEventHandler
        
        Public Event Planilla_DeduccionesRowChanging As Planilla_DeduccionesRowChangeEventHandler
        
        Public Event Planilla_DeduccionesRowDeleted As Planilla_DeduccionesRowChangeEventHandler
        
        Public Event Planilla_DeduccionesRowDeleting As Planilla_DeduccionesRowChangeEventHandler
        
        Public Overloads Sub AddPlanilla_DeduccionesRow(ByVal row As Planilla_DeduccionesRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPlanilla_DeduccionesRow(ByVal parentPlanilla_DetalleRowByPlanilla_DetallePlanilla_Deducciones As Planilla_DetalleRow, ByVal Cod_Deduccion As Integer, ByVal Nombre As String, ByVal Monto As Double, ByVal Cod_Moneda As Integer) As Planilla_DeduccionesRow
            Dim rowPlanilla_DeduccionesRow As Planilla_DeduccionesRow = CType(Me.NewRow,Planilla_DeduccionesRow)
            rowPlanilla_DeduccionesRow.ItemArray = New Object() {Nothing, parentPlanilla_DetalleRowByPlanilla_DetallePlanilla_Deducciones(0), Cod_Deduccion, Nombre, Monto, Cod_Moneda}
            Me.Rows.Add(rowPlanilla_DeduccionesRow)
            Return rowPlanilla_DeduccionesRow
        End Function
        
        Public Function FindById(ByVal Id As Long) As Planilla_DeduccionesRow
            Return CType(Me.Rows.Find(New Object() {Id}),Planilla_DeduccionesRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Planilla_DeduccionesDataTable = CType(MyBase.Clone,Planilla_DeduccionesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Planilla_DeduccionesDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnId = Me.Columns("Id")
            Me.columnId_PlanillaDetalle = Me.Columns("Id_PlanillaDetalle")
            Me.columnCod_Deduccion = Me.Columns("Cod_Deduccion")
            Me.columnNombre = Me.Columns("Nombre")
            Me.columnMonto = Me.Columns("Monto")
            Me.columnCod_Moneda = Me.Columns("Cod_Moneda")
        End Sub
        
        Private Sub InitClass()
            Me.columnId = New DataColumn("Id", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId)
            Me.columnId_PlanillaDetalle = New DataColumn("Id_PlanillaDetalle", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId_PlanillaDetalle)
            Me.columnCod_Deduccion = New DataColumn("Cod_Deduccion", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCod_Deduccion)
            Me.columnNombre = New DataColumn("Nombre", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNombre)
            Me.columnMonto = New DataColumn("Monto", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMonto)
            Me.columnCod_Moneda = New DataColumn("Cod_Moneda", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCod_Moneda)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnId}, true))
            Me.columnId.AutoIncrement = true
            Me.columnId.AllowDBNull = false
            Me.columnId.ReadOnly = true
            Me.columnId.Unique = true
            Me.columnId_PlanillaDetalle.AllowDBNull = false
            Me.columnCod_Deduccion.AllowDBNull = false
            Me.columnNombre.AllowDBNull = false
            Me.columnMonto.AllowDBNull = false
            Me.columnCod_Moneda.AllowDBNull = false
        End Sub
        
        Public Function NewPlanilla_DeduccionesRow() As Planilla_DeduccionesRow
            Return CType(Me.NewRow,Planilla_DeduccionesRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Planilla_DeduccionesRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Planilla_DeduccionesRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Planilla_DeduccionesRowChangedEvent) Is Nothing) Then
                RaiseEvent Planilla_DeduccionesRowChanged(Me, New Planilla_DeduccionesRowChangeEvent(CType(e.Row,Planilla_DeduccionesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Planilla_DeduccionesRowChangingEvent) Is Nothing) Then
                RaiseEvent Planilla_DeduccionesRowChanging(Me, New Planilla_DeduccionesRowChangeEvent(CType(e.Row,Planilla_DeduccionesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Planilla_DeduccionesRowDeletedEvent) Is Nothing) Then
                RaiseEvent Planilla_DeduccionesRowDeleted(Me, New Planilla_DeduccionesRowChangeEvent(CType(e.Row,Planilla_DeduccionesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Planilla_DeduccionesRowDeletingEvent) Is Nothing) Then
                RaiseEvent Planilla_DeduccionesRowDeleting(Me, New Planilla_DeduccionesRowChangeEvent(CType(e.Row,Planilla_DeduccionesRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePlanilla_DeduccionesRow(ByVal row As Planilla_DeduccionesRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Planilla_DeduccionesRow
        Inherits DataRow
        
        Private tablePlanilla_Deducciones As Planilla_DeduccionesDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePlanilla_Deducciones = CType(Me.Table,Planilla_DeduccionesDataTable)
        End Sub
        
        Public Property Id As Long
            Get
                Return CType(Me(Me.tablePlanilla_Deducciones.IdColumn),Long)
            End Get
            Set
                Me(Me.tablePlanilla_Deducciones.IdColumn) = value
            End Set
        End Property
        
        Public Property Id_PlanillaDetalle As Long
            Get
                Return CType(Me(Me.tablePlanilla_Deducciones.Id_PlanillaDetalleColumn),Long)
            End Get
            Set
                Me(Me.tablePlanilla_Deducciones.Id_PlanillaDetalleColumn) = value
            End Set
        End Property
        
        Public Property Cod_Deduccion As Integer
            Get
                Return CType(Me(Me.tablePlanilla_Deducciones.Cod_DeduccionColumn),Integer)
            End Get
            Set
                Me(Me.tablePlanilla_Deducciones.Cod_DeduccionColumn) = value
            End Set
        End Property
        
        Public Property Nombre As String
            Get
                Return CType(Me(Me.tablePlanilla_Deducciones.NombreColumn),String)
            End Get
            Set
                Me(Me.tablePlanilla_Deducciones.NombreColumn) = value
            End Set
        End Property
        
        Public Property Monto As Double
            Get
                Return CType(Me(Me.tablePlanilla_Deducciones.MontoColumn),Double)
            End Get
            Set
                Me(Me.tablePlanilla_Deducciones.MontoColumn) = value
            End Set
        End Property
        
        Public Property Cod_Moneda As Integer
            Get
                Return CType(Me(Me.tablePlanilla_Deducciones.Cod_MonedaColumn),Integer)
            End Get
            Set
                Me(Me.tablePlanilla_Deducciones.Cod_MonedaColumn) = value
            End Set
        End Property
        
        Public Property Planilla_DetalleRow As Planilla_DetalleRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Planilla_DetallePlanilla_Deducciones")),Planilla_DetalleRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Planilla_DetallePlanilla_Deducciones"))
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Planilla_DeduccionesRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Planilla_DeduccionesRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Planilla_DeduccionesRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Planilla_DeduccionesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Planilla_DetalleDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnId As DataColumn
        
        Private columnId_Planilla As DataColumn
        
        Private columnCedula As DataColumn
        
        Private columnNombre As DataColumn
        
        Private columnPuesto As DataColumn
        
        Private columnSalario As DataColumn
        
        Private columnFormaPago As DataColumn
        
        Private columnOrdinaria As DataColumn
        
        Private columnExtra As DataColumn
        
        Private columnDoble As DataColumn
        
        Private columnSalarioBruto As DataColumn
        
        Private columnAdelantos As DataColumn
        
        Private columnPrestamos As DataColumn
        
        Private columnRenta As DataColumn
        
        Private columnTotalDeducciones As DataColumn
        
        Private columnSalarioNeto As DataColumn
        
        Private columnCod_Moneda As DataColumn
        
        Friend Sub New()
            MyBase.New("Planilla_Detalle")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IdColumn As DataColumn
            Get
                Return Me.columnId
            End Get
        End Property
        
        Friend ReadOnly Property Id_PlanillaColumn As DataColumn
            Get
                Return Me.columnId_Planilla
            End Get
        End Property
        
        Friend ReadOnly Property CedulaColumn As DataColumn
            Get
                Return Me.columnCedula
            End Get
        End Property
        
        Friend ReadOnly Property NombreColumn As DataColumn
            Get
                Return Me.columnNombre
            End Get
        End Property
        
        Friend ReadOnly Property PuestoColumn As DataColumn
            Get
                Return Me.columnPuesto
            End Get
        End Property
        
        Friend ReadOnly Property SalarioColumn As DataColumn
            Get
                Return Me.columnSalario
            End Get
        End Property
        
        Friend ReadOnly Property FormaPagoColumn As DataColumn
            Get
                Return Me.columnFormaPago
            End Get
        End Property
        
        Friend ReadOnly Property OrdinariaColumn As DataColumn
            Get
                Return Me.columnOrdinaria
            End Get
        End Property
        
        Friend ReadOnly Property ExtraColumn As DataColumn
            Get
                Return Me.columnExtra
            End Get
        End Property
        
        Friend ReadOnly Property DobleColumn As DataColumn
            Get
                Return Me.columnDoble
            End Get
        End Property
        
        Friend ReadOnly Property SalarioBrutoColumn As DataColumn
            Get
                Return Me.columnSalarioBruto
            End Get
        End Property
        
        Friend ReadOnly Property AdelantosColumn As DataColumn
            Get
                Return Me.columnAdelantos
            End Get
        End Property
        
        Friend ReadOnly Property PrestamosColumn As DataColumn
            Get
                Return Me.columnPrestamos
            End Get
        End Property
        
        Friend ReadOnly Property RentaColumn As DataColumn
            Get
                Return Me.columnRenta
            End Get
        End Property
        
        Friend ReadOnly Property TotalDeduccionesColumn As DataColumn
            Get
                Return Me.columnTotalDeducciones
            End Get
        End Property
        
        Friend ReadOnly Property SalarioNetoColumn As DataColumn
            Get
                Return Me.columnSalarioNeto
            End Get
        End Property
        
        Friend ReadOnly Property Cod_MonedaColumn As DataColumn
            Get
                Return Me.columnCod_Moneda
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Planilla_DetalleRow
            Get
                Return CType(Me.Rows(index),Planilla_DetalleRow)
            End Get
        End Property
        
        Public Event Planilla_DetalleRowChanged As Planilla_DetalleRowChangeEventHandler
        
        Public Event Planilla_DetalleRowChanging As Planilla_DetalleRowChangeEventHandler
        
        Public Event Planilla_DetalleRowDeleted As Planilla_DetalleRowChangeEventHandler
        
        Public Event Planilla_DetalleRowDeleting As Planilla_DetalleRowChangeEventHandler
        
        Public Overloads Sub AddPlanilla_DetalleRow(ByVal row As Planilla_DetalleRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPlanilla_DetalleRow( _
                    ByVal parentPlanillaRowByPlanillaPlanilla_Detalle As PlanillaRow,  _
                    ByVal Cedula As String,  _
                    ByVal Nombre As String,  _
                    ByVal Puesto As String,  _
                    ByVal Salario As Double,  _
                    ByVal FormaPago As String,  _
                    ByVal Ordinaria As Double,  _
                    ByVal Extra As Double,  _
                    ByVal Doble As Double,  _
                    ByVal SalarioBruto As Double,  _
                    ByVal Adelantos As Double,  _
                    ByVal Prestamos As Double,  _
                    ByVal Renta As Double,  _
                    ByVal TotalDeducciones As Double,  _
                    ByVal SalarioNeto As Double,  _
                    ByVal Cod_Moneda As Integer) As Planilla_DetalleRow
            Dim rowPlanilla_DetalleRow As Planilla_DetalleRow = CType(Me.NewRow,Planilla_DetalleRow)
            rowPlanilla_DetalleRow.ItemArray = New Object() {Nothing, parentPlanillaRowByPlanillaPlanilla_Detalle(0), Cedula, Nombre, Puesto, Salario, FormaPago, Ordinaria, Extra, Doble, SalarioBruto, Adelantos, Prestamos, Renta, TotalDeducciones, SalarioNeto, Cod_Moneda}
            Me.Rows.Add(rowPlanilla_DetalleRow)
            Return rowPlanilla_DetalleRow
        End Function
        
        Public Function FindById(ByVal Id As Long) As Planilla_DetalleRow
            Return CType(Me.Rows.Find(New Object() {Id}),Planilla_DetalleRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Planilla_DetalleDataTable = CType(MyBase.Clone,Planilla_DetalleDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Planilla_DetalleDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnId = Me.Columns("Id")
            Me.columnId_Planilla = Me.Columns("Id_Planilla")
            Me.columnCedula = Me.Columns("Cedula")
            Me.columnNombre = Me.Columns("Nombre")
            Me.columnPuesto = Me.Columns("Puesto")
            Me.columnSalario = Me.Columns("Salario")
            Me.columnFormaPago = Me.Columns("FormaPago")
            Me.columnOrdinaria = Me.Columns("Ordinaria")
            Me.columnExtra = Me.Columns("Extra")
            Me.columnDoble = Me.Columns("Doble")
            Me.columnSalarioBruto = Me.Columns("SalarioBruto")
            Me.columnAdelantos = Me.Columns("Adelantos")
            Me.columnPrestamos = Me.Columns("Prestamos")
            Me.columnRenta = Me.Columns("Renta")
            Me.columnTotalDeducciones = Me.Columns("TotalDeducciones")
            Me.columnSalarioNeto = Me.Columns("SalarioNeto")
            Me.columnCod_Moneda = Me.Columns("Cod_Moneda")
        End Sub
        
        Private Sub InitClass()
            Me.columnId = New DataColumn("Id", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId)
            Me.columnId_Planilla = New DataColumn("Id_Planilla", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId_Planilla)
            Me.columnCedula = New DataColumn("Cedula", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCedula)
            Me.columnNombre = New DataColumn("Nombre", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNombre)
            Me.columnPuesto = New DataColumn("Puesto", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPuesto)
            Me.columnSalario = New DataColumn("Salario", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSalario)
            Me.columnFormaPago = New DataColumn("FormaPago", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFormaPago)
            Me.columnOrdinaria = New DataColumn("Ordinaria", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOrdinaria)
            Me.columnExtra = New DataColumn("Extra", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnExtra)
            Me.columnDoble = New DataColumn("Doble", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDoble)
            Me.columnSalarioBruto = New DataColumn("SalarioBruto", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSalarioBruto)
            Me.columnAdelantos = New DataColumn("Adelantos", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAdelantos)
            Me.columnPrestamos = New DataColumn("Prestamos", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPrestamos)
            Me.columnRenta = New DataColumn("Renta", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRenta)
            Me.columnTotalDeducciones = New DataColumn("TotalDeducciones", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTotalDeducciones)
            Me.columnSalarioNeto = New DataColumn("SalarioNeto", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSalarioNeto)
            Me.columnCod_Moneda = New DataColumn("Cod_Moneda", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCod_Moneda)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnId}, true))
            Me.columnId.AutoIncrement = true
            Me.columnId.AllowDBNull = false
            Me.columnId.ReadOnly = true
            Me.columnId.Unique = true
            Me.columnId_Planilla.AllowDBNull = false
            Me.columnCedula.AllowDBNull = false
            Me.columnNombre.AllowDBNull = false
            Me.columnPuesto.AllowDBNull = false
            Me.columnSalario.AllowDBNull = false
            Me.columnFormaPago.AllowDBNull = false
            Me.columnOrdinaria.AllowDBNull = false
            Me.columnExtra.AllowDBNull = false
            Me.columnDoble.AllowDBNull = false
            Me.columnSalarioBruto.AllowDBNull = false
            Me.columnAdelantos.AllowDBNull = false
            Me.columnPrestamos.AllowDBNull = false
            Me.columnRenta.AllowDBNull = false
            Me.columnTotalDeducciones.AllowDBNull = false
            Me.columnSalarioNeto.AllowDBNull = false
            Me.columnCod_Moneda.AllowDBNull = false
        End Sub
        
        Public Function NewPlanilla_DetalleRow() As Planilla_DetalleRow
            Return CType(Me.NewRow,Planilla_DetalleRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Planilla_DetalleRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Planilla_DetalleRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Planilla_DetalleRowChangedEvent) Is Nothing) Then
                RaiseEvent Planilla_DetalleRowChanged(Me, New Planilla_DetalleRowChangeEvent(CType(e.Row,Planilla_DetalleRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Planilla_DetalleRowChangingEvent) Is Nothing) Then
                RaiseEvent Planilla_DetalleRowChanging(Me, New Planilla_DetalleRowChangeEvent(CType(e.Row,Planilla_DetalleRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Planilla_DetalleRowDeletedEvent) Is Nothing) Then
                RaiseEvent Planilla_DetalleRowDeleted(Me, New Planilla_DetalleRowChangeEvent(CType(e.Row,Planilla_DetalleRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Planilla_DetalleRowDeletingEvent) Is Nothing) Then
                RaiseEvent Planilla_DetalleRowDeleting(Me, New Planilla_DetalleRowChangeEvent(CType(e.Row,Planilla_DetalleRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePlanilla_DetalleRow(ByVal row As Planilla_DetalleRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Planilla_DetalleRow
        Inherits DataRow
        
        Private tablePlanilla_Detalle As Planilla_DetalleDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePlanilla_Detalle = CType(Me.Table,Planilla_DetalleDataTable)
        End Sub
        
        Public Property Id As Long
            Get
                Return CType(Me(Me.tablePlanilla_Detalle.IdColumn),Long)
            End Get
            Set
                Me(Me.tablePlanilla_Detalle.IdColumn) = value
            End Set
        End Property
        
        Public Property Id_Planilla As Long
            Get
                Return CType(Me(Me.tablePlanilla_Detalle.Id_PlanillaColumn),Long)
            End Get
            Set
                Me(Me.tablePlanilla_Detalle.Id_PlanillaColumn) = value
            End Set
        End Property
        
        Public Property Cedula As String
            Get
                Return CType(Me(Me.tablePlanilla_Detalle.CedulaColumn),String)
            End Get
            Set
                Me(Me.tablePlanilla_Detalle.CedulaColumn) = value
            End Set
        End Property
        
        Public Property Nombre As String
            Get
                Return CType(Me(Me.tablePlanilla_Detalle.NombreColumn),String)
            End Get
            Set
                Me(Me.tablePlanilla_Detalle.NombreColumn) = value
            End Set
        End Property
        
        Public Property Puesto As String
            Get
                Return CType(Me(Me.tablePlanilla_Detalle.PuestoColumn),String)
            End Get
            Set
                Me(Me.tablePlanilla_Detalle.PuestoColumn) = value
            End Set
        End Property
        
        Public Property Salario As Double
            Get
                Return CType(Me(Me.tablePlanilla_Detalle.SalarioColumn),Double)
            End Get
            Set
                Me(Me.tablePlanilla_Detalle.SalarioColumn) = value
            End Set
        End Property
        
        Public Property FormaPago As String
            Get
                Return CType(Me(Me.tablePlanilla_Detalle.FormaPagoColumn),String)
            End Get
            Set
                Me(Me.tablePlanilla_Detalle.FormaPagoColumn) = value
            End Set
        End Property
        
        Public Property Ordinaria As Double
            Get
                Return CType(Me(Me.tablePlanilla_Detalle.OrdinariaColumn),Double)
            End Get
            Set
                Me(Me.tablePlanilla_Detalle.OrdinariaColumn) = value
            End Set
        End Property
        
        Public Property Extra As Double
            Get
                Return CType(Me(Me.tablePlanilla_Detalle.ExtraColumn),Double)
            End Get
            Set
                Me(Me.tablePlanilla_Detalle.ExtraColumn) = value
            End Set
        End Property
        
        Public Property Doble As Double
            Get
                Return CType(Me(Me.tablePlanilla_Detalle.DobleColumn),Double)
            End Get
            Set
                Me(Me.tablePlanilla_Detalle.DobleColumn) = value
            End Set
        End Property
        
        Public Property SalarioBruto As Double
            Get
                Return CType(Me(Me.tablePlanilla_Detalle.SalarioBrutoColumn),Double)
            End Get
            Set
                Me(Me.tablePlanilla_Detalle.SalarioBrutoColumn) = value
            End Set
        End Property
        
        Public Property Adelantos As Double
            Get
                Return CType(Me(Me.tablePlanilla_Detalle.AdelantosColumn),Double)
            End Get
            Set
                Me(Me.tablePlanilla_Detalle.AdelantosColumn) = value
            End Set
        End Property
        
        Public Property Prestamos As Double
            Get
                Return CType(Me(Me.tablePlanilla_Detalle.PrestamosColumn),Double)
            End Get
            Set
                Me(Me.tablePlanilla_Detalle.PrestamosColumn) = value
            End Set
        End Property
        
        Public Property Renta As Double
            Get
                Return CType(Me(Me.tablePlanilla_Detalle.RentaColumn),Double)
            End Get
            Set
                Me(Me.tablePlanilla_Detalle.RentaColumn) = value
            End Set
        End Property
        
        Public Property TotalDeducciones As Double
            Get
                Return CType(Me(Me.tablePlanilla_Detalle.TotalDeduccionesColumn),Double)
            End Get
            Set
                Me(Me.tablePlanilla_Detalle.TotalDeduccionesColumn) = value
            End Set
        End Property
        
        Public Property SalarioNeto As Double
            Get
                Return CType(Me(Me.tablePlanilla_Detalle.SalarioNetoColumn),Double)
            End Get
            Set
                Me(Me.tablePlanilla_Detalle.SalarioNetoColumn) = value
            End Set
        End Property
        
        Public Property Cod_Moneda As Integer
            Get
                Return CType(Me(Me.tablePlanilla_Detalle.Cod_MonedaColumn),Integer)
            End Get
            Set
                Me(Me.tablePlanilla_Detalle.Cod_MonedaColumn) = value
            End Set
        End Property
        
        Public Property PlanillaRow As PlanillaRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("PlanillaPlanilla_Detalle")),PlanillaRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("PlanillaPlanilla_Detalle"))
            End Set
        End Property
        
        Public Function GetPlanilla_DeduccionesRows() As Planilla_DeduccionesRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("Planilla_DetallePlanilla_Deducciones")),Planilla_DeduccionesRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Planilla_DetalleRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Planilla_DetalleRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Planilla_DetalleRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Planilla_DetalleRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Adelantos_DetalleDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnId_Detalle_AP As DataColumn
        
        Private columnId_Empleado As DataColumn
        
        Private columnNumero As DataColumn
        
        Private columnMonto As DataColumn
        
        Private columnTipo_Pago As DataColumn
        
        Friend Sub New()
            MyBase.New("Adelantos_Detalle")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property Id_Detalle_APColumn As DataColumn
            Get
                Return Me.columnId_Detalle_AP
            End Get
        End Property
        
        Friend ReadOnly Property Id_EmpleadoColumn As DataColumn
            Get
                Return Me.columnId_Empleado
            End Get
        End Property
        
        Friend ReadOnly Property NumeroColumn As DataColumn
            Get
                Return Me.columnNumero
            End Get
        End Property
        
        Friend ReadOnly Property MontoColumn As DataColumn
            Get
                Return Me.columnMonto
            End Get
        End Property
        
        Friend ReadOnly Property Tipo_PagoColumn As DataColumn
            Get
                Return Me.columnTipo_Pago
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Adelantos_DetalleRow
            Get
                Return CType(Me.Rows(index),Adelantos_DetalleRow)
            End Get
        End Property
        
        Public Event Adelantos_DetalleRowChanged As Adelantos_DetalleRowChangeEventHandler
        
        Public Event Adelantos_DetalleRowChanging As Adelantos_DetalleRowChangeEventHandler
        
        Public Event Adelantos_DetalleRowDeleted As Adelantos_DetalleRowChangeEventHandler
        
        Public Event Adelantos_DetalleRowDeleting As Adelantos_DetalleRowChangeEventHandler
        
        Public Overloads Sub AddAdelantos_DetalleRow(ByVal row As Adelantos_DetalleRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddAdelantos_DetalleRow(ByVal Id_Empleado As String, ByVal Numero As Long, ByVal Monto As Double, ByVal Tipo_Pago As Boolean) As Adelantos_DetalleRow
            Dim rowAdelantos_DetalleRow As Adelantos_DetalleRow = CType(Me.NewRow,Adelantos_DetalleRow)
            rowAdelantos_DetalleRow.ItemArray = New Object() {Nothing, Id_Empleado, Numero, Monto, Tipo_Pago}
            Me.Rows.Add(rowAdelantos_DetalleRow)
            Return rowAdelantos_DetalleRow
        End Function
        
        Public Function FindById_Detalle_AP(ByVal Id_Detalle_AP As Integer) As Adelantos_DetalleRow
            Return CType(Me.Rows.Find(New Object() {Id_Detalle_AP}),Adelantos_DetalleRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Adelantos_DetalleDataTable = CType(MyBase.Clone,Adelantos_DetalleDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Adelantos_DetalleDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnId_Detalle_AP = Me.Columns("Id_Detalle_AP")
            Me.columnId_Empleado = Me.Columns("Id_Empleado")
            Me.columnNumero = Me.Columns("Numero")
            Me.columnMonto = Me.Columns("Monto")
            Me.columnTipo_Pago = Me.Columns("Tipo_Pago")
        End Sub
        
        Private Sub InitClass()
            Me.columnId_Detalle_AP = New DataColumn("Id_Detalle_AP", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId_Detalle_AP)
            Me.columnId_Empleado = New DataColumn("Id_Empleado", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId_Empleado)
            Me.columnNumero = New DataColumn("Numero", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNumero)
            Me.columnMonto = New DataColumn("Monto", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMonto)
            Me.columnTipo_Pago = New DataColumn("Tipo_Pago", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTipo_Pago)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnId_Detalle_AP}, true))
            Me.columnId_Detalle_AP.AutoIncrement = true
            Me.columnId_Detalle_AP.AllowDBNull = false
            Me.columnId_Detalle_AP.ReadOnly = true
            Me.columnId_Detalle_AP.Unique = true
            Me.columnId_Empleado.AllowDBNull = false
            Me.columnNumero.AllowDBNull = false
            Me.columnMonto.AllowDBNull = false
            Me.columnTipo_Pago.AllowDBNull = false
        End Sub
        
        Public Function NewAdelantos_DetalleRow() As Adelantos_DetalleRow
            Return CType(Me.NewRow,Adelantos_DetalleRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Adelantos_DetalleRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Adelantos_DetalleRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Adelantos_DetalleRowChangedEvent) Is Nothing) Then
                RaiseEvent Adelantos_DetalleRowChanged(Me, New Adelantos_DetalleRowChangeEvent(CType(e.Row,Adelantos_DetalleRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Adelantos_DetalleRowChangingEvent) Is Nothing) Then
                RaiseEvent Adelantos_DetalleRowChanging(Me, New Adelantos_DetalleRowChangeEvent(CType(e.Row,Adelantos_DetalleRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Adelantos_DetalleRowDeletedEvent) Is Nothing) Then
                RaiseEvent Adelantos_DetalleRowDeleted(Me, New Adelantos_DetalleRowChangeEvent(CType(e.Row,Adelantos_DetalleRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Adelantos_DetalleRowDeletingEvent) Is Nothing) Then
                RaiseEvent Adelantos_DetalleRowDeleting(Me, New Adelantos_DetalleRowChangeEvent(CType(e.Row,Adelantos_DetalleRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveAdelantos_DetalleRow(ByVal row As Adelantos_DetalleRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Adelantos_DetalleRow
        Inherits DataRow
        
        Private tableAdelantos_Detalle As Adelantos_DetalleDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableAdelantos_Detalle = CType(Me.Table,Adelantos_DetalleDataTable)
        End Sub
        
        Public Property Id_Detalle_AP As Integer
            Get
                Return CType(Me(Me.tableAdelantos_Detalle.Id_Detalle_APColumn),Integer)
            End Get
            Set
                Me(Me.tableAdelantos_Detalle.Id_Detalle_APColumn) = value
            End Set
        End Property
        
        Public Property Id_Empleado As String
            Get
                Return CType(Me(Me.tableAdelantos_Detalle.Id_EmpleadoColumn),String)
            End Get
            Set
                Me(Me.tableAdelantos_Detalle.Id_EmpleadoColumn) = value
            End Set
        End Property
        
        Public Property Numero As Long
            Get
                Return CType(Me(Me.tableAdelantos_Detalle.NumeroColumn),Long)
            End Get
            Set
                Me(Me.tableAdelantos_Detalle.NumeroColumn) = value
            End Set
        End Property
        
        Public Property Monto As Double
            Get
                Return CType(Me(Me.tableAdelantos_Detalle.MontoColumn),Double)
            End Get
            Set
                Me(Me.tableAdelantos_Detalle.MontoColumn) = value
            End Set
        End Property
        
        Public Property Tipo_Pago As Boolean
            Get
                Return CType(Me(Me.tableAdelantos_Detalle.Tipo_PagoColumn),Boolean)
            End Get
            Set
                Me(Me.tableAdelantos_Detalle.Tipo_PagoColumn) = value
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Adelantos_DetalleRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Adelantos_DetalleRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Adelantos_DetalleRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Adelantos_DetalleRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PlanillaDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnId_Planilla As DataColumn
        
        Private columnFecha As DataColumn
        
        Private columnFechaInicial As DataColumn
        
        Private columnFechaFinal As DataColumn
        
        Private columnCierreMes As DataColumn
        
        Private columnCed_Usuario As DataColumn
        
        Private columnNombre_Usuario As DataColumn
        
        Private columnAnulado As DataColumn
        
        Friend Sub New()
            MyBase.New("Planilla")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property Id_PlanillaColumn As DataColumn
            Get
                Return Me.columnId_Planilla
            End Get
        End Property
        
        Friend ReadOnly Property FechaColumn As DataColumn
            Get
                Return Me.columnFecha
            End Get
        End Property
        
        Friend ReadOnly Property FechaInicialColumn As DataColumn
            Get
                Return Me.columnFechaInicial
            End Get
        End Property
        
        Friend ReadOnly Property FechaFinalColumn As DataColumn
            Get
                Return Me.columnFechaFinal
            End Get
        End Property
        
        Friend ReadOnly Property CierreMesColumn As DataColumn
            Get
                Return Me.columnCierreMes
            End Get
        End Property
        
        Friend ReadOnly Property Ced_UsuarioColumn As DataColumn
            Get
                Return Me.columnCed_Usuario
            End Get
        End Property
        
        Friend ReadOnly Property Nombre_UsuarioColumn As DataColumn
            Get
                Return Me.columnNombre_Usuario
            End Get
        End Property
        
        Friend ReadOnly Property AnuladoColumn As DataColumn
            Get
                Return Me.columnAnulado
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PlanillaRow
            Get
                Return CType(Me.Rows(index),PlanillaRow)
            End Get
        End Property
        
        Public Event PlanillaRowChanged As PlanillaRowChangeEventHandler
        
        Public Event PlanillaRowChanging As PlanillaRowChangeEventHandler
        
        Public Event PlanillaRowDeleted As PlanillaRowChangeEventHandler
        
        Public Event PlanillaRowDeleting As PlanillaRowChangeEventHandler
        
        Public Overloads Sub AddPlanillaRow(ByVal row As PlanillaRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPlanillaRow(ByVal Fecha As Date, ByVal FechaInicial As Date, ByVal FechaFinal As Date, ByVal CierreMes As Boolean, ByVal Ced_Usuario As String, ByVal Nombre_Usuario As String, ByVal Anulado As Boolean) As PlanillaRow
            Dim rowPlanillaRow As PlanillaRow = CType(Me.NewRow,PlanillaRow)
            rowPlanillaRow.ItemArray = New Object() {Nothing, Fecha, FechaInicial, FechaFinal, CierreMes, Ced_Usuario, Nombre_Usuario, Anulado}
            Me.Rows.Add(rowPlanillaRow)
            Return rowPlanillaRow
        End Function
        
        Public Function FindById_Planilla(ByVal Id_Planilla As Long) As PlanillaRow
            Return CType(Me.Rows.Find(New Object() {Id_Planilla}),PlanillaRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PlanillaDataTable = CType(MyBase.Clone,PlanillaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PlanillaDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnId_Planilla = Me.Columns("Id_Planilla")
            Me.columnFecha = Me.Columns("Fecha")
            Me.columnFechaInicial = Me.Columns("FechaInicial")
            Me.columnFechaFinal = Me.Columns("FechaFinal")
            Me.columnCierreMes = Me.Columns("CierreMes")
            Me.columnCed_Usuario = Me.Columns("Ced_Usuario")
            Me.columnNombre_Usuario = Me.Columns("Nombre_Usuario")
            Me.columnAnulado = Me.Columns("Anulado")
        End Sub
        
        Private Sub InitClass()
            Me.columnId_Planilla = New DataColumn("Id_Planilla", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId_Planilla)
            Me.columnFecha = New DataColumn("Fecha", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFecha)
            Me.columnFechaInicial = New DataColumn("FechaInicial", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFechaInicial)
            Me.columnFechaFinal = New DataColumn("FechaFinal", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFechaFinal)
            Me.columnCierreMes = New DataColumn("CierreMes", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCierreMes)
            Me.columnCed_Usuario = New DataColumn("Ced_Usuario", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCed_Usuario)
            Me.columnNombre_Usuario = New DataColumn("Nombre_Usuario", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNombre_Usuario)
            Me.columnAnulado = New DataColumn("Anulado", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAnulado)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnId_Planilla}, true))
            Me.columnId_Planilla.AutoIncrement = true
            Me.columnId_Planilla.AllowDBNull = false
            Me.columnId_Planilla.ReadOnly = true
            Me.columnId_Planilla.Unique = true
            Me.columnFecha.AllowDBNull = false
            Me.columnFechaInicial.AllowDBNull = false
            Me.columnFechaFinal.AllowDBNull = false
            Me.columnCierreMes.AllowDBNull = false
            Me.columnCed_Usuario.AllowDBNull = false
            Me.columnNombre_Usuario.AllowDBNull = false
            Me.columnAnulado.AllowDBNull = false
        End Sub
        
        Public Function NewPlanillaRow() As PlanillaRow
            Return CType(Me.NewRow,PlanillaRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PlanillaRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PlanillaRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PlanillaRowChangedEvent) Is Nothing) Then
                RaiseEvent PlanillaRowChanged(Me, New PlanillaRowChangeEvent(CType(e.Row,PlanillaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PlanillaRowChangingEvent) Is Nothing) Then
                RaiseEvent PlanillaRowChanging(Me, New PlanillaRowChangeEvent(CType(e.Row,PlanillaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PlanillaRowDeletedEvent) Is Nothing) Then
                RaiseEvent PlanillaRowDeleted(Me, New PlanillaRowChangeEvent(CType(e.Row,PlanillaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PlanillaRowDeletingEvent) Is Nothing) Then
                RaiseEvent PlanillaRowDeleting(Me, New PlanillaRowChangeEvent(CType(e.Row,PlanillaRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePlanillaRow(ByVal row As PlanillaRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PlanillaRow
        Inherits DataRow
        
        Private tablePlanilla As PlanillaDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePlanilla = CType(Me.Table,PlanillaDataTable)
        End Sub
        
        Public Property Id_Planilla As Long
            Get
                Return CType(Me(Me.tablePlanilla.Id_PlanillaColumn),Long)
            End Get
            Set
                Me(Me.tablePlanilla.Id_PlanillaColumn) = value
            End Set
        End Property
        
        Public Property Fecha As Date
            Get
                Return CType(Me(Me.tablePlanilla.FechaColumn),Date)
            End Get
            Set
                Me(Me.tablePlanilla.FechaColumn) = value
            End Set
        End Property
        
        Public Property FechaInicial As Date
            Get
                Return CType(Me(Me.tablePlanilla.FechaInicialColumn),Date)
            End Get
            Set
                Me(Me.tablePlanilla.FechaInicialColumn) = value
            End Set
        End Property
        
        Public Property FechaFinal As Date
            Get
                Return CType(Me(Me.tablePlanilla.FechaFinalColumn),Date)
            End Get
            Set
                Me(Me.tablePlanilla.FechaFinalColumn) = value
            End Set
        End Property
        
        Public Property CierreMes As Boolean
            Get
                Return CType(Me(Me.tablePlanilla.CierreMesColumn),Boolean)
            End Get
            Set
                Me(Me.tablePlanilla.CierreMesColumn) = value
            End Set
        End Property
        
        Public Property Ced_Usuario As String
            Get
                Return CType(Me(Me.tablePlanilla.Ced_UsuarioColumn),String)
            End Get
            Set
                Me(Me.tablePlanilla.Ced_UsuarioColumn) = value
            End Set
        End Property
        
        Public Property Nombre_Usuario As String
            Get
                Return CType(Me(Me.tablePlanilla.Nombre_UsuarioColumn),String)
            End Get
            Set
                Me(Me.tablePlanilla.Nombre_UsuarioColumn) = value
            End Set
        End Property
        
        Public Property Anulado As Boolean
            Get
                Return CType(Me(Me.tablePlanilla.AnuladoColumn),Boolean)
            End Get
            Set
                Me(Me.tablePlanilla.AnuladoColumn) = value
            End Set
        End Property
        
        Public Function GetPlanilla_DetalleRows() As Planilla_DetalleRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("PlanillaPlanilla_Detalle")),Planilla_DetalleRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PlanillaRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PlanillaRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PlanillaRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PlanillaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MonedaDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCodMoneda As DataColumn
        
        Private columnMonedaNombre As DataColumn
        
        Private columnValorCompra As DataColumn
        
        Private columnValorVenta As DataColumn
        
        Private columnSimbolo As DataColumn
        
        Friend Sub New()
            MyBase.New("Moneda")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property CodMonedaColumn As DataColumn
            Get
                Return Me.columnCodMoneda
            End Get
        End Property
        
        Friend ReadOnly Property MonedaNombreColumn As DataColumn
            Get
                Return Me.columnMonedaNombre
            End Get
        End Property
        
        Friend ReadOnly Property ValorCompraColumn As DataColumn
            Get
                Return Me.columnValorCompra
            End Get
        End Property
        
        Friend ReadOnly Property ValorVentaColumn As DataColumn
            Get
                Return Me.columnValorVenta
            End Get
        End Property
        
        Friend ReadOnly Property SimboloColumn As DataColumn
            Get
                Return Me.columnSimbolo
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As MonedaRow
            Get
                Return CType(Me.Rows(index),MonedaRow)
            End Get
        End Property
        
        Public Event MonedaRowChanged As MonedaRowChangeEventHandler
        
        Public Event MonedaRowChanging As MonedaRowChangeEventHandler
        
        Public Event MonedaRowDeleted As MonedaRowChangeEventHandler
        
        Public Event MonedaRowDeleting As MonedaRowChangeEventHandler
        
        Public Overloads Sub AddMonedaRow(ByVal row As MonedaRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddMonedaRow(ByVal CodMoneda As Integer, ByVal MonedaNombre As String, ByVal ValorCompra As Double, ByVal ValorVenta As Double, ByVal Simbolo As String) As MonedaRow
            Dim rowMonedaRow As MonedaRow = CType(Me.NewRow,MonedaRow)
            rowMonedaRow.ItemArray = New Object() {CodMoneda, MonedaNombre, ValorCompra, ValorVenta, Simbolo}
            Me.Rows.Add(rowMonedaRow)
            Return rowMonedaRow
        End Function
        
        Public Function FindByCodMoneda(ByVal CodMoneda As Integer) As MonedaRow
            Return CType(Me.Rows.Find(New Object() {CodMoneda}),MonedaRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As MonedaDataTable = CType(MyBase.Clone,MonedaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New MonedaDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCodMoneda = Me.Columns("CodMoneda")
            Me.columnMonedaNombre = Me.Columns("MonedaNombre")
            Me.columnValorCompra = Me.Columns("ValorCompra")
            Me.columnValorVenta = Me.Columns("ValorVenta")
            Me.columnSimbolo = Me.Columns("Simbolo")
        End Sub
        
        Private Sub InitClass()
            Me.columnCodMoneda = New DataColumn("CodMoneda", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCodMoneda)
            Me.columnMonedaNombre = New DataColumn("MonedaNombre", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMonedaNombre)
            Me.columnValorCompra = New DataColumn("ValorCompra", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnValorCompra)
            Me.columnValorVenta = New DataColumn("ValorVenta", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnValorVenta)
            Me.columnSimbolo = New DataColumn("Simbolo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSimbolo)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnCodMoneda}, true))
            Me.columnCodMoneda.AllowDBNull = false
            Me.columnCodMoneda.Unique = true
            Me.columnMonedaNombre.AllowDBNull = false
            Me.columnValorCompra.AllowDBNull = false
            Me.columnValorVenta.AllowDBNull = false
            Me.columnSimbolo.AllowDBNull = false
        End Sub
        
        Public Function NewMonedaRow() As MonedaRow
            Return CType(Me.NewRow,MonedaRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New MonedaRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(MonedaRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MonedaRowChangedEvent) Is Nothing) Then
                RaiseEvent MonedaRowChanged(Me, New MonedaRowChangeEvent(CType(e.Row,MonedaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MonedaRowChangingEvent) Is Nothing) Then
                RaiseEvent MonedaRowChanging(Me, New MonedaRowChangeEvent(CType(e.Row,MonedaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MonedaRowDeletedEvent) Is Nothing) Then
                RaiseEvent MonedaRowDeleted(Me, New MonedaRowChangeEvent(CType(e.Row,MonedaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MonedaRowDeletingEvent) Is Nothing) Then
                RaiseEvent MonedaRowDeleting(Me, New MonedaRowChangeEvent(CType(e.Row,MonedaRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveMonedaRow(ByVal row As MonedaRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MonedaRow
        Inherits DataRow
        
        Private tableMoneda As MonedaDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableMoneda = CType(Me.Table,MonedaDataTable)
        End Sub
        
        Public Property CodMoneda As Integer
            Get
                Return CType(Me(Me.tableMoneda.CodMonedaColumn),Integer)
            End Get
            Set
                Me(Me.tableMoneda.CodMonedaColumn) = value
            End Set
        End Property
        
        Public Property MonedaNombre As String
            Get
                Return CType(Me(Me.tableMoneda.MonedaNombreColumn),String)
            End Get
            Set
                Me(Me.tableMoneda.MonedaNombreColumn) = value
            End Set
        End Property
        
        Public Property ValorCompra As Double
            Get
                Return CType(Me(Me.tableMoneda.ValorCompraColumn),Double)
            End Get
            Set
                Me(Me.tableMoneda.ValorCompraColumn) = value
            End Set
        End Property
        
        Public Property ValorVenta As Double
            Get
                Return CType(Me(Me.tableMoneda.ValorVentaColumn),Double)
            End Get
            Set
                Me(Me.tableMoneda.ValorVentaColumn) = value
            End Set
        End Property
        
        Public Property Simbolo As String
            Get
                Return CType(Me(Me.tableMoneda.SimboloColumn),String)
            End Get
            Set
                Me(Me.tableMoneda.SimboloColumn) = value
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MonedaRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As MonedaRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As MonedaRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As MonedaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Horas_OrdinariasDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnHoras As DataColumn
        
        Friend Sub New()
            MyBase.New("Horas_Ordinarias")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property HorasColumn As DataColumn
            Get
                Return Me.columnHoras
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Horas_OrdinariasRow
            Get
                Return CType(Me.Rows(index),Horas_OrdinariasRow)
            End Get
        End Property
        
        Public Event Horas_OrdinariasRowChanged As Horas_OrdinariasRowChangeEventHandler
        
        Public Event Horas_OrdinariasRowChanging As Horas_OrdinariasRowChangeEventHandler
        
        Public Event Horas_OrdinariasRowDeleted As Horas_OrdinariasRowChangeEventHandler
        
        Public Event Horas_OrdinariasRowDeleting As Horas_OrdinariasRowChangeEventHandler
        
        Public Overloads Sub AddHoras_OrdinariasRow(ByVal row As Horas_OrdinariasRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddHoras_OrdinariasRow(ByVal Horas As Integer) As Horas_OrdinariasRow
            Dim rowHoras_OrdinariasRow As Horas_OrdinariasRow = CType(Me.NewRow,Horas_OrdinariasRow)
            rowHoras_OrdinariasRow.ItemArray = New Object() {Horas}
            Me.Rows.Add(rowHoras_OrdinariasRow)
            Return rowHoras_OrdinariasRow
        End Function
        
        Public Function FindByHoras(ByVal Horas As Integer) As Horas_OrdinariasRow
            Return CType(Me.Rows.Find(New Object() {Horas}),Horas_OrdinariasRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Horas_OrdinariasDataTable = CType(MyBase.Clone,Horas_OrdinariasDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Horas_OrdinariasDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnHoras = Me.Columns("Horas")
        End Sub
        
        Private Sub InitClass()
            Me.columnHoras = New DataColumn("Horas", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHoras)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnHoras}, true))
            Me.columnHoras.AllowDBNull = false
            Me.columnHoras.Unique = true
        End Sub
        
        Public Function NewHoras_OrdinariasRow() As Horas_OrdinariasRow
            Return CType(Me.NewRow,Horas_OrdinariasRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Horas_OrdinariasRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Horas_OrdinariasRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Horas_OrdinariasRowChangedEvent) Is Nothing) Then
                RaiseEvent Horas_OrdinariasRowChanged(Me, New Horas_OrdinariasRowChangeEvent(CType(e.Row,Horas_OrdinariasRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Horas_OrdinariasRowChangingEvent) Is Nothing) Then
                RaiseEvent Horas_OrdinariasRowChanging(Me, New Horas_OrdinariasRowChangeEvent(CType(e.Row,Horas_OrdinariasRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Horas_OrdinariasRowDeletedEvent) Is Nothing) Then
                RaiseEvent Horas_OrdinariasRowDeleted(Me, New Horas_OrdinariasRowChangeEvent(CType(e.Row,Horas_OrdinariasRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Horas_OrdinariasRowDeletingEvent) Is Nothing) Then
                RaiseEvent Horas_OrdinariasRowDeleting(Me, New Horas_OrdinariasRowChangeEvent(CType(e.Row,Horas_OrdinariasRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveHoras_OrdinariasRow(ByVal row As Horas_OrdinariasRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Horas_OrdinariasRow
        Inherits DataRow
        
        Private tableHoras_Ordinarias As Horas_OrdinariasDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableHoras_Ordinarias = CType(Me.Table,Horas_OrdinariasDataTable)
        End Sub
        
        Public Property Horas As Integer
            Get
                Return CType(Me(Me.tableHoras_Ordinarias.HorasColumn),Integer)
            End Get
            Set
                Me(Me.tableHoras_Ordinarias.HorasColumn) = value
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Horas_OrdinariasRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Horas_OrdinariasRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Horas_OrdinariasRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Horas_OrdinariasRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
