'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class Deduccion
    Inherits DataSet
    
    Private tableMoneda As MonedaDataTable
    
    Private tableEmpleado_Deducciones As Empleado_DeduccionesDataTable
    
    Private tableEmpleado As EmpleadoDataTable
    
    Private tableDeducciones1 As Deducciones1DataTable
    
    Private tableDeducciones As DeduccionesDataTable
    
    Private relationDeducciones1Empleado_Deducciones As DataRelation
    
    Private relationEmpleadoEmpleado_Deducciones As DataRelation
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Moneda")) Is Nothing) Then
                Me.Tables.Add(New MonedaDataTable(ds.Tables("Moneda")))
            End If
            If (Not (ds.Tables("Empleado_Deducciones")) Is Nothing) Then
                Me.Tables.Add(New Empleado_DeduccionesDataTable(ds.Tables("Empleado_Deducciones")))
            End If
            If (Not (ds.Tables("Empleado")) Is Nothing) Then
                Me.Tables.Add(New EmpleadoDataTable(ds.Tables("Empleado")))
            End If
            If (Not (ds.Tables("Deducciones1")) Is Nothing) Then
                Me.Tables.Add(New Deducciones1DataTable(ds.Tables("Deducciones1")))
            End If
            If (Not (ds.Tables("Deducciones")) Is Nothing) Then
                Me.Tables.Add(New DeduccionesDataTable(ds.Tables("Deducciones")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Moneda As MonedaDataTable
        Get
            Return Me.tableMoneda
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Empleado_Deducciones As Empleado_DeduccionesDataTable
        Get
            Return Me.tableEmpleado_Deducciones
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Empleado As EmpleadoDataTable
        Get
            Return Me.tableEmpleado
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Deducciones1 As Deducciones1DataTable
        Get
            Return Me.tableDeducciones1
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Deducciones As DeduccionesDataTable
        Get
            Return Me.tableDeducciones
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As Deduccion = CType(MyBase.Clone,Deduccion)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("Moneda")) Is Nothing) Then
            Me.Tables.Add(New MonedaDataTable(ds.Tables("Moneda")))
        End If
        If (Not (ds.Tables("Empleado_Deducciones")) Is Nothing) Then
            Me.Tables.Add(New Empleado_DeduccionesDataTable(ds.Tables("Empleado_Deducciones")))
        End If
        If (Not (ds.Tables("Empleado")) Is Nothing) Then
            Me.Tables.Add(New EmpleadoDataTable(ds.Tables("Empleado")))
        End If
        If (Not (ds.Tables("Deducciones1")) Is Nothing) Then
            Me.Tables.Add(New Deducciones1DataTable(ds.Tables("Deducciones1")))
        End If
        If (Not (ds.Tables("Deducciones")) Is Nothing) Then
            Me.Tables.Add(New DeduccionesDataTable(ds.Tables("Deducciones")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableMoneda = CType(Me.Tables("Moneda"),MonedaDataTable)
        If (Not (Me.tableMoneda) Is Nothing) Then
            Me.tableMoneda.InitVars
        End If
        Me.tableEmpleado_Deducciones = CType(Me.Tables("Empleado_Deducciones"),Empleado_DeduccionesDataTable)
        If (Not (Me.tableEmpleado_Deducciones) Is Nothing) Then
            Me.tableEmpleado_Deducciones.InitVars
        End If
        Me.tableEmpleado = CType(Me.Tables("Empleado"),EmpleadoDataTable)
        If (Not (Me.tableEmpleado) Is Nothing) Then
            Me.tableEmpleado.InitVars
        End If
        Me.tableDeducciones1 = CType(Me.Tables("Deducciones1"),Deducciones1DataTable)
        If (Not (Me.tableDeducciones1) Is Nothing) Then
            Me.tableDeducciones1.InitVars
        End If
        Me.tableDeducciones = CType(Me.Tables("Deducciones"),DeduccionesDataTable)
        If (Not (Me.tableDeducciones) Is Nothing) Then
            Me.tableDeducciones.InitVars
        End If
        Me.relationDeducciones1Empleado_Deducciones = Me.Relations("Deducciones1Empleado_Deducciones")
        Me.relationEmpleadoEmpleado_Deducciones = Me.Relations("EmpleadoEmpleado_Deducciones")
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "Deduccion"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/Deduccion.xsd"
        Me.Locale = New System.Globalization.CultureInfo("es-CR")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableMoneda = New MonedaDataTable
        Me.Tables.Add(Me.tableMoneda)
        Me.tableEmpleado_Deducciones = New Empleado_DeduccionesDataTable
        Me.Tables.Add(Me.tableEmpleado_Deducciones)
        Me.tableEmpleado = New EmpleadoDataTable
        Me.Tables.Add(Me.tableEmpleado)
        Me.tableDeducciones1 = New Deducciones1DataTable
        Me.Tables.Add(Me.tableDeducciones1)
        Me.tableDeducciones = New DeduccionesDataTable
        Me.Tables.Add(Me.tableDeducciones)
        Dim fkc As ForeignKeyConstraint
        fkc = New ForeignKeyConstraint("Deducciones1Empleado_Deducciones", New DataColumn() {Me.tableDeducciones1.CodigoColumn}, New DataColumn() {Me.tableEmpleado_Deducciones.CodigoColumn})
        Me.tableEmpleado_Deducciones.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("EmpleadoEmpleado_Deducciones", New DataColumn() {Me.tableEmpleado.IdentificacionColumn}, New DataColumn() {Me.tableEmpleado_Deducciones.IdentificacionColumn})
        Me.tableEmpleado_Deducciones.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        Me.relationDeducciones1Empleado_Deducciones = New DataRelation("Deducciones1Empleado_Deducciones", New DataColumn() {Me.tableDeducciones1.CodigoColumn}, New DataColumn() {Me.tableEmpleado_Deducciones.CodigoColumn}, false)
        Me.Relations.Add(Me.relationDeducciones1Empleado_Deducciones)
        Me.relationEmpleadoEmpleado_Deducciones = New DataRelation("EmpleadoEmpleado_Deducciones", New DataColumn() {Me.tableEmpleado.IdentificacionColumn}, New DataColumn() {Me.tableEmpleado_Deducciones.IdentificacionColumn}, false)
        Me.Relations.Add(Me.relationEmpleadoEmpleado_Deducciones)
    End Sub
    
    Private Function ShouldSerializeMoneda() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeEmpleado_Deducciones() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeEmpleado() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeDeducciones1() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeDeducciones() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub MonedaRowChangeEventHandler(ByVal sender As Object, ByVal e As MonedaRowChangeEvent)
    
    Public Delegate Sub Empleado_DeduccionesRowChangeEventHandler(ByVal sender As Object, ByVal e As Empleado_DeduccionesRowChangeEvent)
    
    Public Delegate Sub EmpleadoRowChangeEventHandler(ByVal sender As Object, ByVal e As EmpleadoRowChangeEvent)
    
    Public Delegate Sub Deducciones1RowChangeEventHandler(ByVal sender As Object, ByVal e As Deducciones1RowChangeEvent)
    
    Public Delegate Sub DeduccionesRowChangeEventHandler(ByVal sender As Object, ByVal e As DeduccionesRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MonedaDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCodMoneda As DataColumn
        
        Private columnMonedaNombre As DataColumn
        
        Private columnValorCompra As DataColumn
        
        Private columnValorVenta As DataColumn
        
        Private columnSimbolo As DataColumn
        
        Friend Sub New()
            MyBase.New("Moneda")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property CodMonedaColumn As DataColumn
            Get
                Return Me.columnCodMoneda
            End Get
        End Property
        
        Friend ReadOnly Property MonedaNombreColumn As DataColumn
            Get
                Return Me.columnMonedaNombre
            End Get
        End Property
        
        Friend ReadOnly Property ValorCompraColumn As DataColumn
            Get
                Return Me.columnValorCompra
            End Get
        End Property
        
        Friend ReadOnly Property ValorVentaColumn As DataColumn
            Get
                Return Me.columnValorVenta
            End Get
        End Property
        
        Friend ReadOnly Property SimboloColumn As DataColumn
            Get
                Return Me.columnSimbolo
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As MonedaRow
            Get
                Return CType(Me.Rows(index),MonedaRow)
            End Get
        End Property
        
        Public Event MonedaRowChanged As MonedaRowChangeEventHandler
        
        Public Event MonedaRowChanging As MonedaRowChangeEventHandler
        
        Public Event MonedaRowDeleted As MonedaRowChangeEventHandler
        
        Public Event MonedaRowDeleting As MonedaRowChangeEventHandler
        
        Public Overloads Sub AddMonedaRow(ByVal row As MonedaRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddMonedaRow(ByVal CodMoneda As Integer, ByVal MonedaNombre As String, ByVal ValorCompra As Double, ByVal ValorVenta As Double, ByVal Simbolo As String) As MonedaRow
            Dim rowMonedaRow As MonedaRow = CType(Me.NewRow,MonedaRow)
            rowMonedaRow.ItemArray = New Object() {CodMoneda, MonedaNombre, ValorCompra, ValorVenta, Simbolo}
            Me.Rows.Add(rowMonedaRow)
            Return rowMonedaRow
        End Function
        
        Public Function FindByCodMoneda(ByVal CodMoneda As Integer) As MonedaRow
            Return CType(Me.Rows.Find(New Object() {CodMoneda}),MonedaRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As MonedaDataTable = CType(MyBase.Clone,MonedaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New MonedaDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCodMoneda = Me.Columns("CodMoneda")
            Me.columnMonedaNombre = Me.Columns("MonedaNombre")
            Me.columnValorCompra = Me.Columns("ValorCompra")
            Me.columnValorVenta = Me.Columns("ValorVenta")
            Me.columnSimbolo = Me.Columns("Simbolo")
        End Sub
        
        Private Sub InitClass()
            Me.columnCodMoneda = New DataColumn("CodMoneda", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCodMoneda)
            Me.columnMonedaNombre = New DataColumn("MonedaNombre", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMonedaNombre)
            Me.columnValorCompra = New DataColumn("ValorCompra", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnValorCompra)
            Me.columnValorVenta = New DataColumn("ValorVenta", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnValorVenta)
            Me.columnSimbolo = New DataColumn("Simbolo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSimbolo)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnCodMoneda}, true))
            Me.columnCodMoneda.AllowDBNull = false
            Me.columnCodMoneda.Unique = true
            Me.columnMonedaNombre.AllowDBNull = false
            Me.columnValorCompra.AllowDBNull = false
            Me.columnValorVenta.AllowDBNull = false
            Me.columnSimbolo.AllowDBNull = false
        End Sub
        
        Public Function NewMonedaRow() As MonedaRow
            Return CType(Me.NewRow,MonedaRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New MonedaRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(MonedaRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MonedaRowChangedEvent) Is Nothing) Then
                RaiseEvent MonedaRowChanged(Me, New MonedaRowChangeEvent(CType(e.Row,MonedaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MonedaRowChangingEvent) Is Nothing) Then
                RaiseEvent MonedaRowChanging(Me, New MonedaRowChangeEvent(CType(e.Row,MonedaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MonedaRowDeletedEvent) Is Nothing) Then
                RaiseEvent MonedaRowDeleted(Me, New MonedaRowChangeEvent(CType(e.Row,MonedaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MonedaRowDeletingEvent) Is Nothing) Then
                RaiseEvent MonedaRowDeleting(Me, New MonedaRowChangeEvent(CType(e.Row,MonedaRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveMonedaRow(ByVal row As MonedaRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MonedaRow
        Inherits DataRow
        
        Private tableMoneda As MonedaDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableMoneda = CType(Me.Table,MonedaDataTable)
        End Sub
        
        Public Property CodMoneda As Integer
            Get
                Return CType(Me(Me.tableMoneda.CodMonedaColumn),Integer)
            End Get
            Set
                Me(Me.tableMoneda.CodMonedaColumn) = value
            End Set
        End Property
        
        Public Property MonedaNombre As String
            Get
                Return CType(Me(Me.tableMoneda.MonedaNombreColumn),String)
            End Get
            Set
                Me(Me.tableMoneda.MonedaNombreColumn) = value
            End Set
        End Property
        
        Public Property ValorCompra As Double
            Get
                Return CType(Me(Me.tableMoneda.ValorCompraColumn),Double)
            End Get
            Set
                Me(Me.tableMoneda.ValorCompraColumn) = value
            End Set
        End Property
        
        Public Property ValorVenta As Double
            Get
                Return CType(Me(Me.tableMoneda.ValorVentaColumn),Double)
            End Get
            Set
                Me(Me.tableMoneda.ValorVentaColumn) = value
            End Set
        End Property
        
        Public Property Simbolo As String
            Get
                Return CType(Me(Me.tableMoneda.SimboloColumn),String)
            End Get
            Set
                Me(Me.tableMoneda.SimboloColumn) = value
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MonedaRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As MonedaRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As MonedaRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As MonedaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Empleado_DeduccionesDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnId As DataColumn
        
        Private columnIdentificacion As DataColumn
        
        Private columnCodigo As DataColumn
        
        Private columnDescripcion As DataColumn
        
        Private columnMonto As DataColumn
        
        Private columnTipo As DataColumn
        
        Private columnCod_Moneda As DataColumn
        
        Friend Sub New()
            MyBase.New("Empleado_Deducciones")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IdColumn As DataColumn
            Get
                Return Me.columnId
            End Get
        End Property
        
        Friend ReadOnly Property IdentificacionColumn As DataColumn
            Get
                Return Me.columnIdentificacion
            End Get
        End Property
        
        Friend ReadOnly Property CodigoColumn As DataColumn
            Get
                Return Me.columnCodigo
            End Get
        End Property
        
        Friend ReadOnly Property DescripcionColumn As DataColumn
            Get
                Return Me.columnDescripcion
            End Get
        End Property
        
        Friend ReadOnly Property MontoColumn As DataColumn
            Get
                Return Me.columnMonto
            End Get
        End Property
        
        Friend ReadOnly Property TipoColumn As DataColumn
            Get
                Return Me.columnTipo
            End Get
        End Property
        
        Friend ReadOnly Property Cod_MonedaColumn As DataColumn
            Get
                Return Me.columnCod_Moneda
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Empleado_DeduccionesRow
            Get
                Return CType(Me.Rows(index),Empleado_DeduccionesRow)
            End Get
        End Property
        
        Public Event Empleado_DeduccionesRowChanged As Empleado_DeduccionesRowChangeEventHandler
        
        Public Event Empleado_DeduccionesRowChanging As Empleado_DeduccionesRowChangeEventHandler
        
        Public Event Empleado_DeduccionesRowDeleted As Empleado_DeduccionesRowChangeEventHandler
        
        Public Event Empleado_DeduccionesRowDeleting As Empleado_DeduccionesRowChangeEventHandler
        
        Public Overloads Sub AddEmpleado_DeduccionesRow(ByVal row As Empleado_DeduccionesRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddEmpleado_DeduccionesRow(ByVal parentEmpleadoRowByEmpleadoEmpleado_Deducciones As EmpleadoRow, ByVal parentDeducciones1RowByDeducciones1Empleado_Deducciones As Deducciones1Row, ByVal Descripcion As String, ByVal Monto As Double, ByVal Tipo As String, ByVal Cod_Moneda As Integer) As Empleado_DeduccionesRow
            Dim rowEmpleado_DeduccionesRow As Empleado_DeduccionesRow = CType(Me.NewRow,Empleado_DeduccionesRow)
            rowEmpleado_DeduccionesRow.ItemArray = New Object() {Nothing, parentEmpleadoRowByEmpleadoEmpleado_Deducciones(0), parentDeducciones1RowByDeducciones1Empleado_Deducciones(0), Descripcion, Monto, Tipo, Cod_Moneda}
            Me.Rows.Add(rowEmpleado_DeduccionesRow)
            Return rowEmpleado_DeduccionesRow
        End Function
        
        Public Function FindById(ByVal Id As Long) As Empleado_DeduccionesRow
            Return CType(Me.Rows.Find(New Object() {Id}),Empleado_DeduccionesRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Empleado_DeduccionesDataTable = CType(MyBase.Clone,Empleado_DeduccionesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Empleado_DeduccionesDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnId = Me.Columns("Id")
            Me.columnIdentificacion = Me.Columns("Identificacion")
            Me.columnCodigo = Me.Columns("Codigo")
            Me.columnDescripcion = Me.Columns("Descripcion")
            Me.columnMonto = Me.Columns("Monto")
            Me.columnTipo = Me.Columns("Tipo")
            Me.columnCod_Moneda = Me.Columns("Cod_Moneda")
        End Sub
        
        Private Sub InitClass()
            Me.columnId = New DataColumn("Id", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId)
            Me.columnIdentificacion = New DataColumn("Identificacion", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdentificacion)
            Me.columnCodigo = New DataColumn("Codigo", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCodigo)
            Me.columnDescripcion = New DataColumn("Descripcion", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescripcion)
            Me.columnMonto = New DataColumn("Monto", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMonto)
            Me.columnTipo = New DataColumn("Tipo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTipo)
            Me.columnCod_Moneda = New DataColumn("Cod_Moneda", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCod_Moneda)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnId}, true))
            Me.columnId.AutoIncrement = true
            Me.columnId.AllowDBNull = false
            Me.columnId.ReadOnly = true
            Me.columnId.Unique = true
            Me.columnIdentificacion.AllowDBNull = false
            Me.columnCodigo.AllowDBNull = false
            Me.columnDescripcion.AllowDBNull = false
            Me.columnMonto.AllowDBNull = false
            Me.columnTipo.AllowDBNull = false
            Me.columnCod_Moneda.AllowDBNull = false
        End Sub
        
        Public Function NewEmpleado_DeduccionesRow() As Empleado_DeduccionesRow
            Return CType(Me.NewRow,Empleado_DeduccionesRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Empleado_DeduccionesRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Empleado_DeduccionesRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Empleado_DeduccionesRowChangedEvent) Is Nothing) Then
                RaiseEvent Empleado_DeduccionesRowChanged(Me, New Empleado_DeduccionesRowChangeEvent(CType(e.Row,Empleado_DeduccionesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Empleado_DeduccionesRowChangingEvent) Is Nothing) Then
                RaiseEvent Empleado_DeduccionesRowChanging(Me, New Empleado_DeduccionesRowChangeEvent(CType(e.Row,Empleado_DeduccionesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Empleado_DeduccionesRowDeletedEvent) Is Nothing) Then
                RaiseEvent Empleado_DeduccionesRowDeleted(Me, New Empleado_DeduccionesRowChangeEvent(CType(e.Row,Empleado_DeduccionesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Empleado_DeduccionesRowDeletingEvent) Is Nothing) Then
                RaiseEvent Empleado_DeduccionesRowDeleting(Me, New Empleado_DeduccionesRowChangeEvent(CType(e.Row,Empleado_DeduccionesRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveEmpleado_DeduccionesRow(ByVal row As Empleado_DeduccionesRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Empleado_DeduccionesRow
        Inherits DataRow
        
        Private tableEmpleado_Deducciones As Empleado_DeduccionesDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableEmpleado_Deducciones = CType(Me.Table,Empleado_DeduccionesDataTable)
        End Sub
        
        Public Property Id As Long
            Get
                Return CType(Me(Me.tableEmpleado_Deducciones.IdColumn),Long)
            End Get
            Set
                Me(Me.tableEmpleado_Deducciones.IdColumn) = value
            End Set
        End Property
        
        Public Property Identificacion As String
            Get
                Return CType(Me(Me.tableEmpleado_Deducciones.IdentificacionColumn),String)
            End Get
            Set
                Me(Me.tableEmpleado_Deducciones.IdentificacionColumn) = value
            End Set
        End Property
        
        Public Property Codigo As Integer
            Get
                Return CType(Me(Me.tableEmpleado_Deducciones.CodigoColumn),Integer)
            End Get
            Set
                Me(Me.tableEmpleado_Deducciones.CodigoColumn) = value
            End Set
        End Property
        
        Public Property Descripcion As String
            Get
                Return CType(Me(Me.tableEmpleado_Deducciones.DescripcionColumn),String)
            End Get
            Set
                Me(Me.tableEmpleado_Deducciones.DescripcionColumn) = value
            End Set
        End Property
        
        Public Property Monto As Double
            Get
                Return CType(Me(Me.tableEmpleado_Deducciones.MontoColumn),Double)
            End Get
            Set
                Me(Me.tableEmpleado_Deducciones.MontoColumn) = value
            End Set
        End Property
        
        Public Property Tipo As String
            Get
                Return CType(Me(Me.tableEmpleado_Deducciones.TipoColumn),String)
            End Get
            Set
                Me(Me.tableEmpleado_Deducciones.TipoColumn) = value
            End Set
        End Property
        
        Public Property Cod_Moneda As Integer
            Get
                Return CType(Me(Me.tableEmpleado_Deducciones.Cod_MonedaColumn),Integer)
            End Get
            Set
                Me(Me.tableEmpleado_Deducciones.Cod_MonedaColumn) = value
            End Set
        End Property
        
        Public Property Deducciones1Row As Deducciones1Row
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Deducciones1Empleado_Deducciones")),Deducciones1Row)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Deducciones1Empleado_Deducciones"))
            End Set
        End Property
        
        Public Property EmpleadoRow As EmpleadoRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("EmpleadoEmpleado_Deducciones")),EmpleadoRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("EmpleadoEmpleado_Deducciones"))
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Empleado_DeduccionesRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Empleado_DeduccionesRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Empleado_DeduccionesRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Empleado_DeduccionesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class EmpleadoDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnIdentificacion As DataColumn
        
        Friend Sub New()
            MyBase.New("Empleado")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IdentificacionColumn As DataColumn
            Get
                Return Me.columnIdentificacion
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As EmpleadoRow
            Get
                Return CType(Me.Rows(index),EmpleadoRow)
            End Get
        End Property
        
        Public Event EmpleadoRowChanged As EmpleadoRowChangeEventHandler
        
        Public Event EmpleadoRowChanging As EmpleadoRowChangeEventHandler
        
        Public Event EmpleadoRowDeleted As EmpleadoRowChangeEventHandler
        
        Public Event EmpleadoRowDeleting As EmpleadoRowChangeEventHandler
        
        Public Overloads Sub AddEmpleadoRow(ByVal row As EmpleadoRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddEmpleadoRow(ByVal Identificacion As String) As EmpleadoRow
            Dim rowEmpleadoRow As EmpleadoRow = CType(Me.NewRow,EmpleadoRow)
            rowEmpleadoRow.ItemArray = New Object() {Identificacion}
            Me.Rows.Add(rowEmpleadoRow)
            Return rowEmpleadoRow
        End Function
        
        Public Function FindByIdentificacion(ByVal Identificacion As String) As EmpleadoRow
            Return CType(Me.Rows.Find(New Object() {Identificacion}),EmpleadoRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As EmpleadoDataTable = CType(MyBase.Clone,EmpleadoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New EmpleadoDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnIdentificacion = Me.Columns("Identificacion")
        End Sub
        
        Private Sub InitClass()
            Me.columnIdentificacion = New DataColumn("Identificacion", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdentificacion)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnIdentificacion}, true))
            Me.columnIdentificacion.AllowDBNull = false
            Me.columnIdentificacion.Unique = true
        End Sub
        
        Public Function NewEmpleadoRow() As EmpleadoRow
            Return CType(Me.NewRow,EmpleadoRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New EmpleadoRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(EmpleadoRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EmpleadoRowChangedEvent) Is Nothing) Then
                RaiseEvent EmpleadoRowChanged(Me, New EmpleadoRowChangeEvent(CType(e.Row,EmpleadoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EmpleadoRowChangingEvent) Is Nothing) Then
                RaiseEvent EmpleadoRowChanging(Me, New EmpleadoRowChangeEvent(CType(e.Row,EmpleadoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EmpleadoRowDeletedEvent) Is Nothing) Then
                RaiseEvent EmpleadoRowDeleted(Me, New EmpleadoRowChangeEvent(CType(e.Row,EmpleadoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EmpleadoRowDeletingEvent) Is Nothing) Then
                RaiseEvent EmpleadoRowDeleting(Me, New EmpleadoRowChangeEvent(CType(e.Row,EmpleadoRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveEmpleadoRow(ByVal row As EmpleadoRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class EmpleadoRow
        Inherits DataRow
        
        Private tableEmpleado As EmpleadoDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableEmpleado = CType(Me.Table,EmpleadoDataTable)
        End Sub
        
        Public Property Identificacion As String
            Get
                Return CType(Me(Me.tableEmpleado.IdentificacionColumn),String)
            End Get
            Set
                Me(Me.tableEmpleado.IdentificacionColumn) = value
            End Set
        End Property
        
        Public Function GetEmpleado_DeduccionesRows() As Empleado_DeduccionesRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("EmpleadoEmpleado_Deducciones")),Empleado_DeduccionesRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class EmpleadoRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As EmpleadoRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As EmpleadoRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As EmpleadoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Deducciones1DataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCodigo As DataColumn
        
        Private columnDescripcion As DataColumn
        
        Private columnMonto As DataColumn
        
        Private columnTipo As DataColumn
        
        Private columnAplica As DataColumn
        
        Private columnCod_Moneda As DataColumn
        
        Friend Sub New()
            MyBase.New("Deducciones1")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property CodigoColumn As DataColumn
            Get
                Return Me.columnCodigo
            End Get
        End Property
        
        Friend ReadOnly Property DescripcionColumn As DataColumn
            Get
                Return Me.columnDescripcion
            End Get
        End Property
        
        Friend ReadOnly Property MontoColumn As DataColumn
            Get
                Return Me.columnMonto
            End Get
        End Property
        
        Friend ReadOnly Property TipoColumn As DataColumn
            Get
                Return Me.columnTipo
            End Get
        End Property
        
        Friend ReadOnly Property AplicaColumn As DataColumn
            Get
                Return Me.columnAplica
            End Get
        End Property
        
        Friend ReadOnly Property Cod_MonedaColumn As DataColumn
            Get
                Return Me.columnCod_Moneda
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Deducciones1Row
            Get
                Return CType(Me.Rows(index),Deducciones1Row)
            End Get
        End Property
        
        Public Event Deducciones1RowChanged As Deducciones1RowChangeEventHandler
        
        Public Event Deducciones1RowChanging As Deducciones1RowChangeEventHandler
        
        Public Event Deducciones1RowDeleted As Deducciones1RowChangeEventHandler
        
        Public Event Deducciones1RowDeleting As Deducciones1RowChangeEventHandler
        
        Public Overloads Sub AddDeducciones1Row(ByVal row As Deducciones1Row)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddDeducciones1Row(ByVal Descripcion As String, ByVal Monto As Double, ByVal Tipo As String, ByVal Aplica As Boolean, ByVal Cod_Moneda As Integer) As Deducciones1Row
            Dim rowDeducciones1Row As Deducciones1Row = CType(Me.NewRow,Deducciones1Row)
            rowDeducciones1Row.ItemArray = New Object() {Nothing, Descripcion, Monto, Tipo, Aplica, Cod_Moneda}
            Me.Rows.Add(rowDeducciones1Row)
            Return rowDeducciones1Row
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Deducciones1DataTable = CType(MyBase.Clone,Deducciones1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Deducciones1DataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCodigo = Me.Columns("Codigo")
            Me.columnDescripcion = Me.Columns("Descripcion")
            Me.columnMonto = Me.Columns("Monto")
            Me.columnTipo = Me.Columns("Tipo")
            Me.columnAplica = Me.Columns("Aplica")
            Me.columnCod_Moneda = Me.Columns("Cod_Moneda")
        End Sub
        
        Private Sub InitClass()
            Me.columnCodigo = New DataColumn("Codigo", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCodigo)
            Me.columnDescripcion = New DataColumn("Descripcion", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescripcion)
            Me.columnMonto = New DataColumn("Monto", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMonto)
            Me.columnTipo = New DataColumn("Tipo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTipo)
            Me.columnAplica = New DataColumn("Aplica", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAplica)
            Me.columnCod_Moneda = New DataColumn("Cod_Moneda", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCod_Moneda)
            Me.Constraints.Add(New UniqueConstraint("key1", New DataColumn() {Me.columnCodigo}, false))
            Me.columnCodigo.AutoIncrement = true
            Me.columnCodigo.AllowDBNull = false
            Me.columnCodigo.ReadOnly = true
            Me.columnCodigo.Unique = true
            Me.columnDescripcion.AllowDBNull = false
            Me.columnMonto.AllowDBNull = false
            Me.columnTipo.AllowDBNull = false
            Me.columnAplica.AllowDBNull = false
            Me.columnCod_Moneda.AllowDBNull = false
        End Sub
        
        Public Function NewDeducciones1Row() As Deducciones1Row
            Return CType(Me.NewRow,Deducciones1Row)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Deducciones1Row(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Deducciones1Row)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Deducciones1RowChangedEvent) Is Nothing) Then
                RaiseEvent Deducciones1RowChanged(Me, New Deducciones1RowChangeEvent(CType(e.Row,Deducciones1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Deducciones1RowChangingEvent) Is Nothing) Then
                RaiseEvent Deducciones1RowChanging(Me, New Deducciones1RowChangeEvent(CType(e.Row,Deducciones1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Deducciones1RowDeletedEvent) Is Nothing) Then
                RaiseEvent Deducciones1RowDeleted(Me, New Deducciones1RowChangeEvent(CType(e.Row,Deducciones1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Deducciones1RowDeletingEvent) Is Nothing) Then
                RaiseEvent Deducciones1RowDeleting(Me, New Deducciones1RowChangeEvent(CType(e.Row,Deducciones1Row), e.Action))
            End If
        End Sub
        
        Public Sub RemoveDeducciones1Row(ByVal row As Deducciones1Row)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Deducciones1Row
        Inherits DataRow
        
        Private tableDeducciones1 As Deducciones1DataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableDeducciones1 = CType(Me.Table,Deducciones1DataTable)
        End Sub
        
        Public Property Codigo As Integer
            Get
                Return CType(Me(Me.tableDeducciones1.CodigoColumn),Integer)
            End Get
            Set
                Me(Me.tableDeducciones1.CodigoColumn) = value
            End Set
        End Property
        
        Public Property Descripcion As String
            Get
                Return CType(Me(Me.tableDeducciones1.DescripcionColumn),String)
            End Get
            Set
                Me(Me.tableDeducciones1.DescripcionColumn) = value
            End Set
        End Property
        
        Public Property Monto As Double
            Get
                Return CType(Me(Me.tableDeducciones1.MontoColumn),Double)
            End Get
            Set
                Me(Me.tableDeducciones1.MontoColumn) = value
            End Set
        End Property
        
        Public Property Tipo As String
            Get
                Return CType(Me(Me.tableDeducciones1.TipoColumn),String)
            End Get
            Set
                Me(Me.tableDeducciones1.TipoColumn) = value
            End Set
        End Property
        
        Public Property Aplica As Boolean
            Get
                Return CType(Me(Me.tableDeducciones1.AplicaColumn),Boolean)
            End Get
            Set
                Me(Me.tableDeducciones1.AplicaColumn) = value
            End Set
        End Property
        
        Public Property Cod_Moneda As Integer
            Get
                Return CType(Me(Me.tableDeducciones1.Cod_MonedaColumn),Integer)
            End Get
            Set
                Me(Me.tableDeducciones1.Cod_MonedaColumn) = value
            End Set
        End Property
        
        Public Function GetEmpleado_DeduccionesRows() As Empleado_DeduccionesRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("Deducciones1Empleado_Deducciones")),Empleado_DeduccionesRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Deducciones1RowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Deducciones1Row
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Deducciones1Row, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Deducciones1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DeduccionesDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCodigo As DataColumn
        
        Private columnDescripcion As DataColumn
        
        Private columnMonto As DataColumn
        
        Private columnTipo As DataColumn
        
        Private columnAplica As DataColumn
        
        Private columnCod_Moneda As DataColumn
        
        Private columnCuentaContable As DataColumn
        
        Friend Sub New()
            MyBase.New("Deducciones")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property CodigoColumn As DataColumn
            Get
                Return Me.columnCodigo
            End Get
        End Property
        
        Friend ReadOnly Property DescripcionColumn As DataColumn
            Get
                Return Me.columnDescripcion
            End Get
        End Property
        
        Friend ReadOnly Property MontoColumn As DataColumn
            Get
                Return Me.columnMonto
            End Get
        End Property
        
        Friend ReadOnly Property TipoColumn As DataColumn
            Get
                Return Me.columnTipo
            End Get
        End Property
        
        Friend ReadOnly Property AplicaColumn As DataColumn
            Get
                Return Me.columnAplica
            End Get
        End Property
        
        Friend ReadOnly Property Cod_MonedaColumn As DataColumn
            Get
                Return Me.columnCod_Moneda
            End Get
        End Property
        
        Friend ReadOnly Property CuentaContableColumn As DataColumn
            Get
                Return Me.columnCuentaContable
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As DeduccionesRow
            Get
                Return CType(Me.Rows(index),DeduccionesRow)
            End Get
        End Property
        
        Public Event DeduccionesRowChanged As DeduccionesRowChangeEventHandler
        
        Public Event DeduccionesRowChanging As DeduccionesRowChangeEventHandler
        
        Public Event DeduccionesRowDeleted As DeduccionesRowChangeEventHandler
        
        Public Event DeduccionesRowDeleting As DeduccionesRowChangeEventHandler
        
        Public Overloads Sub AddDeduccionesRow(ByVal row As DeduccionesRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddDeduccionesRow(ByVal Descripcion As String, ByVal Monto As Double, ByVal Tipo As String, ByVal Aplica As Boolean, ByVal Cod_Moneda As Integer, ByVal CuentaContable As String) As DeduccionesRow
            Dim rowDeduccionesRow As DeduccionesRow = CType(Me.NewRow,DeduccionesRow)
            rowDeduccionesRow.ItemArray = New Object() {Nothing, Descripcion, Monto, Tipo, Aplica, Cod_Moneda, CuentaContable}
            Me.Rows.Add(rowDeduccionesRow)
            Return rowDeduccionesRow
        End Function
        
        Public Function FindByCodigo(ByVal Codigo As Integer) As DeduccionesRow
            Return CType(Me.Rows.Find(New Object() {Codigo}),DeduccionesRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As DeduccionesDataTable = CType(MyBase.Clone,DeduccionesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New DeduccionesDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCodigo = Me.Columns("Codigo")
            Me.columnDescripcion = Me.Columns("Descripcion")
            Me.columnMonto = Me.Columns("Monto")
            Me.columnTipo = Me.Columns("Tipo")
            Me.columnAplica = Me.Columns("Aplica")
            Me.columnCod_Moneda = Me.Columns("Cod_Moneda")
            Me.columnCuentaContable = Me.Columns("CuentaContable")
        End Sub
        
        Private Sub InitClass()
            Me.columnCodigo = New DataColumn("Codigo", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCodigo)
            Me.columnDescripcion = New DataColumn("Descripcion", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescripcion)
            Me.columnMonto = New DataColumn("Monto", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMonto)
            Me.columnTipo = New DataColumn("Tipo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTipo)
            Me.columnAplica = New DataColumn("Aplica", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAplica)
            Me.columnCod_Moneda = New DataColumn("Cod_Moneda", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCod_Moneda)
            Me.columnCuentaContable = New DataColumn("CuentaContable", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCuentaContable)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnCodigo}, true))
            Me.columnCodigo.AutoIncrement = true
            Me.columnCodigo.AllowDBNull = false
            Me.columnCodigo.ReadOnly = true
            Me.columnCodigo.Unique = true
            Me.columnDescripcion.AllowDBNull = false
            Me.columnMonto.AllowDBNull = false
            Me.columnTipo.AllowDBNull = false
            Me.columnAplica.AllowDBNull = false
            Me.columnCod_Moneda.AllowDBNull = false
        End Sub
        
        Public Function NewDeduccionesRow() As DeduccionesRow
            Return CType(Me.NewRow,DeduccionesRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New DeduccionesRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(DeduccionesRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DeduccionesRowChangedEvent) Is Nothing) Then
                RaiseEvent DeduccionesRowChanged(Me, New DeduccionesRowChangeEvent(CType(e.Row,DeduccionesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DeduccionesRowChangingEvent) Is Nothing) Then
                RaiseEvent DeduccionesRowChanging(Me, New DeduccionesRowChangeEvent(CType(e.Row,DeduccionesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DeduccionesRowDeletedEvent) Is Nothing) Then
                RaiseEvent DeduccionesRowDeleted(Me, New DeduccionesRowChangeEvent(CType(e.Row,DeduccionesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DeduccionesRowDeletingEvent) Is Nothing) Then
                RaiseEvent DeduccionesRowDeleting(Me, New DeduccionesRowChangeEvent(CType(e.Row,DeduccionesRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveDeduccionesRow(ByVal row As DeduccionesRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DeduccionesRow
        Inherits DataRow
        
        Private tableDeducciones As DeduccionesDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableDeducciones = CType(Me.Table,DeduccionesDataTable)
        End Sub
        
        Public Property Codigo As Integer
            Get
                Return CType(Me(Me.tableDeducciones.CodigoColumn),Integer)
            End Get
            Set
                Me(Me.tableDeducciones.CodigoColumn) = value
            End Set
        End Property
        
        Public Property Descripcion As String
            Get
                Return CType(Me(Me.tableDeducciones.DescripcionColumn),String)
            End Get
            Set
                Me(Me.tableDeducciones.DescripcionColumn) = value
            End Set
        End Property
        
        Public Property Monto As Double
            Get
                Return CType(Me(Me.tableDeducciones.MontoColumn),Double)
            End Get
            Set
                Me(Me.tableDeducciones.MontoColumn) = value
            End Set
        End Property
        
        Public Property Tipo As String
            Get
                Return CType(Me(Me.tableDeducciones.TipoColumn),String)
            End Get
            Set
                Me(Me.tableDeducciones.TipoColumn) = value
            End Set
        End Property
        
        Public Property Aplica As Boolean
            Get
                Return CType(Me(Me.tableDeducciones.AplicaColumn),Boolean)
            End Get
            Set
                Me(Me.tableDeducciones.AplicaColumn) = value
            End Set
        End Property
        
        Public Property Cod_Moneda As Integer
            Get
                Return CType(Me(Me.tableDeducciones.Cod_MonedaColumn),Integer)
            End Get
            Set
                Me(Me.tableDeducciones.Cod_MonedaColumn) = value
            End Set
        End Property
        
        Public Property CuentaContable As String
            Get
                Try 
                    Return CType(Me(Me.tableDeducciones.CuentaContableColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDeducciones.CuentaContableColumn) = value
            End Set
        End Property
        
        Public Function IsCuentaContableNull() As Boolean
            Return Me.IsNull(Me.tableDeducciones.CuentaContableColumn)
        End Function
        
        Public Sub SetCuentaContableNull()
            Me(Me.tableDeducciones.CuentaContableColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DeduccionesRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As DeduccionesRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As DeduccionesRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As DeduccionesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
