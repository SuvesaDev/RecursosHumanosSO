'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2032
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DsUsuario
    Inherits DataSet
    
    Private tableUsuarios As UsuariosDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Usuarios")) Is Nothing) Then
                Me.Tables.Add(New UsuariosDataTable(ds.Tables("Usuarios")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Usuarios As UsuariosDataTable
        Get
            Return Me.tableUsuarios
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DsUsuario = CType(MyBase.Clone,DsUsuario)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("Usuarios")) Is Nothing) Then
            Me.Tables.Add(New UsuariosDataTable(ds.Tables("Usuarios")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableUsuarios = CType(Me.Tables("Usuarios"),UsuariosDataTable)
        If (Not (Me.tableUsuarios) Is Nothing) Then
            Me.tableUsuarios.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DsUsuario"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DsUsuario.xsd"
        Me.Locale = New System.Globalization.CultureInfo("es-MX")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableUsuarios = New UsuariosDataTable
        Me.Tables.Add(Me.tableUsuarios)
    End Sub
    
    Private Function ShouldSerializeUsuarios() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub UsuariosRowChangeEventHandler(ByVal sender As Object, ByVal e As UsuariosRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class UsuariosDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCedula As DataColumn
        
        Private columnNombre As DataColumn
        
        Private columnClave_Entrada As DataColumn
        
        Private columnClave_Interna As DataColumn
        
        Private columnPerfil As DataColumn
        
        Private columnAnu_Venta As DataColumn
        
        Private columnAnu_Cotizacion As DataColumn
        
        Private columnCambiarPrecio As DataColumn
        
        Private columnAplicar_Desc As DataColumn
        
        Private columnExist_Negativa As DataColumn
        
        Private columnRecibosDinero As DataColumn
        
        Private columnAnuRecibos As DataColumn
        
        Private columnVariarIntereses As DataColumn
        
        Private columnPorc_Desc As DataColumn
        
        Private columnPorc_Precio As DataColumn
        
        Private columnFoto As DataColumn
        
        Private columnAbrir_Credito As DataColumn
        
        Friend Sub New()
            MyBase.New("Usuarios")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property CedulaColumn As DataColumn
            Get
                Return Me.columnCedula
            End Get
        End Property
        
        Friend ReadOnly Property NombreColumn As DataColumn
            Get
                Return Me.columnNombre
            End Get
        End Property
        
        Friend ReadOnly Property Clave_EntradaColumn As DataColumn
            Get
                Return Me.columnClave_Entrada
            End Get
        End Property
        
        Friend ReadOnly Property Clave_InternaColumn As DataColumn
            Get
                Return Me.columnClave_Interna
            End Get
        End Property
        
        Friend ReadOnly Property PerfilColumn As DataColumn
            Get
                Return Me.columnPerfil
            End Get
        End Property
        
        Friend ReadOnly Property Anu_VentaColumn As DataColumn
            Get
                Return Me.columnAnu_Venta
            End Get
        End Property
        
        Friend ReadOnly Property Anu_CotizacionColumn As DataColumn
            Get
                Return Me.columnAnu_Cotizacion
            End Get
        End Property
        
        Friend ReadOnly Property CambiarPrecioColumn As DataColumn
            Get
                Return Me.columnCambiarPrecio
            End Get
        End Property
        
        Friend ReadOnly Property Aplicar_DescColumn As DataColumn
            Get
                Return Me.columnAplicar_Desc
            End Get
        End Property
        
        Friend ReadOnly Property Exist_NegativaColumn As DataColumn
            Get
                Return Me.columnExist_Negativa
            End Get
        End Property
        
        Friend ReadOnly Property RecibosDineroColumn As DataColumn
            Get
                Return Me.columnRecibosDinero
            End Get
        End Property
        
        Friend ReadOnly Property AnuRecibosColumn As DataColumn
            Get
                Return Me.columnAnuRecibos
            End Get
        End Property
        
        Friend ReadOnly Property VariarInteresesColumn As DataColumn
            Get
                Return Me.columnVariarIntereses
            End Get
        End Property
        
        Friend ReadOnly Property Porc_DescColumn As DataColumn
            Get
                Return Me.columnPorc_Desc
            End Get
        End Property
        
        Friend ReadOnly Property Porc_PrecioColumn As DataColumn
            Get
                Return Me.columnPorc_Precio
            End Get
        End Property
        
        Friend ReadOnly Property FotoColumn As DataColumn
            Get
                Return Me.columnFoto
            End Get
        End Property
        
        Friend ReadOnly Property Abrir_CreditoColumn As DataColumn
            Get
                Return Me.columnAbrir_Credito
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As UsuariosRow
            Get
                Return CType(Me.Rows(index),UsuariosRow)
            End Get
        End Property
        
        Public Event UsuariosRowChanged As UsuariosRowChangeEventHandler
        
        Public Event UsuariosRowChanging As UsuariosRowChangeEventHandler
        
        Public Event UsuariosRowDeleted As UsuariosRowChangeEventHandler
        
        Public Event UsuariosRowDeleting As UsuariosRowChangeEventHandler
        
        Public Overloads Sub AddUsuariosRow(ByVal row As UsuariosRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddUsuariosRow( _
                    ByVal Cedula As String,  _
                    ByVal Nombre As String,  _
                    ByVal Clave_Entrada As String,  _
                    ByVal Clave_Interna As String,  _
                    ByVal Perfil As String,  _
                    ByVal Anu_Venta As Boolean,  _
                    ByVal Anu_Cotizacion As Boolean,  _
                    ByVal CambiarPrecio As Boolean,  _
                    ByVal Aplicar_Desc As Boolean,  _
                    ByVal Exist_Negativa As Boolean,  _
                    ByVal RecibosDinero As Boolean,  _
                    ByVal AnuRecibos As Boolean,  _
                    ByVal VariarIntereses As Boolean,  _
                    ByVal Porc_Desc As Double,  _
                    ByVal Porc_Precio As Double,  _
                    ByVal Foto() As Byte,  _
                    ByVal Abrir_Credito As Boolean) As UsuariosRow
            Dim rowUsuariosRow As UsuariosRow = CType(Me.NewRow,UsuariosRow)
            rowUsuariosRow.ItemArray = New Object() {Cedula, Nombre, Clave_Entrada, Clave_Interna, Perfil, Anu_Venta, Anu_Cotizacion, CambiarPrecio, Aplicar_Desc, Exist_Negativa, RecibosDinero, AnuRecibos, VariarIntereses, Porc_Desc, Porc_Precio, Foto, Abrir_Credito}
            Me.Rows.Add(rowUsuariosRow)
            Return rowUsuariosRow
        End Function
        
        Public Function FindByCedula(ByVal Cedula As String) As UsuariosRow
            Return CType(Me.Rows.Find(New Object() {Cedula}),UsuariosRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As UsuariosDataTable = CType(MyBase.Clone,UsuariosDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New UsuariosDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCedula = Me.Columns("Cedula")
            Me.columnNombre = Me.Columns("Nombre")
            Me.columnClave_Entrada = Me.Columns("Clave_Entrada")
            Me.columnClave_Interna = Me.Columns("Clave_Interna")
            Me.columnPerfil = Me.Columns("Perfil")
            Me.columnAnu_Venta = Me.Columns("Anu_Venta")
            Me.columnAnu_Cotizacion = Me.Columns("Anu_Cotizacion")
            Me.columnCambiarPrecio = Me.Columns("CambiarPrecio")
            Me.columnAplicar_Desc = Me.Columns("Aplicar_Desc")
            Me.columnExist_Negativa = Me.Columns("Exist_Negativa")
            Me.columnRecibosDinero = Me.Columns("RecibosDinero")
            Me.columnAnuRecibos = Me.Columns("AnuRecibos")
            Me.columnVariarIntereses = Me.Columns("VariarIntereses")
            Me.columnPorc_Desc = Me.Columns("Porc_Desc")
            Me.columnPorc_Precio = Me.Columns("Porc_Precio")
            Me.columnFoto = Me.Columns("Foto")
            Me.columnAbrir_Credito = Me.Columns("Abrir_Credito")
        End Sub
        
        Private Sub InitClass()
            Me.columnCedula = New DataColumn("Cedula", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCedula)
            Me.columnNombre = New DataColumn("Nombre", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNombre)
            Me.columnClave_Entrada = New DataColumn("Clave_Entrada", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnClave_Entrada)
            Me.columnClave_Interna = New DataColumn("Clave_Interna", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnClave_Interna)
            Me.columnPerfil = New DataColumn("Perfil", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPerfil)
            Me.columnAnu_Venta = New DataColumn("Anu_Venta", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAnu_Venta)
            Me.columnAnu_Cotizacion = New DataColumn("Anu_Cotizacion", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAnu_Cotizacion)
            Me.columnCambiarPrecio = New DataColumn("CambiarPrecio", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCambiarPrecio)
            Me.columnAplicar_Desc = New DataColumn("Aplicar_Desc", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAplicar_Desc)
            Me.columnExist_Negativa = New DataColumn("Exist_Negativa", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnExist_Negativa)
            Me.columnRecibosDinero = New DataColumn("RecibosDinero", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRecibosDinero)
            Me.columnAnuRecibos = New DataColumn("AnuRecibos", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAnuRecibos)
            Me.columnVariarIntereses = New DataColumn("VariarIntereses", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVariarIntereses)
            Me.columnPorc_Desc = New DataColumn("Porc_Desc", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPorc_Desc)
            Me.columnPorc_Precio = New DataColumn("Porc_Precio", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPorc_Precio)
            Me.columnFoto = New DataColumn("Foto", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFoto)
            Me.columnAbrir_Credito = New DataColumn("Abrir_Credito", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAbrir_Credito)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnCedula}, true))
            Me.columnCedula.AllowDBNull = false
            Me.columnCedula.Unique = true
            Me.columnNombre.AllowDBNull = false
            Me.columnClave_Entrada.AllowDBNull = false
            Me.columnClave_Interna.AllowDBNull = false
            Me.columnPerfil.AllowDBNull = false
            Me.columnAnu_Venta.AllowDBNull = false
            Me.columnAnu_Cotizacion.AllowDBNull = false
            Me.columnCambiarPrecio.AllowDBNull = false
            Me.columnAplicar_Desc.AllowDBNull = false
            Me.columnExist_Negativa.AllowDBNull = false
            Me.columnRecibosDinero.AllowDBNull = false
            Me.columnAnuRecibos.AllowDBNull = false
            Me.columnVariarIntereses.AllowDBNull = false
            Me.columnPorc_Desc.AllowDBNull = false
            Me.columnPorc_Precio.AllowDBNull = false
            Me.columnAbrir_Credito.AllowDBNull = false
        End Sub
        
        Public Function NewUsuariosRow() As UsuariosRow
            Return CType(Me.NewRow,UsuariosRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New UsuariosRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(UsuariosRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.UsuariosRowChangedEvent) Is Nothing) Then
                RaiseEvent UsuariosRowChanged(Me, New UsuariosRowChangeEvent(CType(e.Row,UsuariosRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.UsuariosRowChangingEvent) Is Nothing) Then
                RaiseEvent UsuariosRowChanging(Me, New UsuariosRowChangeEvent(CType(e.Row,UsuariosRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.UsuariosRowDeletedEvent) Is Nothing) Then
                RaiseEvent UsuariosRowDeleted(Me, New UsuariosRowChangeEvent(CType(e.Row,UsuariosRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.UsuariosRowDeletingEvent) Is Nothing) Then
                RaiseEvent UsuariosRowDeleting(Me, New UsuariosRowChangeEvent(CType(e.Row,UsuariosRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveUsuariosRow(ByVal row As UsuariosRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class UsuariosRow
        Inherits DataRow
        
        Private tableUsuarios As UsuariosDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableUsuarios = CType(Me.Table,UsuariosDataTable)
        End Sub
        
        Public Property Cedula As String
            Get
                Return CType(Me(Me.tableUsuarios.CedulaColumn),String)
            End Get
            Set
                Me(Me.tableUsuarios.CedulaColumn) = value
            End Set
        End Property
        
        Public Property Nombre As String
            Get
                Return CType(Me(Me.tableUsuarios.NombreColumn),String)
            End Get
            Set
                Me(Me.tableUsuarios.NombreColumn) = value
            End Set
        End Property
        
        Public Property Clave_Entrada As String
            Get
                Return CType(Me(Me.tableUsuarios.Clave_EntradaColumn),String)
            End Get
            Set
                Me(Me.tableUsuarios.Clave_EntradaColumn) = value
            End Set
        End Property
        
        Public Property Clave_Interna As String
            Get
                Return CType(Me(Me.tableUsuarios.Clave_InternaColumn),String)
            End Get
            Set
                Me(Me.tableUsuarios.Clave_InternaColumn) = value
            End Set
        End Property
        
        Public Property Perfil As String
            Get
                Return CType(Me(Me.tableUsuarios.PerfilColumn),String)
            End Get
            Set
                Me(Me.tableUsuarios.PerfilColumn) = value
            End Set
        End Property
        
        Public Property Anu_Venta As Boolean
            Get
                Return CType(Me(Me.tableUsuarios.Anu_VentaColumn),Boolean)
            End Get
            Set
                Me(Me.tableUsuarios.Anu_VentaColumn) = value
            End Set
        End Property
        
        Public Property Anu_Cotizacion As Boolean
            Get
                Return CType(Me(Me.tableUsuarios.Anu_CotizacionColumn),Boolean)
            End Get
            Set
                Me(Me.tableUsuarios.Anu_CotizacionColumn) = value
            End Set
        End Property
        
        Public Property CambiarPrecio As Boolean
            Get
                Return CType(Me(Me.tableUsuarios.CambiarPrecioColumn),Boolean)
            End Get
            Set
                Me(Me.tableUsuarios.CambiarPrecioColumn) = value
            End Set
        End Property
        
        Public Property Aplicar_Desc As Boolean
            Get
                Return CType(Me(Me.tableUsuarios.Aplicar_DescColumn),Boolean)
            End Get
            Set
                Me(Me.tableUsuarios.Aplicar_DescColumn) = value
            End Set
        End Property
        
        Public Property Exist_Negativa As Boolean
            Get
                Return CType(Me(Me.tableUsuarios.Exist_NegativaColumn),Boolean)
            End Get
            Set
                Me(Me.tableUsuarios.Exist_NegativaColumn) = value
            End Set
        End Property
        
        Public Property RecibosDinero As Boolean
            Get
                Return CType(Me(Me.tableUsuarios.RecibosDineroColumn),Boolean)
            End Get
            Set
                Me(Me.tableUsuarios.RecibosDineroColumn) = value
            End Set
        End Property
        
        Public Property AnuRecibos As Boolean
            Get
                Return CType(Me(Me.tableUsuarios.AnuRecibosColumn),Boolean)
            End Get
            Set
                Me(Me.tableUsuarios.AnuRecibosColumn) = value
            End Set
        End Property
        
        Public Property VariarIntereses As Boolean
            Get
                Return CType(Me(Me.tableUsuarios.VariarInteresesColumn),Boolean)
            End Get
            Set
                Me(Me.tableUsuarios.VariarInteresesColumn) = value
            End Set
        End Property
        
        Public Property Porc_Desc As Double
            Get
                Return CType(Me(Me.tableUsuarios.Porc_DescColumn),Double)
            End Get
            Set
                Me(Me.tableUsuarios.Porc_DescColumn) = value
            End Set
        End Property
        
        Public Property Porc_Precio As Double
            Get
                Return CType(Me(Me.tableUsuarios.Porc_PrecioColumn),Double)
            End Get
            Set
                Me(Me.tableUsuarios.Porc_PrecioColumn) = value
            End Set
        End Property
        
        Public Property Foto As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableUsuarios.FotoColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUsuarios.FotoColumn) = value
            End Set
        End Property
        
        Public Property Abrir_Credito As Boolean
            Get
                Return CType(Me(Me.tableUsuarios.Abrir_CreditoColumn),Boolean)
            End Get
            Set
                Me(Me.tableUsuarios.Abrir_CreditoColumn) = value
            End Set
        End Property
        
        Public Function IsFotoNull() As Boolean
            Return Me.IsNull(Me.tableUsuarios.FotoColumn)
        End Function
        
        Public Sub SetFotoNull()
            Me(Me.tableUsuarios.FotoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class UsuariosRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As UsuariosRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As UsuariosRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As UsuariosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
