'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2032
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DsConfiguracion
    Inherits DataSet
    
    Private tableconfiguraciones As configuracionesDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("configuraciones")) Is Nothing) Then
                Me.Tables.Add(New configuracionesDataTable(ds.Tables("configuraciones")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property configuraciones As configuracionesDataTable
        Get
            Return Me.tableconfiguraciones
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DsConfiguracion = CType(MyBase.Clone,DsConfiguracion)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("configuraciones")) Is Nothing) Then
            Me.Tables.Add(New configuracionesDataTable(ds.Tables("configuraciones")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableconfiguraciones = CType(Me.Tables("configuraciones"),configuracionesDataTable)
        If (Not (Me.tableconfiguraciones) Is Nothing) Then
            Me.tableconfiguraciones.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DsConfiguracion"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DsConfiguracion.xsd"
        Me.Locale = New System.Globalization.CultureInfo("es-CR")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableconfiguraciones = New configuracionesDataTable
        Me.Tables.Add(Me.tableconfiguraciones)
    End Sub
    
    Private Function ShouldSerializeconfiguraciones() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub configuracionesRowChangeEventHandler(ByVal sender As Object, ByVal e As configuracionesRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class configuracionesDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCedula As DataColumn
        
        Private columnEmpresa As DataColumn
        
        Private columnTel_01 As DataColumn
        
        Private columnTel_02 As DataColumn
        
        Private columnFax_01 As DataColumn
        
        Private columnFax_02 As DataColumn
        
        Private columnDireccion As DataColumn
        
        Private columnImp_Venta As DataColumn
        
        Private columnFrase As DataColumn
        
        Private columnImp_Servicio As DataColumn
        
        Private columnLogo As DataColumn
        
        Private columnIntereses As DataColumn
        
        Private columnImp_ICT As DataColumn
        
        Private columnTotal_Dias_Cancelar As DataColumn
        
        Private columnEmail As DataColumn
        
        Private columnDirrecion_Web As DataColumn
        
        Private columnComision_Habitaciones As DataColumn
        
        Private columnComision_Servicio As DataColumn
        
        Private columnComision_Restaurant As DataColumn
        
        Private columnCuenta_Bancaria1 As DataColumn
        
        Private columnCuenta_Bancaria2 As DataColumn
        
        Private columnImpresora_Facturacion As DataColumn
        
        Private columnMaximo_Descuento As DataColumn
        
        Private columnPersonaJuridica As DataColumn
        
        Private columnCantidadHabitaciones As DataColumn
        
        Friend Sub New()
            MyBase.New("configuraciones")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property CedulaColumn As DataColumn
            Get
                Return Me.columnCedula
            End Get
        End Property
        
        Friend ReadOnly Property EmpresaColumn As DataColumn
            Get
                Return Me.columnEmpresa
            End Get
        End Property
        
        Friend ReadOnly Property Tel_01Column As DataColumn
            Get
                Return Me.columnTel_01
            End Get
        End Property
        
        Friend ReadOnly Property Tel_02Column As DataColumn
            Get
                Return Me.columnTel_02
            End Get
        End Property
        
        Friend ReadOnly Property Fax_01Column As DataColumn
            Get
                Return Me.columnFax_01
            End Get
        End Property
        
        Friend ReadOnly Property Fax_02Column As DataColumn
            Get
                Return Me.columnFax_02
            End Get
        End Property
        
        Friend ReadOnly Property DireccionColumn As DataColumn
            Get
                Return Me.columnDireccion
            End Get
        End Property
        
        Friend ReadOnly Property Imp_VentaColumn As DataColumn
            Get
                Return Me.columnImp_Venta
            End Get
        End Property
        
        Friend ReadOnly Property FraseColumn As DataColumn
            Get
                Return Me.columnFrase
            End Get
        End Property
        
        Friend ReadOnly Property Imp_ServicioColumn As DataColumn
            Get
                Return Me.columnImp_Servicio
            End Get
        End Property
        
        Friend ReadOnly Property LogoColumn As DataColumn
            Get
                Return Me.columnLogo
            End Get
        End Property
        
        Friend ReadOnly Property InteresesColumn As DataColumn
            Get
                Return Me.columnIntereses
            End Get
        End Property
        
        Friend ReadOnly Property Imp_ICTColumn As DataColumn
            Get
                Return Me.columnImp_ICT
            End Get
        End Property
        
        Friend ReadOnly Property Total_Dias_CancelarColumn As DataColumn
            Get
                Return Me.columnTotal_Dias_Cancelar
            End Get
        End Property
        
        Friend ReadOnly Property EmailColumn As DataColumn
            Get
                Return Me.columnEmail
            End Get
        End Property
        
        Friend ReadOnly Property Dirrecion_WebColumn As DataColumn
            Get
                Return Me.columnDirrecion_Web
            End Get
        End Property
        
        Friend ReadOnly Property Comision_HabitacionesColumn As DataColumn
            Get
                Return Me.columnComision_Habitaciones
            End Get
        End Property
        
        Friend ReadOnly Property Comision_ServicioColumn As DataColumn
            Get
                Return Me.columnComision_Servicio
            End Get
        End Property
        
        Friend ReadOnly Property Comision_RestaurantColumn As DataColumn
            Get
                Return Me.columnComision_Restaurant
            End Get
        End Property
        
        Friend ReadOnly Property Cuenta_Bancaria1Column As DataColumn
            Get
                Return Me.columnCuenta_Bancaria1
            End Get
        End Property
        
        Friend ReadOnly Property Cuenta_Bancaria2Column As DataColumn
            Get
                Return Me.columnCuenta_Bancaria2
            End Get
        End Property
        
        Friend ReadOnly Property Impresora_FacturacionColumn As DataColumn
            Get
                Return Me.columnImpresora_Facturacion
            End Get
        End Property
        
        Friend ReadOnly Property Maximo_DescuentoColumn As DataColumn
            Get
                Return Me.columnMaximo_Descuento
            End Get
        End Property
        
        Friend ReadOnly Property PersonaJuridicaColumn As DataColumn
            Get
                Return Me.columnPersonaJuridica
            End Get
        End Property
        
        Friend ReadOnly Property CantidadHabitacionesColumn As DataColumn
            Get
                Return Me.columnCantidadHabitaciones
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As configuracionesRow
            Get
                Return CType(Me.Rows(index),configuracionesRow)
            End Get
        End Property
        
        Public Event configuracionesRowChanged As configuracionesRowChangeEventHandler
        
        Public Event configuracionesRowChanging As configuracionesRowChangeEventHandler
        
        Public Event configuracionesRowDeleted As configuracionesRowChangeEventHandler
        
        Public Event configuracionesRowDeleting As configuracionesRowChangeEventHandler
        
        Public Overloads Sub AddconfiguracionesRow(ByVal row As configuracionesRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddconfiguracionesRow( _
                    ByVal Cedula As String,  _
                    ByVal Empresa As String,  _
                    ByVal Tel_01 As String,  _
                    ByVal Tel_02 As String,  _
                    ByVal Fax_01 As String,  _
                    ByVal Fax_02 As String,  _
                    ByVal Direccion As String,  _
                    ByVal Imp_Venta As Double,  _
                    ByVal Frase As String,  _
                    ByVal Imp_Servicio As Double,  _
                    ByVal Logo() As Byte,  _
                    ByVal Intereses As Integer,  _
                    ByVal Imp_ICT As Double,  _
                    ByVal Total_Dias_Cancelar As Integer,  _
                    ByVal Email As String,  _
                    ByVal Dirrecion_Web As String,  _
                    ByVal Comision_Habitaciones As Boolean,  _
                    ByVal Comision_Servicio As Boolean,  _
                    ByVal Comision_Restaurant As Boolean,  _
                    ByVal Cuenta_Bancaria1 As String,  _
                    ByVal Cuenta_Bancaria2 As String,  _
                    ByVal Impresora_Facturacion As String,  _
                    ByVal Maximo_Descuento As Double,  _
                    ByVal PersonaJuridica As String,  _
                    ByVal CantidadHabitaciones As Integer) As configuracionesRow
            Dim rowconfiguracionesRow As configuracionesRow = CType(Me.NewRow,configuracionesRow)
            rowconfiguracionesRow.ItemArray = New Object() {Cedula, Empresa, Tel_01, Tel_02, Fax_01, Fax_02, Direccion, Imp_Venta, Frase, Imp_Servicio, Logo, Intereses, Imp_ICT, Total_Dias_Cancelar, Email, Dirrecion_Web, Comision_Habitaciones, Comision_Servicio, Comision_Restaurant, Cuenta_Bancaria1, Cuenta_Bancaria2, Impresora_Facturacion, Maximo_Descuento, PersonaJuridica, CantidadHabitaciones}
            Me.Rows.Add(rowconfiguracionesRow)
            Return rowconfiguracionesRow
        End Function
        
        Public Function FindByCedula(ByVal Cedula As String) As configuracionesRow
            Return CType(Me.Rows.Find(New Object() {Cedula}),configuracionesRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As configuracionesDataTable = CType(MyBase.Clone,configuracionesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New configuracionesDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCedula = Me.Columns("Cedula")
            Me.columnEmpresa = Me.Columns("Empresa")
            Me.columnTel_01 = Me.Columns("Tel_01")
            Me.columnTel_02 = Me.Columns("Tel_02")
            Me.columnFax_01 = Me.Columns("Fax_01")
            Me.columnFax_02 = Me.Columns("Fax_02")
            Me.columnDireccion = Me.Columns("Direccion")
            Me.columnImp_Venta = Me.Columns("Imp_Venta")
            Me.columnFrase = Me.Columns("Frase")
            Me.columnImp_Servicio = Me.Columns("Imp_Servicio")
            Me.columnLogo = Me.Columns("Logo")
            Me.columnIntereses = Me.Columns("Intereses")
            Me.columnImp_ICT = Me.Columns("Imp_ICT")
            Me.columnTotal_Dias_Cancelar = Me.Columns("Total_Dias_Cancelar")
            Me.columnEmail = Me.Columns("Email")
            Me.columnDirrecion_Web = Me.Columns("Dirrecion_Web")
            Me.columnComision_Habitaciones = Me.Columns("Comision_Habitaciones")
            Me.columnComision_Servicio = Me.Columns("Comision_Servicio")
            Me.columnComision_Restaurant = Me.Columns("Comision_Restaurant")
            Me.columnCuenta_Bancaria1 = Me.Columns("Cuenta_Bancaria1")
            Me.columnCuenta_Bancaria2 = Me.Columns("Cuenta_Bancaria2")
            Me.columnImpresora_Facturacion = Me.Columns("Impresora_Facturacion")
            Me.columnMaximo_Descuento = Me.Columns("Maximo_Descuento")
            Me.columnPersonaJuridica = Me.Columns("PersonaJuridica")
            Me.columnCantidadHabitaciones = Me.Columns("CantidadHabitaciones")
        End Sub
        
        Private Sub InitClass()
            Me.columnCedula = New DataColumn("Cedula", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCedula)
            Me.columnEmpresa = New DataColumn("Empresa", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEmpresa)
            Me.columnTel_01 = New DataColumn("Tel_01", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTel_01)
            Me.columnTel_02 = New DataColumn("Tel_02", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTel_02)
            Me.columnFax_01 = New DataColumn("Fax_01", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFax_01)
            Me.columnFax_02 = New DataColumn("Fax_02", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFax_02)
            Me.columnDireccion = New DataColumn("Direccion", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDireccion)
            Me.columnImp_Venta = New DataColumn("Imp_Venta", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnImp_Venta)
            Me.columnFrase = New DataColumn("Frase", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFrase)
            Me.columnImp_Servicio = New DataColumn("Imp_Servicio", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnImp_Servicio)
            Me.columnLogo = New DataColumn("Logo", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLogo)
            Me.columnIntereses = New DataColumn("Intereses", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIntereses)
            Me.columnImp_ICT = New DataColumn("Imp_ICT", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnImp_ICT)
            Me.columnTotal_Dias_Cancelar = New DataColumn("Total_Dias_Cancelar", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTotal_Dias_Cancelar)
            Me.columnEmail = New DataColumn("Email", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEmail)
            Me.columnDirrecion_Web = New DataColumn("Dirrecion_Web", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDirrecion_Web)
            Me.columnComision_Habitaciones = New DataColumn("Comision_Habitaciones", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnComision_Habitaciones)
            Me.columnComision_Servicio = New DataColumn("Comision_Servicio", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnComision_Servicio)
            Me.columnComision_Restaurant = New DataColumn("Comision_Restaurant", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnComision_Restaurant)
            Me.columnCuenta_Bancaria1 = New DataColumn("Cuenta_Bancaria1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCuenta_Bancaria1)
            Me.columnCuenta_Bancaria2 = New DataColumn("Cuenta_Bancaria2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCuenta_Bancaria2)
            Me.columnImpresora_Facturacion = New DataColumn("Impresora_Facturacion", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnImpresora_Facturacion)
            Me.columnMaximo_Descuento = New DataColumn("Maximo_Descuento", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMaximo_Descuento)
            Me.columnPersonaJuridica = New DataColumn("PersonaJuridica", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPersonaJuridica)
            Me.columnCantidadHabitaciones = New DataColumn("CantidadHabitaciones", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCantidadHabitaciones)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnCedula}, true))
            Me.columnCedula.AllowDBNull = false
            Me.columnCedula.Unique = true
            Me.columnEmpresa.AllowDBNull = false
            Me.columnTel_01.AllowDBNull = false
            Me.columnDireccion.AllowDBNull = false
            Me.columnImp_Venta.AllowDBNull = false
            Me.columnImp_Servicio.AllowDBNull = false
            Me.columnIntereses.AllowDBNull = false
            Me.columnTotal_Dias_Cancelar.AllowDBNull = false
            Me.columnComision_Habitaciones.AllowDBNull = false
            Me.columnComision_Servicio.AllowDBNull = false
            Me.columnComision_Restaurant.AllowDBNull = false
            Me.columnCantidadHabitaciones.AllowDBNull = false
        End Sub
        
        Public Function NewconfiguracionesRow() As configuracionesRow
            Return CType(Me.NewRow,configuracionesRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New configuracionesRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(configuracionesRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.configuracionesRowChangedEvent) Is Nothing) Then
                RaiseEvent configuracionesRowChanged(Me, New configuracionesRowChangeEvent(CType(e.Row,configuracionesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.configuracionesRowChangingEvent) Is Nothing) Then
                RaiseEvent configuracionesRowChanging(Me, New configuracionesRowChangeEvent(CType(e.Row,configuracionesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.configuracionesRowDeletedEvent) Is Nothing) Then
                RaiseEvent configuracionesRowDeleted(Me, New configuracionesRowChangeEvent(CType(e.Row,configuracionesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.configuracionesRowDeletingEvent) Is Nothing) Then
                RaiseEvent configuracionesRowDeleting(Me, New configuracionesRowChangeEvent(CType(e.Row,configuracionesRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveconfiguracionesRow(ByVal row As configuracionesRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class configuracionesRow
        Inherits DataRow
        
        Private tableconfiguraciones As configuracionesDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableconfiguraciones = CType(Me.Table,configuracionesDataTable)
        End Sub
        
        Public Property Cedula As String
            Get
                Return CType(Me(Me.tableconfiguraciones.CedulaColumn),String)
            End Get
            Set
                Me(Me.tableconfiguraciones.CedulaColumn) = value
            End Set
        End Property
        
        Public Property Empresa As String
            Get
                Return CType(Me(Me.tableconfiguraciones.EmpresaColumn),String)
            End Get
            Set
                Me(Me.tableconfiguraciones.EmpresaColumn) = value
            End Set
        End Property
        
        Public Property Tel_01 As String
            Get
                Return CType(Me(Me.tableconfiguraciones.Tel_01Column),String)
            End Get
            Set
                Me(Me.tableconfiguraciones.Tel_01Column) = value
            End Set
        End Property
        
        Public Property Tel_02 As String
            Get
                Try 
                    Return CType(Me(Me.tableconfiguraciones.Tel_02Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableconfiguraciones.Tel_02Column) = value
            End Set
        End Property
        
        Public Property Fax_01 As String
            Get
                Try 
                    Return CType(Me(Me.tableconfiguraciones.Fax_01Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableconfiguraciones.Fax_01Column) = value
            End Set
        End Property
        
        Public Property Fax_02 As String
            Get
                Try 
                    Return CType(Me(Me.tableconfiguraciones.Fax_02Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableconfiguraciones.Fax_02Column) = value
            End Set
        End Property
        
        Public Property Direccion As String
            Get
                Return CType(Me(Me.tableconfiguraciones.DireccionColumn),String)
            End Get
            Set
                Me(Me.tableconfiguraciones.DireccionColumn) = value
            End Set
        End Property
        
        Public Property Imp_Venta As Double
            Get
                Return CType(Me(Me.tableconfiguraciones.Imp_VentaColumn),Double)
            End Get
            Set
                Me(Me.tableconfiguraciones.Imp_VentaColumn) = value
            End Set
        End Property
        
        Public Property Frase As String
            Get
                Try 
                    Return CType(Me(Me.tableconfiguraciones.FraseColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableconfiguraciones.FraseColumn) = value
            End Set
        End Property
        
        Public Property Imp_Servicio As Double
            Get
                Return CType(Me(Me.tableconfiguraciones.Imp_ServicioColumn),Double)
            End Get
            Set
                Me(Me.tableconfiguraciones.Imp_ServicioColumn) = value
            End Set
        End Property
        
        Public Property Logo As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableconfiguraciones.LogoColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableconfiguraciones.LogoColumn) = value
            End Set
        End Property
        
        Public Property Intereses As Integer
            Get
                Return CType(Me(Me.tableconfiguraciones.InteresesColumn),Integer)
            End Get
            Set
                Me(Me.tableconfiguraciones.InteresesColumn) = value
            End Set
        End Property
        
        Public Property Imp_ICT As Double
            Get
                Try 
                    Return CType(Me(Me.tableconfiguraciones.Imp_ICTColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableconfiguraciones.Imp_ICTColumn) = value
            End Set
        End Property
        
        Public Property Total_Dias_Cancelar As Integer
            Get
                Return CType(Me(Me.tableconfiguraciones.Total_Dias_CancelarColumn),Integer)
            End Get
            Set
                Me(Me.tableconfiguraciones.Total_Dias_CancelarColumn) = value
            End Set
        End Property
        
        Public Property Email As String
            Get
                Try 
                    Return CType(Me(Me.tableconfiguraciones.EmailColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableconfiguraciones.EmailColumn) = value
            End Set
        End Property
        
        Public Property Dirrecion_Web As String
            Get
                Try 
                    Return CType(Me(Me.tableconfiguraciones.Dirrecion_WebColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableconfiguraciones.Dirrecion_WebColumn) = value
            End Set
        End Property
        
        Public Property Comision_Habitaciones As Boolean
            Get
                Return CType(Me(Me.tableconfiguraciones.Comision_HabitacionesColumn),Boolean)
            End Get
            Set
                Me(Me.tableconfiguraciones.Comision_HabitacionesColumn) = value
            End Set
        End Property
        
        Public Property Comision_Servicio As Boolean
            Get
                Return CType(Me(Me.tableconfiguraciones.Comision_ServicioColumn),Boolean)
            End Get
            Set
                Me(Me.tableconfiguraciones.Comision_ServicioColumn) = value
            End Set
        End Property
        
        Public Property Comision_Restaurant As Boolean
            Get
                Return CType(Me(Me.tableconfiguraciones.Comision_RestaurantColumn),Boolean)
            End Get
            Set
                Me(Me.tableconfiguraciones.Comision_RestaurantColumn) = value
            End Set
        End Property
        
        Public Property Cuenta_Bancaria1 As String
            Get
                Try 
                    Return CType(Me(Me.tableconfiguraciones.Cuenta_Bancaria1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableconfiguraciones.Cuenta_Bancaria1Column) = value
            End Set
        End Property
        
        Public Property Cuenta_Bancaria2 As String
            Get
                Try 
                    Return CType(Me(Me.tableconfiguraciones.Cuenta_Bancaria2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableconfiguraciones.Cuenta_Bancaria2Column) = value
            End Set
        End Property
        
        Public Property Impresora_Facturacion As String
            Get
                Try 
                    Return CType(Me(Me.tableconfiguraciones.Impresora_FacturacionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableconfiguraciones.Impresora_FacturacionColumn) = value
            End Set
        End Property
        
        Public Property Maximo_Descuento As Double
            Get
                Try 
                    Return CType(Me(Me.tableconfiguraciones.Maximo_DescuentoColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableconfiguraciones.Maximo_DescuentoColumn) = value
            End Set
        End Property
        
        Public Property PersonaJuridica As String
            Get
                Try 
                    Return CType(Me(Me.tableconfiguraciones.PersonaJuridicaColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableconfiguraciones.PersonaJuridicaColumn) = value
            End Set
        End Property
        
        Public Property CantidadHabitaciones As Integer
            Get
                Return CType(Me(Me.tableconfiguraciones.CantidadHabitacionesColumn),Integer)
            End Get
            Set
                Me(Me.tableconfiguraciones.CantidadHabitacionesColumn) = value
            End Set
        End Property
        
        Public Function IsTel_02Null() As Boolean
            Return Me.IsNull(Me.tableconfiguraciones.Tel_02Column)
        End Function
        
        Public Sub SetTel_02Null()
            Me(Me.tableconfiguraciones.Tel_02Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsFax_01Null() As Boolean
            Return Me.IsNull(Me.tableconfiguraciones.Fax_01Column)
        End Function
        
        Public Sub SetFax_01Null()
            Me(Me.tableconfiguraciones.Fax_01Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsFax_02Null() As Boolean
            Return Me.IsNull(Me.tableconfiguraciones.Fax_02Column)
        End Function
        
        Public Sub SetFax_02Null()
            Me(Me.tableconfiguraciones.Fax_02Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsFraseNull() As Boolean
            Return Me.IsNull(Me.tableconfiguraciones.FraseColumn)
        End Function
        
        Public Sub SetFraseNull()
            Me(Me.tableconfiguraciones.FraseColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLogoNull() As Boolean
            Return Me.IsNull(Me.tableconfiguraciones.LogoColumn)
        End Function
        
        Public Sub SetLogoNull()
            Me(Me.tableconfiguraciones.LogoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsImp_ICTNull() As Boolean
            Return Me.IsNull(Me.tableconfiguraciones.Imp_ICTColumn)
        End Function
        
        Public Sub SetImp_ICTNull()
            Me(Me.tableconfiguraciones.Imp_ICTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEmailNull() As Boolean
            Return Me.IsNull(Me.tableconfiguraciones.EmailColumn)
        End Function
        
        Public Sub SetEmailNull()
            Me(Me.tableconfiguraciones.EmailColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDirrecion_WebNull() As Boolean
            Return Me.IsNull(Me.tableconfiguraciones.Dirrecion_WebColumn)
        End Function
        
        Public Sub SetDirrecion_WebNull()
            Me(Me.tableconfiguraciones.Dirrecion_WebColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCuenta_Bancaria1Null() As Boolean
            Return Me.IsNull(Me.tableconfiguraciones.Cuenta_Bancaria1Column)
        End Function
        
        Public Sub SetCuenta_Bancaria1Null()
            Me(Me.tableconfiguraciones.Cuenta_Bancaria1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsCuenta_Bancaria2Null() As Boolean
            Return Me.IsNull(Me.tableconfiguraciones.Cuenta_Bancaria2Column)
        End Function
        
        Public Sub SetCuenta_Bancaria2Null()
            Me(Me.tableconfiguraciones.Cuenta_Bancaria2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsImpresora_FacturacionNull() As Boolean
            Return Me.IsNull(Me.tableconfiguraciones.Impresora_FacturacionColumn)
        End Function
        
        Public Sub SetImpresora_FacturacionNull()
            Me(Me.tableconfiguraciones.Impresora_FacturacionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMaximo_DescuentoNull() As Boolean
            Return Me.IsNull(Me.tableconfiguraciones.Maximo_DescuentoColumn)
        End Function
        
        Public Sub SetMaximo_DescuentoNull()
            Me(Me.tableconfiguraciones.Maximo_DescuentoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPersonaJuridicaNull() As Boolean
            Return Me.IsNull(Me.tableconfiguraciones.PersonaJuridicaColumn)
        End Function
        
        Public Sub SetPersonaJuridicaNull()
            Me(Me.tableconfiguraciones.PersonaJuridicaColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class configuracionesRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As configuracionesRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As configuracionesRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As configuracionesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
