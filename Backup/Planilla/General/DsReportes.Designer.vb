'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.8935
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("DsReportes"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class DsReportes
    Inherits Global.System.Data.DataSet
    
    Private tableAdelantos As AdelantosDataTable
    
    Private tableDeducciones As DeduccionesDataTable
    
    Private tableEmpleado As EmpleadoDataTable
    
    Private tableEmpleado_Deducciones As Empleado_DeduccionesDataTable
    
    Private tableHorasTrabajadas As HorasTrabajadasDataTable
    
    Private tableParametroRenta As ParametroRentaDataTable
    
    Private tablePlanilla As PlanillaDataTable
    
    Private tablePlanilla_Deducciones As Planilla_DeduccionesDataTable
    
    Private tablePlanilla_Detalle As Planilla_DetalleDataTable
    
    Private tableAccion As AccionDataTable
    
    Private tableMoneda As MonedaDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Adelantos")) Is Nothing) Then
                MyBase.Tables.Add(New AdelantosDataTable(ds.Tables("Adelantos")))
            End If
            If (Not (ds.Tables("Deducciones")) Is Nothing) Then
                MyBase.Tables.Add(New DeduccionesDataTable(ds.Tables("Deducciones")))
            End If
            If (Not (ds.Tables("Empleado")) Is Nothing) Then
                MyBase.Tables.Add(New EmpleadoDataTable(ds.Tables("Empleado")))
            End If
            If (Not (ds.Tables("Empleado_Deducciones")) Is Nothing) Then
                MyBase.Tables.Add(New Empleado_DeduccionesDataTable(ds.Tables("Empleado_Deducciones")))
            End If
            If (Not (ds.Tables("HorasTrabajadas")) Is Nothing) Then
                MyBase.Tables.Add(New HorasTrabajadasDataTable(ds.Tables("HorasTrabajadas")))
            End If
            If (Not (ds.Tables("ParametroRenta")) Is Nothing) Then
                MyBase.Tables.Add(New ParametroRentaDataTable(ds.Tables("ParametroRenta")))
            End If
            If (Not (ds.Tables("Planilla")) Is Nothing) Then
                MyBase.Tables.Add(New PlanillaDataTable(ds.Tables("Planilla")))
            End If
            If (Not (ds.Tables("Planilla_Deducciones")) Is Nothing) Then
                MyBase.Tables.Add(New Planilla_DeduccionesDataTable(ds.Tables("Planilla_Deducciones")))
            End If
            If (Not (ds.Tables("Planilla_Detalle")) Is Nothing) Then
                MyBase.Tables.Add(New Planilla_DetalleDataTable(ds.Tables("Planilla_Detalle")))
            End If
            If (Not (ds.Tables("Accion")) Is Nothing) Then
                MyBase.Tables.Add(New AccionDataTable(ds.Tables("Accion")))
            End If
            If (Not (ds.Tables("Moneda")) Is Nothing) Then
                MyBase.Tables.Add(New MonedaDataTable(ds.Tables("Moneda")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Adelantos() As AdelantosDataTable
        Get
            Return Me.tableAdelantos
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Deducciones() As DeduccionesDataTable
        Get
            Return Me.tableDeducciones
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Empleado() As EmpleadoDataTable
        Get
            Return Me.tableEmpleado
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Empleado_Deducciones() As Empleado_DeduccionesDataTable
        Get
            Return Me.tableEmpleado_Deducciones
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property HorasTrabajadas() As HorasTrabajadasDataTable
        Get
            Return Me.tableHorasTrabajadas
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ParametroRenta() As ParametroRentaDataTable
        Get
            Return Me.tableParametroRenta
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Planilla() As PlanillaDataTable
        Get
            Return Me.tablePlanilla
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Planilla_Deducciones() As Planilla_DeduccionesDataTable
        Get
            Return Me.tablePlanilla_Deducciones
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Planilla_Detalle() As Planilla_DetalleDataTable
        Get
            Return Me.tablePlanilla_Detalle
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Accion() As AccionDataTable
        Get
            Return Me.tableAccion
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Moneda() As MonedaDataTable
        Get
            Return Me.tableMoneda
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As DsReportes = CType(MyBase.Clone,DsReportes)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("Adelantos")) Is Nothing) Then
                MyBase.Tables.Add(New AdelantosDataTable(ds.Tables("Adelantos")))
            End If
            If (Not (ds.Tables("Deducciones")) Is Nothing) Then
                MyBase.Tables.Add(New DeduccionesDataTable(ds.Tables("Deducciones")))
            End If
            If (Not (ds.Tables("Empleado")) Is Nothing) Then
                MyBase.Tables.Add(New EmpleadoDataTable(ds.Tables("Empleado")))
            End If
            If (Not (ds.Tables("Empleado_Deducciones")) Is Nothing) Then
                MyBase.Tables.Add(New Empleado_DeduccionesDataTable(ds.Tables("Empleado_Deducciones")))
            End If
            If (Not (ds.Tables("HorasTrabajadas")) Is Nothing) Then
                MyBase.Tables.Add(New HorasTrabajadasDataTable(ds.Tables("HorasTrabajadas")))
            End If
            If (Not (ds.Tables("ParametroRenta")) Is Nothing) Then
                MyBase.Tables.Add(New ParametroRentaDataTable(ds.Tables("ParametroRenta")))
            End If
            If (Not (ds.Tables("Planilla")) Is Nothing) Then
                MyBase.Tables.Add(New PlanillaDataTable(ds.Tables("Planilla")))
            End If
            If (Not (ds.Tables("Planilla_Deducciones")) Is Nothing) Then
                MyBase.Tables.Add(New Planilla_DeduccionesDataTable(ds.Tables("Planilla_Deducciones")))
            End If
            If (Not (ds.Tables("Planilla_Detalle")) Is Nothing) Then
                MyBase.Tables.Add(New Planilla_DetalleDataTable(ds.Tables("Planilla_Detalle")))
            End If
            If (Not (ds.Tables("Accion")) Is Nothing) Then
                MyBase.Tables.Add(New AccionDataTable(ds.Tables("Accion")))
            End If
            If (Not (ds.Tables("Moneda")) Is Nothing) Then
                MyBase.Tables.Add(New MonedaDataTable(ds.Tables("Moneda")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableAdelantos = CType(MyBase.Tables("Adelantos"),AdelantosDataTable)
        If (initTable = true) Then
            If (Not (Me.tableAdelantos) Is Nothing) Then
                Me.tableAdelantos.InitVars
            End If
        End If
        Me.tableDeducciones = CType(MyBase.Tables("Deducciones"),DeduccionesDataTable)
        If (initTable = true) Then
            If (Not (Me.tableDeducciones) Is Nothing) Then
                Me.tableDeducciones.InitVars
            End If
        End If
        Me.tableEmpleado = CType(MyBase.Tables("Empleado"),EmpleadoDataTable)
        If (initTable = true) Then
            If (Not (Me.tableEmpleado) Is Nothing) Then
                Me.tableEmpleado.InitVars
            End If
        End If
        Me.tableEmpleado_Deducciones = CType(MyBase.Tables("Empleado_Deducciones"),Empleado_DeduccionesDataTable)
        If (initTable = true) Then
            If (Not (Me.tableEmpleado_Deducciones) Is Nothing) Then
                Me.tableEmpleado_Deducciones.InitVars
            End If
        End If
        Me.tableHorasTrabajadas = CType(MyBase.Tables("HorasTrabajadas"),HorasTrabajadasDataTable)
        If (initTable = true) Then
            If (Not (Me.tableHorasTrabajadas) Is Nothing) Then
                Me.tableHorasTrabajadas.InitVars
            End If
        End If
        Me.tableParametroRenta = CType(MyBase.Tables("ParametroRenta"),ParametroRentaDataTable)
        If (initTable = true) Then
            If (Not (Me.tableParametroRenta) Is Nothing) Then
                Me.tableParametroRenta.InitVars
            End If
        End If
        Me.tablePlanilla = CType(MyBase.Tables("Planilla"),PlanillaDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePlanilla) Is Nothing) Then
                Me.tablePlanilla.InitVars
            End If
        End If
        Me.tablePlanilla_Deducciones = CType(MyBase.Tables("Planilla_Deducciones"),Planilla_DeduccionesDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePlanilla_Deducciones) Is Nothing) Then
                Me.tablePlanilla_Deducciones.InitVars
            End If
        End If
        Me.tablePlanilla_Detalle = CType(MyBase.Tables("Planilla_Detalle"),Planilla_DetalleDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePlanilla_Detalle) Is Nothing) Then
                Me.tablePlanilla_Detalle.InitVars
            End If
        End If
        Me.tableAccion = CType(MyBase.Tables("Accion"),AccionDataTable)
        If (initTable = true) Then
            If (Not (Me.tableAccion) Is Nothing) Then
                Me.tableAccion.InitVars
            End If
        End If
        Me.tableMoneda = CType(MyBase.Tables("Moneda"),MonedaDataTable)
        If (initTable = true) Then
            If (Not (Me.tableMoneda) Is Nothing) Then
                Me.tableMoneda.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "DsReportes"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DsReportes.xsd"
        Me.Locale = New Global.System.Globalization.CultureInfo("es-MX")
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableAdelantos = New AdelantosDataTable
        MyBase.Tables.Add(Me.tableAdelantos)
        Me.tableDeducciones = New DeduccionesDataTable
        MyBase.Tables.Add(Me.tableDeducciones)
        Me.tableEmpleado = New EmpleadoDataTable
        MyBase.Tables.Add(Me.tableEmpleado)
        Me.tableEmpleado_Deducciones = New Empleado_DeduccionesDataTable
        MyBase.Tables.Add(Me.tableEmpleado_Deducciones)
        Me.tableHorasTrabajadas = New HorasTrabajadasDataTable
        MyBase.Tables.Add(Me.tableHorasTrabajadas)
        Me.tableParametroRenta = New ParametroRentaDataTable
        MyBase.Tables.Add(Me.tableParametroRenta)
        Me.tablePlanilla = New PlanillaDataTable
        MyBase.Tables.Add(Me.tablePlanilla)
        Me.tablePlanilla_Deducciones = New Planilla_DeduccionesDataTable
        MyBase.Tables.Add(Me.tablePlanilla_Deducciones)
        Me.tablePlanilla_Detalle = New Planilla_DetalleDataTable
        MyBase.Tables.Add(Me.tablePlanilla_Detalle)
        Me.tableAccion = New AccionDataTable
        MyBase.Tables.Add(Me.tableAccion)
        Me.tableMoneda = New MonedaDataTable
        MyBase.Tables.Add(Me.tableMoneda)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeAdelantos() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeDeducciones() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeEmpleado() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeEmpleado_Deducciones() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeHorasTrabajadas() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeParametroRenta() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePlanilla() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePlanilla_Deducciones() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePlanilla_Detalle() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeAccion() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeMoneda() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As DsReportes = New DsReportes
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub AdelantosRowChangeEventHandler(ByVal sender As Object, ByVal e As AdelantosRowChangeEvent)
    
    Public Delegate Sub DeduccionesRowChangeEventHandler(ByVal sender As Object, ByVal e As DeduccionesRowChangeEvent)
    
    Public Delegate Sub EmpleadoRowChangeEventHandler(ByVal sender As Object, ByVal e As EmpleadoRowChangeEvent)
    
    Public Delegate Sub Empleado_DeduccionesRowChangeEventHandler(ByVal sender As Object, ByVal e As Empleado_DeduccionesRowChangeEvent)
    
    Public Delegate Sub HorasTrabajadasRowChangeEventHandler(ByVal sender As Object, ByVal e As HorasTrabajadasRowChangeEvent)
    
    Public Delegate Sub ParametroRentaRowChangeEventHandler(ByVal sender As Object, ByVal e As ParametroRentaRowChangeEvent)
    
    Public Delegate Sub PlanillaRowChangeEventHandler(ByVal sender As Object, ByVal e As PlanillaRowChangeEvent)
    
    Public Delegate Sub Planilla_DeduccionesRowChangeEventHandler(ByVal sender As Object, ByVal e As Planilla_DeduccionesRowChangeEvent)
    
    Public Delegate Sub Planilla_DetalleRowChangeEventHandler(ByVal sender As Object, ByVal e As Planilla_DetalleRowChangeEvent)
    
    Public Delegate Sub AccionRowChangeEventHandler(ByVal sender As Object, ByVal e As AccionRowChangeEvent)
    
    Public Delegate Sub MonedaRowChangeEventHandler(ByVal sender As Object, ByVal e As MonedaRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class AdelantosDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnNumero As Global.System.Data.DataColumn
        
        Private columnIdentificacion As Global.System.Data.DataColumn
        
        Private columnNombre As Global.System.Data.DataColumn
        
        Private columnAdelanto As Global.System.Data.DataColumn
        
        Private columnPrestamo As Global.System.Data.DataColumn
        
        Private columnPuesto As Global.System.Data.DataColumn
        
        Private columnSalario As Global.System.Data.DataColumn
        
        Private columnFechaComprobante As Global.System.Data.DataColumn
        
        Private columnNum_Pago As Global.System.Data.DataColumn
        
        Private columnMonto As Global.System.Data.DataColumn
        
        Private columnMontoEnLetras As Global.System.Data.DataColumn
        
        Private columnFechaCobro As Global.System.Data.DataColumn
        
        Private columnObservaciones As Global.System.Data.DataColumn
        
        Private columnDeducirxPago As Global.System.Data.DataColumn
        
        Private columnUsuario As Global.System.Data.DataColumn
        
        Private columnNombreUsuario As Global.System.Data.DataColumn
        
        Private columnCod_Moneda As Global.System.Data.DataColumn
        
        Private columnAnulado As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Adelantos"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumeroColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumero
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdentificacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdentificacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AdelantoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAdelanto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrestamoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrestamo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PuestoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPuesto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SalarioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSalario
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaComprobanteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaComprobante
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Num_PagoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNum_Pago
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMonto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontoEnLetrasColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontoEnLetras
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaCobroColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaCobro
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ObservacionesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnObservaciones
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DeducirxPagoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDeducirxPago
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UsuarioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUsuario
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreUsuarioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombreUsuario
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Cod_MonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCod_Moneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AnuladoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAnulado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As AdelantosRow
            Get
                Return CType(Me.Rows(index),AdelantosRow)
            End Get
        End Property
        
        Public Event AdelantosRowChanging As AdelantosRowChangeEventHandler
        
        Public Event AdelantosRowChanged As AdelantosRowChangeEventHandler
        
        Public Event AdelantosRowDeleting As AdelantosRowChangeEventHandler
        
        Public Event AdelantosRowDeleted As AdelantosRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddAdelantosRow(ByVal row As AdelantosRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddAdelantosRow( _
                    ByVal Identificacion As String,  _
                    ByVal Nombre As String,  _
                    ByVal Adelanto As Boolean,  _
                    ByVal Prestamo As Boolean,  _
                    ByVal Puesto As String,  _
                    ByVal Salario As Double,  _
                    ByVal FechaComprobante As Date,  _
                    ByVal Num_Pago As Integer,  _
                    ByVal Monto As Double,  _
                    ByVal MontoEnLetras As String,  _
                    ByVal FechaCobro As Date,  _
                    ByVal Observaciones As String,  _
                    ByVal DeducirxPago As Double,  _
                    ByVal Usuario As String,  _
                    ByVal NombreUsuario As String,  _
                    ByVal Cod_Moneda As Integer,  _
                    ByVal Anulado As Boolean) As AdelantosRow
            Dim rowAdelantosRow As AdelantosRow = CType(Me.NewRow,AdelantosRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Identificacion, Nombre, Adelanto, Prestamo, Puesto, Salario, FechaComprobante, Num_Pago, Monto, MontoEnLetras, FechaCobro, Observaciones, DeducirxPago, Usuario, NombreUsuario, Cod_Moneda, Anulado}
            rowAdelantosRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowAdelantosRow)
            Return rowAdelantosRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByNumero(ByVal Numero As Long) As AdelantosRow
            Return CType(Me.Rows.Find(New Object() {Numero}),AdelantosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As AdelantosDataTable = CType(MyBase.Clone,AdelantosDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New AdelantosDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnNumero = MyBase.Columns("Numero")
            Me.columnIdentificacion = MyBase.Columns("Identificacion")
            Me.columnNombre = MyBase.Columns("Nombre")
            Me.columnAdelanto = MyBase.Columns("Adelanto")
            Me.columnPrestamo = MyBase.Columns("Prestamo")
            Me.columnPuesto = MyBase.Columns("Puesto")
            Me.columnSalario = MyBase.Columns("Salario")
            Me.columnFechaComprobante = MyBase.Columns("FechaComprobante")
            Me.columnNum_Pago = MyBase.Columns("Num_Pago")
            Me.columnMonto = MyBase.Columns("Monto")
            Me.columnMontoEnLetras = MyBase.Columns("MontoEnLetras")
            Me.columnFechaCobro = MyBase.Columns("FechaCobro")
            Me.columnObservaciones = MyBase.Columns("Observaciones")
            Me.columnDeducirxPago = MyBase.Columns("DeducirxPago")
            Me.columnUsuario = MyBase.Columns("Usuario")
            Me.columnNombreUsuario = MyBase.Columns("NombreUsuario")
            Me.columnCod_Moneda = MyBase.Columns("Cod_Moneda")
            Me.columnAnulado = MyBase.Columns("Anulado")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnNumero = New Global.System.Data.DataColumn("Numero", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumero)
            Me.columnIdentificacion = New Global.System.Data.DataColumn("Identificacion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdentificacion)
            Me.columnNombre = New Global.System.Data.DataColumn("Nombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombre)
            Me.columnAdelanto = New Global.System.Data.DataColumn("Adelanto", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAdelanto)
            Me.columnPrestamo = New Global.System.Data.DataColumn("Prestamo", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrestamo)
            Me.columnPuesto = New Global.System.Data.DataColumn("Puesto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPuesto)
            Me.columnSalario = New Global.System.Data.DataColumn("Salario", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSalario)
            Me.columnFechaComprobante = New Global.System.Data.DataColumn("FechaComprobante", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaComprobante)
            Me.columnNum_Pago = New Global.System.Data.DataColumn("Num_Pago", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNum_Pago)
            Me.columnMonto = New Global.System.Data.DataColumn("Monto", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMonto)
            Me.columnMontoEnLetras = New Global.System.Data.DataColumn("MontoEnLetras", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontoEnLetras)
            Me.columnFechaCobro = New Global.System.Data.DataColumn("FechaCobro", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaCobro)
            Me.columnObservaciones = New Global.System.Data.DataColumn("Observaciones", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnObservaciones)
            Me.columnDeducirxPago = New Global.System.Data.DataColumn("DeducirxPago", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDeducirxPago)
            Me.columnUsuario = New Global.System.Data.DataColumn("Usuario", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUsuario)
            Me.columnNombreUsuario = New Global.System.Data.DataColumn("NombreUsuario", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreUsuario)
            Me.columnCod_Moneda = New Global.System.Data.DataColumn("Cod_Moneda", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCod_Moneda)
            Me.columnAnulado = New Global.System.Data.DataColumn("Anulado", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAnulado)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnNumero}, true))
            Me.columnNumero.AutoIncrement = true
            Me.columnNumero.AllowDBNull = false
            Me.columnNumero.ReadOnly = true
            Me.columnNumero.Unique = true
            Me.columnIdentificacion.AllowDBNull = false
            Me.columnNombre.AllowDBNull = false
            Me.columnAdelanto.AllowDBNull = false
            Me.columnPrestamo.AllowDBNull = false
            Me.columnPuesto.AllowDBNull = false
            Me.columnSalario.AllowDBNull = false
            Me.columnFechaComprobante.AllowDBNull = false
            Me.columnNum_Pago.AllowDBNull = false
            Me.columnMonto.AllowDBNull = false
            Me.columnMontoEnLetras.AllowDBNull = false
            Me.columnFechaCobro.AllowDBNull = false
            Me.columnObservaciones.AllowDBNull = false
            Me.columnDeducirxPago.AllowDBNull = false
            Me.columnUsuario.AllowDBNull = false
            Me.columnNombreUsuario.AllowDBNull = false
            Me.columnCod_Moneda.AllowDBNull = false
            Me.columnAnulado.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewAdelantosRow() As AdelantosRow
            Return CType(Me.NewRow,AdelantosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New AdelantosRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(AdelantosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AdelantosRowChangedEvent) Is Nothing) Then
                RaiseEvent AdelantosRowChanged(Me, New AdelantosRowChangeEvent(CType(e.Row,AdelantosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AdelantosRowChangingEvent) Is Nothing) Then
                RaiseEvent AdelantosRowChanging(Me, New AdelantosRowChangeEvent(CType(e.Row,AdelantosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AdelantosRowDeletedEvent) Is Nothing) Then
                RaiseEvent AdelantosRowDeleted(Me, New AdelantosRowChangeEvent(CType(e.Row,AdelantosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AdelantosRowDeletingEvent) Is Nothing) Then
                RaiseEvent AdelantosRowDeleting(Me, New AdelantosRowChangeEvent(CType(e.Row,AdelantosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveAdelantosRow(ByVal row As AdelantosRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DsReportes = New DsReportes
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "AdelantosDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class DeduccionesDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCodigo As Global.System.Data.DataColumn
        
        Private columnDescripcion As Global.System.Data.DataColumn
        
        Private columnMonto As Global.System.Data.DataColumn
        
        Private columnTipo As Global.System.Data.DataColumn
        
        Private columnAplica As Global.System.Data.DataColumn
        
        Private columnCod_Moneda As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Deducciones"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescripcionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescripcion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMonto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AplicaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAplica
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Cod_MonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCod_Moneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As DeduccionesRow
            Get
                Return CType(Me.Rows(index),DeduccionesRow)
            End Get
        End Property
        
        Public Event DeduccionesRowChanging As DeduccionesRowChangeEventHandler
        
        Public Event DeduccionesRowChanged As DeduccionesRowChangeEventHandler
        
        Public Event DeduccionesRowDeleting As DeduccionesRowChangeEventHandler
        
        Public Event DeduccionesRowDeleted As DeduccionesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddDeduccionesRow(ByVal row As DeduccionesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddDeduccionesRow(ByVal Descripcion As String, ByVal Monto As Double, ByVal Tipo As String, ByVal Aplica As Boolean, ByVal Cod_Moneda As Integer) As DeduccionesRow
            Dim rowDeduccionesRow As DeduccionesRow = CType(Me.NewRow,DeduccionesRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Descripcion, Monto, Tipo, Aplica, Cod_Moneda}
            rowDeduccionesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowDeduccionesRow)
            Return rowDeduccionesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCodigo(ByVal Codigo As Integer) As DeduccionesRow
            Return CType(Me.Rows.Find(New Object() {Codigo}),DeduccionesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As DeduccionesDataTable = CType(MyBase.Clone,DeduccionesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New DeduccionesDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCodigo = MyBase.Columns("Codigo")
            Me.columnDescripcion = MyBase.Columns("Descripcion")
            Me.columnMonto = MyBase.Columns("Monto")
            Me.columnTipo = MyBase.Columns("Tipo")
            Me.columnAplica = MyBase.Columns("Aplica")
            Me.columnCod_Moneda = MyBase.Columns("Cod_Moneda")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCodigo = New Global.System.Data.DataColumn("Codigo", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigo)
            Me.columnDescripcion = New Global.System.Data.DataColumn("Descripcion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescripcion)
            Me.columnMonto = New Global.System.Data.DataColumn("Monto", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMonto)
            Me.columnTipo = New Global.System.Data.DataColumn("Tipo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipo)
            Me.columnAplica = New Global.System.Data.DataColumn("Aplica", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAplica)
            Me.columnCod_Moneda = New Global.System.Data.DataColumn("Cod_Moneda", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCod_Moneda)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCodigo}, true))
            Me.columnCodigo.AutoIncrement = true
            Me.columnCodigo.AllowDBNull = false
            Me.columnCodigo.ReadOnly = true
            Me.columnCodigo.Unique = true
            Me.columnDescripcion.AllowDBNull = false
            Me.columnMonto.AllowDBNull = false
            Me.columnTipo.AllowDBNull = false
            Me.columnAplica.AllowDBNull = false
            Me.columnCod_Moneda.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewDeduccionesRow() As DeduccionesRow
            Return CType(Me.NewRow,DeduccionesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New DeduccionesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(DeduccionesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DeduccionesRowChangedEvent) Is Nothing) Then
                RaiseEvent DeduccionesRowChanged(Me, New DeduccionesRowChangeEvent(CType(e.Row,DeduccionesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DeduccionesRowChangingEvent) Is Nothing) Then
                RaiseEvent DeduccionesRowChanging(Me, New DeduccionesRowChangeEvent(CType(e.Row,DeduccionesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DeduccionesRowDeletedEvent) Is Nothing) Then
                RaiseEvent DeduccionesRowDeleted(Me, New DeduccionesRowChangeEvent(CType(e.Row,DeduccionesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DeduccionesRowDeletingEvent) Is Nothing) Then
                RaiseEvent DeduccionesRowDeleting(Me, New DeduccionesRowChangeEvent(CType(e.Row,DeduccionesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveDeduccionesRow(ByVal row As DeduccionesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DsReportes = New DsReportes
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "DeduccionesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class EmpleadoDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnIdentificacion As Global.System.Data.DataColumn
        
        Private columnNombre As Global.System.Data.DataColumn
        
        Private columnEstado_Civil As Global.System.Data.DataColumn
        
        Private columnHijos As Global.System.Data.DataColumn
        
        Private columnCod_Nacionalidad As Global.System.Data.DataColumn
        
        Private columnFecha_Nacimiento As Global.System.Data.DataColumn
        
        Private columnEdad As Global.System.Data.DataColumn
        
        Private columnTelefono1 As Global.System.Data.DataColumn
        
        Private columnTelefono2 As Global.System.Data.DataColumn
        
        Private columnEmail As Global.System.Data.DataColumn
        
        Private columnDireccion As Global.System.Data.DataColumn
        
        Private columnPuesto As Global.System.Data.DataColumn
        
        Private columnFecha_Ingreso As Global.System.Data.DataColumn
        
        Private columnFecha_Salida As Global.System.Data.DataColumn
        
        Private columnSalario As Global.System.Data.DataColumn
        
        Private columnCod_Departamento As Global.System.Data.DataColumn
        
        Private columnMasculino As Global.System.Data.DataColumn
        
        Private columnFemenino As Global.System.Data.DataColumn
        
        Private columnCod_Moneda As Global.System.Data.DataColumn
        
        Private columnHora As Global.System.Data.DataColumn
        
        Private columnDiario As Global.System.Data.DataColumn
        
        Private columnSemana As Global.System.Data.DataColumn
        
        Private columnQuincena As Global.System.Data.DataColumn
        
        Private columnMensual As Global.System.Data.DataColumn
        
        Private columnCod_Estado As Global.System.Data.DataColumn
        
        Private columnFoto As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Empleado"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdentificacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdentificacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Estado_CivilColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEstado_Civil
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HijosColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHijos
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Cod_NacionalidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCod_Nacionalidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Fecha_NacimientoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFecha_Nacimiento
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EdadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEdad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Telefono1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnTelefono1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Telefono2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnTelefono2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EmailColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmail
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DireccionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDireccion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PuestoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPuesto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Fecha_IngresoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFecha_Ingreso
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Fecha_SalidaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFecha_Salida
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SalarioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSalario
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Cod_DepartamentoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCod_Departamento
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MasculinoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMasculino
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FemeninoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFemenino
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Cod_MonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCod_Moneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HoraColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHora
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DiarioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDiario
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SemanaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSemana
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QuincenaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQuincena
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MensualColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMensual
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Cod_EstadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCod_Estado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FotoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFoto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As EmpleadoRow
            Get
                Return CType(Me.Rows(index),EmpleadoRow)
            End Get
        End Property
        
        Public Event EmpleadoRowChanging As EmpleadoRowChangeEventHandler
        
        Public Event EmpleadoRowChanged As EmpleadoRowChangeEventHandler
        
        Public Event EmpleadoRowDeleting As EmpleadoRowChangeEventHandler
        
        Public Event EmpleadoRowDeleted As EmpleadoRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddEmpleadoRow(ByVal row As EmpleadoRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddEmpleadoRow( _
                    ByVal Identificacion As String,  _
                    ByVal Nombre As String,  _
                    ByVal Estado_Civil As String,  _
                    ByVal Hijos As Integer,  _
                    ByVal Cod_Nacionalidad As Integer,  _
                    ByVal Fecha_Nacimiento As Date,  _
                    ByVal Edad As Integer,  _
                    ByVal Telefono1 As String,  _
                    ByVal Telefono2 As String,  _
                    ByVal Email As String,  _
                    ByVal Direccion As String,  _
                    ByVal Puesto As String,  _
                    ByVal Fecha_Ingreso As Date,  _
                    ByVal Fecha_Salida As Date,  _
                    ByVal Salario As Double,  _
                    ByVal Cod_Departamento As Integer,  _
                    ByVal Masculino As Boolean,  _
                    ByVal Femenino As Boolean,  _
                    ByVal Cod_Moneda As Integer,  _
                    ByVal Hora As Boolean,  _
                    ByVal Diario As Boolean,  _
                    ByVal Semana As Boolean,  _
                    ByVal Quincena As Boolean,  _
                    ByVal Mensual As Boolean,  _
                    ByVal Cod_Estado As Integer,  _
                    ByVal Foto() As Byte) As EmpleadoRow
            Dim rowEmpleadoRow As EmpleadoRow = CType(Me.NewRow,EmpleadoRow)
            Dim columnValuesArray() As Object = New Object() {Identificacion, Nombre, Estado_Civil, Hijos, Cod_Nacionalidad, Fecha_Nacimiento, Edad, Telefono1, Telefono2, Email, Direccion, Puesto, Fecha_Ingreso, Fecha_Salida, Salario, Cod_Departamento, Masculino, Femenino, Cod_Moneda, Hora, Diario, Semana, Quincena, Mensual, Cod_Estado, Foto}
            rowEmpleadoRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowEmpleadoRow)
            Return rowEmpleadoRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByIdentificacion(ByVal Identificacion As String) As EmpleadoRow
            Return CType(Me.Rows.Find(New Object() {Identificacion}),EmpleadoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As EmpleadoDataTable = CType(MyBase.Clone,EmpleadoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New EmpleadoDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnIdentificacion = MyBase.Columns("Identificacion")
            Me.columnNombre = MyBase.Columns("Nombre")
            Me.columnEstado_Civil = MyBase.Columns("Estado_Civil")
            Me.columnHijos = MyBase.Columns("Hijos")
            Me.columnCod_Nacionalidad = MyBase.Columns("Cod_Nacionalidad")
            Me.columnFecha_Nacimiento = MyBase.Columns("Fecha_Nacimiento")
            Me.columnEdad = MyBase.Columns("Edad")
            Me.columnTelefono1 = MyBase.Columns("Telefono1")
            Me.columnTelefono2 = MyBase.Columns("Telefono2")
            Me.columnEmail = MyBase.Columns("Email")
            Me.columnDireccion = MyBase.Columns("Direccion")
            Me.columnPuesto = MyBase.Columns("Puesto")
            Me.columnFecha_Ingreso = MyBase.Columns("Fecha_Ingreso")
            Me.columnFecha_Salida = MyBase.Columns("Fecha_Salida")
            Me.columnSalario = MyBase.Columns("Salario")
            Me.columnCod_Departamento = MyBase.Columns("Cod_Departamento")
            Me.columnMasculino = MyBase.Columns("Masculino")
            Me.columnFemenino = MyBase.Columns("Femenino")
            Me.columnCod_Moneda = MyBase.Columns("Cod_Moneda")
            Me.columnHora = MyBase.Columns("Hora")
            Me.columnDiario = MyBase.Columns("Diario")
            Me.columnSemana = MyBase.Columns("Semana")
            Me.columnQuincena = MyBase.Columns("Quincena")
            Me.columnMensual = MyBase.Columns("Mensual")
            Me.columnCod_Estado = MyBase.Columns("Cod_Estado")
            Me.columnFoto = MyBase.Columns("Foto")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnIdentificacion = New Global.System.Data.DataColumn("Identificacion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdentificacion)
            Me.columnNombre = New Global.System.Data.DataColumn("Nombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombre)
            Me.columnEstado_Civil = New Global.System.Data.DataColumn("Estado_Civil", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEstado_Civil)
            Me.columnHijos = New Global.System.Data.DataColumn("Hijos", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHijos)
            Me.columnCod_Nacionalidad = New Global.System.Data.DataColumn("Cod_Nacionalidad", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCod_Nacionalidad)
            Me.columnFecha_Nacimiento = New Global.System.Data.DataColumn("Fecha_Nacimiento", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFecha_Nacimiento)
            Me.columnEdad = New Global.System.Data.DataColumn("Edad", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEdad)
            Me.columnTelefono1 = New Global.System.Data.DataColumn("Telefono1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTelefono1)
            Me.columnTelefono2 = New Global.System.Data.DataColumn("Telefono2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTelefono2)
            Me.columnEmail = New Global.System.Data.DataColumn("Email", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmail)
            Me.columnDireccion = New Global.System.Data.DataColumn("Direccion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDireccion)
            Me.columnPuesto = New Global.System.Data.DataColumn("Puesto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPuesto)
            Me.columnFecha_Ingreso = New Global.System.Data.DataColumn("Fecha_Ingreso", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFecha_Ingreso)
            Me.columnFecha_Salida = New Global.System.Data.DataColumn("Fecha_Salida", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFecha_Salida)
            Me.columnSalario = New Global.System.Data.DataColumn("Salario", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSalario)
            Me.columnCod_Departamento = New Global.System.Data.DataColumn("Cod_Departamento", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCod_Departamento)
            Me.columnMasculino = New Global.System.Data.DataColumn("Masculino", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMasculino)
            Me.columnFemenino = New Global.System.Data.DataColumn("Femenino", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFemenino)
            Me.columnCod_Moneda = New Global.System.Data.DataColumn("Cod_Moneda", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCod_Moneda)
            Me.columnHora = New Global.System.Data.DataColumn("Hora", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHora)
            Me.columnDiario = New Global.System.Data.DataColumn("Diario", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDiario)
            Me.columnSemana = New Global.System.Data.DataColumn("Semana", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSemana)
            Me.columnQuincena = New Global.System.Data.DataColumn("Quincena", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQuincena)
            Me.columnMensual = New Global.System.Data.DataColumn("Mensual", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMensual)
            Me.columnCod_Estado = New Global.System.Data.DataColumn("Cod_Estado", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCod_Estado)
            Me.columnFoto = New Global.System.Data.DataColumn("Foto", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFoto)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnIdentificacion}, true))
            Me.columnIdentificacion.AllowDBNull = false
            Me.columnIdentificacion.Unique = true
            Me.columnNombre.AllowDBNull = false
            Me.columnEstado_Civil.AllowDBNull = false
            Me.columnHijos.AllowDBNull = false
            Me.columnCod_Nacionalidad.AllowDBNull = false
            Me.columnFecha_Nacimiento.AllowDBNull = false
            Me.columnEdad.AllowDBNull = false
            Me.columnTelefono1.AllowDBNull = false
            Me.columnTelefono2.AllowDBNull = false
            Me.columnEmail.AllowDBNull = false
            Me.columnDireccion.AllowDBNull = false
            Me.columnPuesto.AllowDBNull = false
            Me.columnFecha_Ingreso.AllowDBNull = false
            Me.columnFecha_Salida.AllowDBNull = false
            Me.columnSalario.AllowDBNull = false
            Me.columnCod_Departamento.AllowDBNull = false
            Me.columnMasculino.AllowDBNull = false
            Me.columnFemenino.AllowDBNull = false
            Me.columnCod_Moneda.AllowDBNull = false
            Me.columnHora.AllowDBNull = false
            Me.columnDiario.AllowDBNull = false
            Me.columnSemana.AllowDBNull = false
            Me.columnQuincena.AllowDBNull = false
            Me.columnMensual.AllowDBNull = false
            Me.columnCod_Estado.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewEmpleadoRow() As EmpleadoRow
            Return CType(Me.NewRow,EmpleadoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New EmpleadoRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(EmpleadoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EmpleadoRowChangedEvent) Is Nothing) Then
                RaiseEvent EmpleadoRowChanged(Me, New EmpleadoRowChangeEvent(CType(e.Row,EmpleadoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EmpleadoRowChangingEvent) Is Nothing) Then
                RaiseEvent EmpleadoRowChanging(Me, New EmpleadoRowChangeEvent(CType(e.Row,EmpleadoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EmpleadoRowDeletedEvent) Is Nothing) Then
                RaiseEvent EmpleadoRowDeleted(Me, New EmpleadoRowChangeEvent(CType(e.Row,EmpleadoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EmpleadoRowDeletingEvent) Is Nothing) Then
                RaiseEvent EmpleadoRowDeleting(Me, New EmpleadoRowChangeEvent(CType(e.Row,EmpleadoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveEmpleadoRow(ByVal row As EmpleadoRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DsReportes = New DsReportes
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "EmpleadoDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Empleado_DeduccionesDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnId As Global.System.Data.DataColumn
        
        Private columnIdentificacion As Global.System.Data.DataColumn
        
        Private columnCodigo As Global.System.Data.DataColumn
        
        Private columnDescripcion As Global.System.Data.DataColumn
        
        Private columnMonto As Global.System.Data.DataColumn
        
        Private columnTipo As Global.System.Data.DataColumn
        
        Private columnCod_Moneda As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Empleado_Deducciones"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnId
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdentificacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdentificacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescripcionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescripcion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMonto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Cod_MonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCod_Moneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Empleado_DeduccionesRow
            Get
                Return CType(Me.Rows(index),Empleado_DeduccionesRow)
            End Get
        End Property
        
        Public Event Empleado_DeduccionesRowChanging As Empleado_DeduccionesRowChangeEventHandler
        
        Public Event Empleado_DeduccionesRowChanged As Empleado_DeduccionesRowChangeEventHandler
        
        Public Event Empleado_DeduccionesRowDeleting As Empleado_DeduccionesRowChangeEventHandler
        
        Public Event Empleado_DeduccionesRowDeleted As Empleado_DeduccionesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddEmpleado_DeduccionesRow(ByVal row As Empleado_DeduccionesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddEmpleado_DeduccionesRow(ByVal Identificacion As String, ByVal Codigo As Integer, ByVal Descripcion As String, ByVal Monto As Double, ByVal Tipo As String, ByVal Cod_Moneda As Integer) As Empleado_DeduccionesRow
            Dim rowEmpleado_DeduccionesRow As Empleado_DeduccionesRow = CType(Me.NewRow,Empleado_DeduccionesRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Identificacion, Codigo, Descripcion, Monto, Tipo, Cod_Moneda}
            rowEmpleado_DeduccionesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowEmpleado_DeduccionesRow)
            Return rowEmpleado_DeduccionesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindById(ByVal Id As Long) As Empleado_DeduccionesRow
            Return CType(Me.Rows.Find(New Object() {Id}),Empleado_DeduccionesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Empleado_DeduccionesDataTable = CType(MyBase.Clone,Empleado_DeduccionesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Empleado_DeduccionesDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnId = MyBase.Columns("Id")
            Me.columnIdentificacion = MyBase.Columns("Identificacion")
            Me.columnCodigo = MyBase.Columns("Codigo")
            Me.columnDescripcion = MyBase.Columns("Descripcion")
            Me.columnMonto = MyBase.Columns("Monto")
            Me.columnTipo = MyBase.Columns("Tipo")
            Me.columnCod_Moneda = MyBase.Columns("Cod_Moneda")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnId = New Global.System.Data.DataColumn("Id", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnId)
            Me.columnIdentificacion = New Global.System.Data.DataColumn("Identificacion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdentificacion)
            Me.columnCodigo = New Global.System.Data.DataColumn("Codigo", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigo)
            Me.columnDescripcion = New Global.System.Data.DataColumn("Descripcion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescripcion)
            Me.columnMonto = New Global.System.Data.DataColumn("Monto", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMonto)
            Me.columnTipo = New Global.System.Data.DataColumn("Tipo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipo)
            Me.columnCod_Moneda = New Global.System.Data.DataColumn("Cod_Moneda", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCod_Moneda)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnId}, true))
            Me.columnId.AutoIncrement = true
            Me.columnId.AllowDBNull = false
            Me.columnId.ReadOnly = true
            Me.columnId.Unique = true
            Me.columnIdentificacion.AllowDBNull = false
            Me.columnCodigo.AllowDBNull = false
            Me.columnDescripcion.AllowDBNull = false
            Me.columnMonto.AllowDBNull = false
            Me.columnTipo.AllowDBNull = false
            Me.columnCod_Moneda.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewEmpleado_DeduccionesRow() As Empleado_DeduccionesRow
            Return CType(Me.NewRow,Empleado_DeduccionesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Empleado_DeduccionesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Empleado_DeduccionesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Empleado_DeduccionesRowChangedEvent) Is Nothing) Then
                RaiseEvent Empleado_DeduccionesRowChanged(Me, New Empleado_DeduccionesRowChangeEvent(CType(e.Row,Empleado_DeduccionesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Empleado_DeduccionesRowChangingEvent) Is Nothing) Then
                RaiseEvent Empleado_DeduccionesRowChanging(Me, New Empleado_DeduccionesRowChangeEvent(CType(e.Row,Empleado_DeduccionesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Empleado_DeduccionesRowDeletedEvent) Is Nothing) Then
                RaiseEvent Empleado_DeduccionesRowDeleted(Me, New Empleado_DeduccionesRowChangeEvent(CType(e.Row,Empleado_DeduccionesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Empleado_DeduccionesRowDeletingEvent) Is Nothing) Then
                RaiseEvent Empleado_DeduccionesRowDeleting(Me, New Empleado_DeduccionesRowChangeEvent(CType(e.Row,Empleado_DeduccionesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveEmpleado_DeduccionesRow(ByVal row As Empleado_DeduccionesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DsReportes = New DsReportes
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Empleado_DeduccionesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class HorasTrabajadasDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnId As Global.System.Data.DataColumn
        
        Private columnIdentificacion As Global.System.Data.DataColumn
        
        Private columnFecha As Global.System.Data.DataColumn
        
        Private columnHoraOrdinaria As Global.System.Data.DataColumn
        
        Private columnHoraExtra As Global.System.Data.DataColumn
        
        Private columnHoraDoble As Global.System.Data.DataColumn
        
        Private columnId_Proyecto As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "HorasTrabajadas"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnId
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdentificacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdentificacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFecha
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HoraOrdinariaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHoraOrdinaria
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HoraExtraColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHoraExtra
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HoraDobleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHoraDoble
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Id_ProyectoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnId_Proyecto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As HorasTrabajadasRow
            Get
                Return CType(Me.Rows(index),HorasTrabajadasRow)
            End Get
        End Property
        
        Public Event HorasTrabajadasRowChanging As HorasTrabajadasRowChangeEventHandler
        
        Public Event HorasTrabajadasRowChanged As HorasTrabajadasRowChangeEventHandler
        
        Public Event HorasTrabajadasRowDeleting As HorasTrabajadasRowChangeEventHandler
        
        Public Event HorasTrabajadasRowDeleted As HorasTrabajadasRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddHorasTrabajadasRow(ByVal row As HorasTrabajadasRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddHorasTrabajadasRow(ByVal Identificacion As String, ByVal Fecha As Date, ByVal HoraOrdinaria As Double, ByVal HoraExtra As String, ByVal HoraDoble As String, ByVal Id_Proyecto As Integer) As HorasTrabajadasRow
            Dim rowHorasTrabajadasRow As HorasTrabajadasRow = CType(Me.NewRow,HorasTrabajadasRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Identificacion, Fecha, HoraOrdinaria, HoraExtra, HoraDoble, Id_Proyecto}
            rowHorasTrabajadasRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowHorasTrabajadasRow)
            Return rowHorasTrabajadasRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindById(ByVal Id As Long) As HorasTrabajadasRow
            Return CType(Me.Rows.Find(New Object() {Id}),HorasTrabajadasRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As HorasTrabajadasDataTable = CType(MyBase.Clone,HorasTrabajadasDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New HorasTrabajadasDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnId = MyBase.Columns("Id")
            Me.columnIdentificacion = MyBase.Columns("Identificacion")
            Me.columnFecha = MyBase.Columns("Fecha")
            Me.columnHoraOrdinaria = MyBase.Columns("HoraOrdinaria")
            Me.columnHoraExtra = MyBase.Columns("HoraExtra")
            Me.columnHoraDoble = MyBase.Columns("HoraDoble")
            Me.columnId_Proyecto = MyBase.Columns("Id_Proyecto")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnId = New Global.System.Data.DataColumn("Id", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnId)
            Me.columnIdentificacion = New Global.System.Data.DataColumn("Identificacion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdentificacion)
            Me.columnFecha = New Global.System.Data.DataColumn("Fecha", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFecha)
            Me.columnHoraOrdinaria = New Global.System.Data.DataColumn("HoraOrdinaria", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHoraOrdinaria)
            Me.columnHoraExtra = New Global.System.Data.DataColumn("HoraExtra", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHoraExtra)
            Me.columnHoraDoble = New Global.System.Data.DataColumn("HoraDoble", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHoraDoble)
            Me.columnId_Proyecto = New Global.System.Data.DataColumn("Id_Proyecto", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnId_Proyecto)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnId}, true))
            Me.columnId.AutoIncrement = true
            Me.columnId.AllowDBNull = false
            Me.columnId.ReadOnly = true
            Me.columnId.Unique = true
            Me.columnIdentificacion.AllowDBNull = false
            Me.columnFecha.AllowDBNull = false
            Me.columnHoraOrdinaria.AllowDBNull = false
            Me.columnHoraExtra.AllowDBNull = false
            Me.columnHoraDoble.AllowDBNull = false
            Me.columnId_Proyecto.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewHorasTrabajadasRow() As HorasTrabajadasRow
            Return CType(Me.NewRow,HorasTrabajadasRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New HorasTrabajadasRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(HorasTrabajadasRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.HorasTrabajadasRowChangedEvent) Is Nothing) Then
                RaiseEvent HorasTrabajadasRowChanged(Me, New HorasTrabajadasRowChangeEvent(CType(e.Row,HorasTrabajadasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.HorasTrabajadasRowChangingEvent) Is Nothing) Then
                RaiseEvent HorasTrabajadasRowChanging(Me, New HorasTrabajadasRowChangeEvent(CType(e.Row,HorasTrabajadasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.HorasTrabajadasRowDeletedEvent) Is Nothing) Then
                RaiseEvent HorasTrabajadasRowDeleted(Me, New HorasTrabajadasRowChangeEvent(CType(e.Row,HorasTrabajadasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.HorasTrabajadasRowDeletingEvent) Is Nothing) Then
                RaiseEvent HorasTrabajadasRowDeleting(Me, New HorasTrabajadasRowChangeEvent(CType(e.Row,HorasTrabajadasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveHorasTrabajadasRow(ByVal row As HorasTrabajadasRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DsReportes = New DsReportes
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "HorasTrabajadasDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ParametroRentaDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnId As Global.System.Data.DataColumn
        
        Private columnMontoExento As Global.System.Data.DataColumn
        
        Private columnMontoDe As Global.System.Data.DataColumn
        
        Private columnMontoHasta As Global.System.Data.DataColumn
        
        Private columnPorcentaje1 As Global.System.Data.DataColumn
        
        Private columnMontoEnAdelante As Global.System.Data.DataColumn
        
        Private columnPorcentaje2 As Global.System.Data.DataColumn
        
        Private columnEsposa As Global.System.Data.DataColumn
        
        Private columnHijo As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ParametroRenta"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnId
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontoExentoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontoExento
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontoDeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontoDe
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontoHastaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontoHasta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Porcentaje1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPorcentaje1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontoEnAdelanteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontoEnAdelante
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Porcentaje2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPorcentaje2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EsposaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEsposa
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HijoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHijo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ParametroRentaRow
            Get
                Return CType(Me.Rows(index),ParametroRentaRow)
            End Get
        End Property
        
        Public Event ParametroRentaRowChanging As ParametroRentaRowChangeEventHandler
        
        Public Event ParametroRentaRowChanged As ParametroRentaRowChangeEventHandler
        
        Public Event ParametroRentaRowDeleting As ParametroRentaRowChangeEventHandler
        
        Public Event ParametroRentaRowDeleted As ParametroRentaRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddParametroRentaRow(ByVal row As ParametroRentaRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddParametroRentaRow(ByVal MontoExento As Double, ByVal MontoDe As Double, ByVal MontoHasta As Double, ByVal Porcentaje1 As Double, ByVal MontoEnAdelante As Double, ByVal Porcentaje2 As Double, ByVal Esposa As Double, ByVal Hijo As Double) As ParametroRentaRow
            Dim rowParametroRentaRow As ParametroRentaRow = CType(Me.NewRow,ParametroRentaRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, MontoExento, MontoDe, MontoHasta, Porcentaje1, MontoEnAdelante, Porcentaje2, Esposa, Hijo}
            rowParametroRentaRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowParametroRentaRow)
            Return rowParametroRentaRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindById(ByVal Id As Integer) As ParametroRentaRow
            Return CType(Me.Rows.Find(New Object() {Id}),ParametroRentaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ParametroRentaDataTable = CType(MyBase.Clone,ParametroRentaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ParametroRentaDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnId = MyBase.Columns("Id")
            Me.columnMontoExento = MyBase.Columns("MontoExento")
            Me.columnMontoDe = MyBase.Columns("MontoDe")
            Me.columnMontoHasta = MyBase.Columns("MontoHasta")
            Me.columnPorcentaje1 = MyBase.Columns("Porcentaje1")
            Me.columnMontoEnAdelante = MyBase.Columns("MontoEnAdelante")
            Me.columnPorcentaje2 = MyBase.Columns("Porcentaje2")
            Me.columnEsposa = MyBase.Columns("Esposa")
            Me.columnHijo = MyBase.Columns("Hijo")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnId = New Global.System.Data.DataColumn("Id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnId)
            Me.columnMontoExento = New Global.System.Data.DataColumn("MontoExento", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontoExento)
            Me.columnMontoDe = New Global.System.Data.DataColumn("MontoDe", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontoDe)
            Me.columnMontoHasta = New Global.System.Data.DataColumn("MontoHasta", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontoHasta)
            Me.columnPorcentaje1 = New Global.System.Data.DataColumn("Porcentaje1", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPorcentaje1)
            Me.columnMontoEnAdelante = New Global.System.Data.DataColumn("MontoEnAdelante", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontoEnAdelante)
            Me.columnPorcentaje2 = New Global.System.Data.DataColumn("Porcentaje2", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPorcentaje2)
            Me.columnEsposa = New Global.System.Data.DataColumn("Esposa", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEsposa)
            Me.columnHijo = New Global.System.Data.DataColumn("Hijo", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHijo)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnId}, true))
            Me.columnId.AutoIncrement = true
            Me.columnId.AllowDBNull = false
            Me.columnId.ReadOnly = true
            Me.columnId.Unique = true
            Me.columnMontoExento.AllowDBNull = false
            Me.columnMontoDe.AllowDBNull = false
            Me.columnMontoHasta.AllowDBNull = false
            Me.columnPorcentaje1.AllowDBNull = false
            Me.columnMontoEnAdelante.AllowDBNull = false
            Me.columnPorcentaje2.AllowDBNull = false
            Me.columnEsposa.AllowDBNull = false
            Me.columnHijo.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewParametroRentaRow() As ParametroRentaRow
            Return CType(Me.NewRow,ParametroRentaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ParametroRentaRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ParametroRentaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ParametroRentaRowChangedEvent) Is Nothing) Then
                RaiseEvent ParametroRentaRowChanged(Me, New ParametroRentaRowChangeEvent(CType(e.Row,ParametroRentaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ParametroRentaRowChangingEvent) Is Nothing) Then
                RaiseEvent ParametroRentaRowChanging(Me, New ParametroRentaRowChangeEvent(CType(e.Row,ParametroRentaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ParametroRentaRowDeletedEvent) Is Nothing) Then
                RaiseEvent ParametroRentaRowDeleted(Me, New ParametroRentaRowChangeEvent(CType(e.Row,ParametroRentaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ParametroRentaRowDeletingEvent) Is Nothing) Then
                RaiseEvent ParametroRentaRowDeleting(Me, New ParametroRentaRowChangeEvent(CType(e.Row,ParametroRentaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveParametroRentaRow(ByVal row As ParametroRentaRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DsReportes = New DsReportes
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ParametroRentaDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PlanillaDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnId_Planilla As Global.System.Data.DataColumn
        
        Private columnFecha As Global.System.Data.DataColumn
        
        Private columnFechaInicial As Global.System.Data.DataColumn
        
        Private columnFechaFinal As Global.System.Data.DataColumn
        
        Private columnCierreMes As Global.System.Data.DataColumn
        
        Private columnCed_Usuario As Global.System.Data.DataColumn
        
        Private columnNombre_Usuario As Global.System.Data.DataColumn
        
        Private columnAnulado As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Planilla"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Id_PlanillaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnId_Planilla
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFecha
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaInicialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaInicial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaFinalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaFinal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CierreMesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCierreMes
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Ced_UsuarioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCed_Usuario
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Nombre_UsuarioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombre_Usuario
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AnuladoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAnulado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PlanillaRow
            Get
                Return CType(Me.Rows(index),PlanillaRow)
            End Get
        End Property
        
        Public Event PlanillaRowChanging As PlanillaRowChangeEventHandler
        
        Public Event PlanillaRowChanged As PlanillaRowChangeEventHandler
        
        Public Event PlanillaRowDeleting As PlanillaRowChangeEventHandler
        
        Public Event PlanillaRowDeleted As PlanillaRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPlanillaRow(ByVal row As PlanillaRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPlanillaRow(ByVal Fecha As Date, ByVal FechaInicial As Date, ByVal FechaFinal As Date, ByVal CierreMes As Boolean, ByVal Ced_Usuario As String, ByVal Nombre_Usuario As String, ByVal Anulado As Boolean) As PlanillaRow
            Dim rowPlanillaRow As PlanillaRow = CType(Me.NewRow,PlanillaRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Fecha, FechaInicial, FechaFinal, CierreMes, Ced_Usuario, Nombre_Usuario, Anulado}
            rowPlanillaRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPlanillaRow)
            Return rowPlanillaRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindById_Planilla(ByVal Id_Planilla As Long) As PlanillaRow
            Return CType(Me.Rows.Find(New Object() {Id_Planilla}),PlanillaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PlanillaDataTable = CType(MyBase.Clone,PlanillaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PlanillaDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnId_Planilla = MyBase.Columns("Id_Planilla")
            Me.columnFecha = MyBase.Columns("Fecha")
            Me.columnFechaInicial = MyBase.Columns("FechaInicial")
            Me.columnFechaFinal = MyBase.Columns("FechaFinal")
            Me.columnCierreMes = MyBase.Columns("CierreMes")
            Me.columnCed_Usuario = MyBase.Columns("Ced_Usuario")
            Me.columnNombre_Usuario = MyBase.Columns("Nombre_Usuario")
            Me.columnAnulado = MyBase.Columns("Anulado")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnId_Planilla = New Global.System.Data.DataColumn("Id_Planilla", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnId_Planilla)
            Me.columnFecha = New Global.System.Data.DataColumn("Fecha", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFecha)
            Me.columnFechaInicial = New Global.System.Data.DataColumn("FechaInicial", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaInicial)
            Me.columnFechaFinal = New Global.System.Data.DataColumn("FechaFinal", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaFinal)
            Me.columnCierreMes = New Global.System.Data.DataColumn("CierreMes", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCierreMes)
            Me.columnCed_Usuario = New Global.System.Data.DataColumn("Ced_Usuario", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCed_Usuario)
            Me.columnNombre_Usuario = New Global.System.Data.DataColumn("Nombre_Usuario", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombre_Usuario)
            Me.columnAnulado = New Global.System.Data.DataColumn("Anulado", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAnulado)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnId_Planilla}, true))
            Me.columnId_Planilla.AutoIncrement = true
            Me.columnId_Planilla.AllowDBNull = false
            Me.columnId_Planilla.ReadOnly = true
            Me.columnId_Planilla.Unique = true
            Me.columnFecha.AllowDBNull = false
            Me.columnFechaInicial.AllowDBNull = false
            Me.columnFechaFinal.AllowDBNull = false
            Me.columnCierreMes.AllowDBNull = false
            Me.columnCed_Usuario.AllowDBNull = false
            Me.columnNombre_Usuario.AllowDBNull = false
            Me.columnAnulado.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPlanillaRow() As PlanillaRow
            Return CType(Me.NewRow,PlanillaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PlanillaRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PlanillaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PlanillaRowChangedEvent) Is Nothing) Then
                RaiseEvent PlanillaRowChanged(Me, New PlanillaRowChangeEvent(CType(e.Row,PlanillaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PlanillaRowChangingEvent) Is Nothing) Then
                RaiseEvent PlanillaRowChanging(Me, New PlanillaRowChangeEvent(CType(e.Row,PlanillaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PlanillaRowDeletedEvent) Is Nothing) Then
                RaiseEvent PlanillaRowDeleted(Me, New PlanillaRowChangeEvent(CType(e.Row,PlanillaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PlanillaRowDeletingEvent) Is Nothing) Then
                RaiseEvent PlanillaRowDeleting(Me, New PlanillaRowChangeEvent(CType(e.Row,PlanillaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePlanillaRow(ByVal row As PlanillaRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DsReportes = New DsReportes
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PlanillaDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Planilla_DeduccionesDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnId As Global.System.Data.DataColumn
        
        Private columnId_PlanillaDetalle As Global.System.Data.DataColumn
        
        Private columnCod_Deduccion As Global.System.Data.DataColumn
        
        Private columnNombre As Global.System.Data.DataColumn
        
        Private columnMonto As Global.System.Data.DataColumn
        
        Private columnCod_Moneda As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Planilla_Deducciones"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnId
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Id_PlanillaDetalleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnId_PlanillaDetalle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Cod_DeduccionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCod_Deduccion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMonto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Cod_MonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCod_Moneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Planilla_DeduccionesRow
            Get
                Return CType(Me.Rows(index),Planilla_DeduccionesRow)
            End Get
        End Property
        
        Public Event Planilla_DeduccionesRowChanging As Planilla_DeduccionesRowChangeEventHandler
        
        Public Event Planilla_DeduccionesRowChanged As Planilla_DeduccionesRowChangeEventHandler
        
        Public Event Planilla_DeduccionesRowDeleting As Planilla_DeduccionesRowChangeEventHandler
        
        Public Event Planilla_DeduccionesRowDeleted As Planilla_DeduccionesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPlanilla_DeduccionesRow(ByVal row As Planilla_DeduccionesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPlanilla_DeduccionesRow(ByVal Id_PlanillaDetalle As Long, ByVal Cod_Deduccion As Integer, ByVal Nombre As String, ByVal Monto As Double, ByVal Cod_Moneda As Integer) As Planilla_DeduccionesRow
            Dim rowPlanilla_DeduccionesRow As Planilla_DeduccionesRow = CType(Me.NewRow,Planilla_DeduccionesRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Id_PlanillaDetalle, Cod_Deduccion, Nombre, Monto, Cod_Moneda}
            rowPlanilla_DeduccionesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPlanilla_DeduccionesRow)
            Return rowPlanilla_DeduccionesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindById(ByVal Id As Long) As Planilla_DeduccionesRow
            Return CType(Me.Rows.Find(New Object() {Id}),Planilla_DeduccionesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Planilla_DeduccionesDataTable = CType(MyBase.Clone,Planilla_DeduccionesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Planilla_DeduccionesDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnId = MyBase.Columns("Id")
            Me.columnId_PlanillaDetalle = MyBase.Columns("Id_PlanillaDetalle")
            Me.columnCod_Deduccion = MyBase.Columns("Cod_Deduccion")
            Me.columnNombre = MyBase.Columns("Nombre")
            Me.columnMonto = MyBase.Columns("Monto")
            Me.columnCod_Moneda = MyBase.Columns("Cod_Moneda")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnId = New Global.System.Data.DataColumn("Id", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnId)
            Me.columnId_PlanillaDetalle = New Global.System.Data.DataColumn("Id_PlanillaDetalle", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnId_PlanillaDetalle)
            Me.columnCod_Deduccion = New Global.System.Data.DataColumn("Cod_Deduccion", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCod_Deduccion)
            Me.columnNombre = New Global.System.Data.DataColumn("Nombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombre)
            Me.columnMonto = New Global.System.Data.DataColumn("Monto", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMonto)
            Me.columnCod_Moneda = New Global.System.Data.DataColumn("Cod_Moneda", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCod_Moneda)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnId}, true))
            Me.columnId.AutoIncrement = true
            Me.columnId.AllowDBNull = false
            Me.columnId.ReadOnly = true
            Me.columnId.Unique = true
            Me.columnId_PlanillaDetalle.AllowDBNull = false
            Me.columnCod_Deduccion.AllowDBNull = false
            Me.columnNombre.AllowDBNull = false
            Me.columnMonto.AllowDBNull = false
            Me.columnCod_Moneda.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPlanilla_DeduccionesRow() As Planilla_DeduccionesRow
            Return CType(Me.NewRow,Planilla_DeduccionesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Planilla_DeduccionesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Planilla_DeduccionesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Planilla_DeduccionesRowChangedEvent) Is Nothing) Then
                RaiseEvent Planilla_DeduccionesRowChanged(Me, New Planilla_DeduccionesRowChangeEvent(CType(e.Row,Planilla_DeduccionesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Planilla_DeduccionesRowChangingEvent) Is Nothing) Then
                RaiseEvent Planilla_DeduccionesRowChanging(Me, New Planilla_DeduccionesRowChangeEvent(CType(e.Row,Planilla_DeduccionesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Planilla_DeduccionesRowDeletedEvent) Is Nothing) Then
                RaiseEvent Planilla_DeduccionesRowDeleted(Me, New Planilla_DeduccionesRowChangeEvent(CType(e.Row,Planilla_DeduccionesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Planilla_DeduccionesRowDeletingEvent) Is Nothing) Then
                RaiseEvent Planilla_DeduccionesRowDeleting(Me, New Planilla_DeduccionesRowChangeEvent(CType(e.Row,Planilla_DeduccionesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePlanilla_DeduccionesRow(ByVal row As Planilla_DeduccionesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DsReportes = New DsReportes
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Planilla_DeduccionesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Planilla_DetalleDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnId As Global.System.Data.DataColumn
        
        Private columnId_Planilla As Global.System.Data.DataColumn
        
        Private columnCedula As Global.System.Data.DataColumn
        
        Private columnNombre As Global.System.Data.DataColumn
        
        Private columnPuesto As Global.System.Data.DataColumn
        
        Private columnSalario As Global.System.Data.DataColumn
        
        Private columnFormaPago As Global.System.Data.DataColumn
        
        Private columnOrdinaria As Global.System.Data.DataColumn
        
        Private columnExtra As Global.System.Data.DataColumn
        
        Private columnDoble As Global.System.Data.DataColumn
        
        Private columnSalarioBruto As Global.System.Data.DataColumn
        
        Private columnAdelantos As Global.System.Data.DataColumn
        
        Private columnPrestamos As Global.System.Data.DataColumn
        
        Private columnRenta As Global.System.Data.DataColumn
        
        Private columnTotalDeducciones As Global.System.Data.DataColumn
        
        Private columnSalarioNeto As Global.System.Data.DataColumn
        
        Private columnCod_Moneda As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Planilla_Detalle"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnId
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Id_PlanillaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnId_Planilla
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CedulaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCedula
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PuestoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPuesto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SalarioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSalario
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FormaPagoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFormaPago
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OrdinariaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOrdinaria
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ExtraColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnExtra
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DobleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDoble
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SalarioBrutoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSalarioBruto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AdelantosColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAdelantos
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrestamosColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrestamos
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RentaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRenta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalDeduccionesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalDeducciones
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SalarioNetoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSalarioNeto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Cod_MonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCod_Moneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Planilla_DetalleRow
            Get
                Return CType(Me.Rows(index),Planilla_DetalleRow)
            End Get
        End Property
        
        Public Event Planilla_DetalleRowChanging As Planilla_DetalleRowChangeEventHandler
        
        Public Event Planilla_DetalleRowChanged As Planilla_DetalleRowChangeEventHandler
        
        Public Event Planilla_DetalleRowDeleting As Planilla_DetalleRowChangeEventHandler
        
        Public Event Planilla_DetalleRowDeleted As Planilla_DetalleRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPlanilla_DetalleRow(ByVal row As Planilla_DetalleRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPlanilla_DetalleRow( _
                    ByVal Id_Planilla As Long,  _
                    ByVal Cedula As String,  _
                    ByVal Nombre As String,  _
                    ByVal Puesto As String,  _
                    ByVal Salario As Double,  _
                    ByVal FormaPago As String,  _
                    ByVal Ordinaria As Double,  _
                    ByVal Extra As Double,  _
                    ByVal Doble As Double,  _
                    ByVal SalarioBruto As Double,  _
                    ByVal Adelantos As Double,  _
                    ByVal Prestamos As Double,  _
                    ByVal Renta As Double,  _
                    ByVal TotalDeducciones As Double,  _
                    ByVal SalarioNeto As Double,  _
                    ByVal Cod_Moneda As Integer) As Planilla_DetalleRow
            Dim rowPlanilla_DetalleRow As Planilla_DetalleRow = CType(Me.NewRow,Planilla_DetalleRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Id_Planilla, Cedula, Nombre, Puesto, Salario, FormaPago, Ordinaria, Extra, Doble, SalarioBruto, Adelantos, Prestamos, Renta, TotalDeducciones, SalarioNeto, Cod_Moneda}
            rowPlanilla_DetalleRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPlanilla_DetalleRow)
            Return rowPlanilla_DetalleRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindById(ByVal Id As Long) As Planilla_DetalleRow
            Return CType(Me.Rows.Find(New Object() {Id}),Planilla_DetalleRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Planilla_DetalleDataTable = CType(MyBase.Clone,Planilla_DetalleDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Planilla_DetalleDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnId = MyBase.Columns("Id")
            Me.columnId_Planilla = MyBase.Columns("Id_Planilla")
            Me.columnCedula = MyBase.Columns("Cedula")
            Me.columnNombre = MyBase.Columns("Nombre")
            Me.columnPuesto = MyBase.Columns("Puesto")
            Me.columnSalario = MyBase.Columns("Salario")
            Me.columnFormaPago = MyBase.Columns("FormaPago")
            Me.columnOrdinaria = MyBase.Columns("Ordinaria")
            Me.columnExtra = MyBase.Columns("Extra")
            Me.columnDoble = MyBase.Columns("Doble")
            Me.columnSalarioBruto = MyBase.Columns("SalarioBruto")
            Me.columnAdelantos = MyBase.Columns("Adelantos")
            Me.columnPrestamos = MyBase.Columns("Prestamos")
            Me.columnRenta = MyBase.Columns("Renta")
            Me.columnTotalDeducciones = MyBase.Columns("TotalDeducciones")
            Me.columnSalarioNeto = MyBase.Columns("SalarioNeto")
            Me.columnCod_Moneda = MyBase.Columns("Cod_Moneda")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnId = New Global.System.Data.DataColumn("Id", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnId)
            Me.columnId_Planilla = New Global.System.Data.DataColumn("Id_Planilla", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnId_Planilla)
            Me.columnCedula = New Global.System.Data.DataColumn("Cedula", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCedula)
            Me.columnNombre = New Global.System.Data.DataColumn("Nombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombre)
            Me.columnPuesto = New Global.System.Data.DataColumn("Puesto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPuesto)
            Me.columnSalario = New Global.System.Data.DataColumn("Salario", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSalario)
            Me.columnFormaPago = New Global.System.Data.DataColumn("FormaPago", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFormaPago)
            Me.columnOrdinaria = New Global.System.Data.DataColumn("Ordinaria", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrdinaria)
            Me.columnExtra = New Global.System.Data.DataColumn("Extra", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnExtra)
            Me.columnDoble = New Global.System.Data.DataColumn("Doble", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDoble)
            Me.columnSalarioBruto = New Global.System.Data.DataColumn("SalarioBruto", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSalarioBruto)
            Me.columnAdelantos = New Global.System.Data.DataColumn("Adelantos", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAdelantos)
            Me.columnPrestamos = New Global.System.Data.DataColumn("Prestamos", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrestamos)
            Me.columnRenta = New Global.System.Data.DataColumn("Renta", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRenta)
            Me.columnTotalDeducciones = New Global.System.Data.DataColumn("TotalDeducciones", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalDeducciones)
            Me.columnSalarioNeto = New Global.System.Data.DataColumn("SalarioNeto", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSalarioNeto)
            Me.columnCod_Moneda = New Global.System.Data.DataColumn("Cod_Moneda", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCod_Moneda)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnId}, true))
            Me.columnId.AutoIncrement = true
            Me.columnId.AllowDBNull = false
            Me.columnId.ReadOnly = true
            Me.columnId.Unique = true
            Me.columnId_Planilla.AllowDBNull = false
            Me.columnCedula.AllowDBNull = false
            Me.columnNombre.AllowDBNull = false
            Me.columnPuesto.AllowDBNull = false
            Me.columnSalario.AllowDBNull = false
            Me.columnFormaPago.AllowDBNull = false
            Me.columnOrdinaria.AllowDBNull = false
            Me.columnExtra.AllowDBNull = false
            Me.columnDoble.AllowDBNull = false
            Me.columnSalarioBruto.AllowDBNull = false
            Me.columnAdelantos.AllowDBNull = false
            Me.columnPrestamos.AllowDBNull = false
            Me.columnRenta.AllowDBNull = false
            Me.columnTotalDeducciones.AllowDBNull = false
            Me.columnSalarioNeto.AllowDBNull = false
            Me.columnCod_Moneda.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPlanilla_DetalleRow() As Planilla_DetalleRow
            Return CType(Me.NewRow,Planilla_DetalleRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Planilla_DetalleRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Planilla_DetalleRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Planilla_DetalleRowChangedEvent) Is Nothing) Then
                RaiseEvent Planilla_DetalleRowChanged(Me, New Planilla_DetalleRowChangeEvent(CType(e.Row,Planilla_DetalleRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Planilla_DetalleRowChangingEvent) Is Nothing) Then
                RaiseEvent Planilla_DetalleRowChanging(Me, New Planilla_DetalleRowChangeEvent(CType(e.Row,Planilla_DetalleRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Planilla_DetalleRowDeletedEvent) Is Nothing) Then
                RaiseEvent Planilla_DetalleRowDeleted(Me, New Planilla_DetalleRowChangeEvent(CType(e.Row,Planilla_DetalleRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Planilla_DetalleRowDeletingEvent) Is Nothing) Then
                RaiseEvent Planilla_DetalleRowDeleting(Me, New Planilla_DetalleRowChangeEvent(CType(e.Row,Planilla_DetalleRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePlanilla_DetalleRow(ByVal row As Planilla_DetalleRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DsReportes = New DsReportes
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Planilla_DetalleDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class AccionDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCodigo As Global.System.Data.DataColumn
        
        Private columnDescripcion As Global.System.Data.DataColumn
        
        Private columnRangoFecha As Global.System.Data.DataColumn
        
        Private columnNombre As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Accion"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescripcionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescripcion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RangoFechaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRangoFecha
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As AccionRow
            Get
                Return CType(Me.Rows(index),AccionRow)
            End Get
        End Property
        
        Public Event AccionRowChanging As AccionRowChangeEventHandler
        
        Public Event AccionRowChanged As AccionRowChangeEventHandler
        
        Public Event AccionRowDeleting As AccionRowChangeEventHandler
        
        Public Event AccionRowDeleted As AccionRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddAccionRow(ByVal row As AccionRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddAccionRow(ByVal Descripcion As String, ByVal RangoFecha As Boolean, ByVal Nombre As String) As AccionRow
            Dim rowAccionRow As AccionRow = CType(Me.NewRow,AccionRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Descripcion, RangoFecha, Nombre}
            rowAccionRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowAccionRow)
            Return rowAccionRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCodigo(ByVal Codigo As Integer) As AccionRow
            Return CType(Me.Rows.Find(New Object() {Codigo}),AccionRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As AccionDataTable = CType(MyBase.Clone,AccionDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New AccionDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCodigo = MyBase.Columns("Codigo")
            Me.columnDescripcion = MyBase.Columns("Descripcion")
            Me.columnRangoFecha = MyBase.Columns("RangoFecha")
            Me.columnNombre = MyBase.Columns("Nombre")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCodigo = New Global.System.Data.DataColumn("Codigo", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigo)
            Me.columnDescripcion = New Global.System.Data.DataColumn("Descripcion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescripcion)
            Me.columnRangoFecha = New Global.System.Data.DataColumn("RangoFecha", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRangoFecha)
            Me.columnNombre = New Global.System.Data.DataColumn("Nombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombre)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCodigo}, true))
            Me.columnCodigo.AutoIncrement = true
            Me.columnCodigo.AllowDBNull = false
            Me.columnCodigo.ReadOnly = true
            Me.columnCodigo.Unique = true
            Me.columnDescripcion.AllowDBNull = false
            Me.columnRangoFecha.AllowDBNull = false
            Me.columnNombre.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewAccionRow() As AccionRow
            Return CType(Me.NewRow,AccionRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New AccionRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(AccionRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AccionRowChangedEvent) Is Nothing) Then
                RaiseEvent AccionRowChanged(Me, New AccionRowChangeEvent(CType(e.Row,AccionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AccionRowChangingEvent) Is Nothing) Then
                RaiseEvent AccionRowChanging(Me, New AccionRowChangeEvent(CType(e.Row,AccionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AccionRowDeletedEvent) Is Nothing) Then
                RaiseEvent AccionRowDeleted(Me, New AccionRowChangeEvent(CType(e.Row,AccionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AccionRowDeletingEvent) Is Nothing) Then
                RaiseEvent AccionRowDeleting(Me, New AccionRowChangeEvent(CType(e.Row,AccionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveAccionRow(ByVal row As AccionRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DsReportes = New DsReportes
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "AccionDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class MonedaDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnMonedaNombre As Global.System.Data.DataColumn
        
        Private columnCodMoneda As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Moneda"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MonedaNombreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMonedaNombre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As MonedaRow
            Get
                Return CType(Me.Rows(index),MonedaRow)
            End Get
        End Property
        
        Public Event MonedaRowChanging As MonedaRowChangeEventHandler
        
        Public Event MonedaRowChanged As MonedaRowChangeEventHandler
        
        Public Event MonedaRowDeleting As MonedaRowChangeEventHandler
        
        Public Event MonedaRowDeleted As MonedaRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddMonedaRow(ByVal row As MonedaRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddMonedaRow(ByVal MonedaNombre As String, ByVal CodMoneda As Integer) As MonedaRow
            Dim rowMonedaRow As MonedaRow = CType(Me.NewRow,MonedaRow)
            Dim columnValuesArray() As Object = New Object() {MonedaNombre, CodMoneda}
            rowMonedaRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowMonedaRow)
            Return rowMonedaRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCodMoneda(ByVal CodMoneda As Integer) As MonedaRow
            Return CType(Me.Rows.Find(New Object() {CodMoneda}),MonedaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As MonedaDataTable = CType(MyBase.Clone,MonedaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New MonedaDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnMonedaNombre = MyBase.Columns("MonedaNombre")
            Me.columnCodMoneda = MyBase.Columns("CodMoneda")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnMonedaNombre = New Global.System.Data.DataColumn("MonedaNombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMonedaNombre)
            Me.columnCodMoneda = New Global.System.Data.DataColumn("CodMoneda", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodMoneda)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCodMoneda}, true))
            Me.columnMonedaNombre.AllowDBNull = false
            Me.columnCodMoneda.AllowDBNull = false
            Me.columnCodMoneda.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewMonedaRow() As MonedaRow
            Return CType(Me.NewRow,MonedaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New MonedaRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(MonedaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MonedaRowChangedEvent) Is Nothing) Then
                RaiseEvent MonedaRowChanged(Me, New MonedaRowChangeEvent(CType(e.Row,MonedaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MonedaRowChangingEvent) Is Nothing) Then
                RaiseEvent MonedaRowChanging(Me, New MonedaRowChangeEvent(CType(e.Row,MonedaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MonedaRowDeletedEvent) Is Nothing) Then
                RaiseEvent MonedaRowDeleted(Me, New MonedaRowChangeEvent(CType(e.Row,MonedaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MonedaRowDeletingEvent) Is Nothing) Then
                RaiseEvent MonedaRowDeleting(Me, New MonedaRowChangeEvent(CType(e.Row,MonedaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveMonedaRow(ByVal row As MonedaRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DsReportes = New DsReportes
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "MonedaDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class AdelantosRow
        Inherits Global.System.Data.DataRow
        
        Private tableAdelantos As AdelantosDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableAdelantos = CType(Me.Table,AdelantosDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Numero() As Long
            Get
                Return CType(Me(Me.tableAdelantos.NumeroColumn),Long)
            End Get
            Set
                Me(Me.tableAdelantos.NumeroColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Identificacion() As String
            Get
                Return CType(Me(Me.tableAdelantos.IdentificacionColumn),String)
            End Get
            Set
                Me(Me.tableAdelantos.IdentificacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nombre() As String
            Get
                Return CType(Me(Me.tableAdelantos.NombreColumn),String)
            End Get
            Set
                Me(Me.tableAdelantos.NombreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Adelanto() As Boolean
            Get
                Return CType(Me(Me.tableAdelantos.AdelantoColumn),Boolean)
            End Get
            Set
                Me(Me.tableAdelantos.AdelantoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Prestamo() As Boolean
            Get
                Return CType(Me(Me.tableAdelantos.PrestamoColumn),Boolean)
            End Get
            Set
                Me(Me.tableAdelantos.PrestamoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Puesto() As String
            Get
                Return CType(Me(Me.tableAdelantos.PuestoColumn),String)
            End Get
            Set
                Me(Me.tableAdelantos.PuestoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Salario() As Double
            Get
                Return CType(Me(Me.tableAdelantos.SalarioColumn),Double)
            End Get
            Set
                Me(Me.tableAdelantos.SalarioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaComprobante() As Date
            Get
                Return CType(Me(Me.tableAdelantos.FechaComprobanteColumn),Date)
            End Get
            Set
                Me(Me.tableAdelantos.FechaComprobanteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Num_Pago() As Integer
            Get
                Return CType(Me(Me.tableAdelantos.Num_PagoColumn),Integer)
            End Get
            Set
                Me(Me.tableAdelantos.Num_PagoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Monto() As Double
            Get
                Return CType(Me(Me.tableAdelantos.MontoColumn),Double)
            End Get
            Set
                Me(Me.tableAdelantos.MontoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontoEnLetras() As String
            Get
                Return CType(Me(Me.tableAdelantos.MontoEnLetrasColumn),String)
            End Get
            Set
                Me(Me.tableAdelantos.MontoEnLetrasColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaCobro() As Date
            Get
                Return CType(Me(Me.tableAdelantos.FechaCobroColumn),Date)
            End Get
            Set
                Me(Me.tableAdelantos.FechaCobroColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Observaciones() As String
            Get
                Return CType(Me(Me.tableAdelantos.ObservacionesColumn),String)
            End Get
            Set
                Me(Me.tableAdelantos.ObservacionesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DeducirxPago() As Double
            Get
                Return CType(Me(Me.tableAdelantos.DeducirxPagoColumn),Double)
            End Get
            Set
                Me(Me.tableAdelantos.DeducirxPagoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Usuario() As String
            Get
                Return CType(Me(Me.tableAdelantos.UsuarioColumn),String)
            End Get
            Set
                Me(Me.tableAdelantos.UsuarioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombreUsuario() As String
            Get
                Return CType(Me(Me.tableAdelantos.NombreUsuarioColumn),String)
            End Get
            Set
                Me(Me.tableAdelantos.NombreUsuarioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cod_Moneda() As Integer
            Get
                Return CType(Me(Me.tableAdelantos.Cod_MonedaColumn),Integer)
            End Get
            Set
                Me(Me.tableAdelantos.Cod_MonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Anulado() As Boolean
            Get
                Return CType(Me(Me.tableAdelantos.AnuladoColumn),Boolean)
            End Get
            Set
                Me(Me.tableAdelantos.AnuladoColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class DeduccionesRow
        Inherits Global.System.Data.DataRow
        
        Private tableDeducciones As DeduccionesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDeducciones = CType(Me.Table,DeduccionesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Codigo() As Integer
            Get
                Return CType(Me(Me.tableDeducciones.CodigoColumn),Integer)
            End Get
            Set
                Me(Me.tableDeducciones.CodigoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Descripcion() As String
            Get
                Return CType(Me(Me.tableDeducciones.DescripcionColumn),String)
            End Get
            Set
                Me(Me.tableDeducciones.DescripcionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Monto() As Double
            Get
                Return CType(Me(Me.tableDeducciones.MontoColumn),Double)
            End Get
            Set
                Me(Me.tableDeducciones.MontoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tipo() As String
            Get
                Return CType(Me(Me.tableDeducciones.TipoColumn),String)
            End Get
            Set
                Me(Me.tableDeducciones.TipoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Aplica() As Boolean
            Get
                Return CType(Me(Me.tableDeducciones.AplicaColumn),Boolean)
            End Get
            Set
                Me(Me.tableDeducciones.AplicaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cod_Moneda() As Integer
            Get
                Return CType(Me(Me.tableDeducciones.Cod_MonedaColumn),Integer)
            End Get
            Set
                Me(Me.tableDeducciones.Cod_MonedaColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class EmpleadoRow
        Inherits Global.System.Data.DataRow
        
        Private tableEmpleado As EmpleadoDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableEmpleado = CType(Me.Table,EmpleadoDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Identificacion() As String
            Get
                Return CType(Me(Me.tableEmpleado.IdentificacionColumn),String)
            End Get
            Set
                Me(Me.tableEmpleado.IdentificacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nombre() As String
            Get
                Return CType(Me(Me.tableEmpleado.NombreColumn),String)
            End Get
            Set
                Me(Me.tableEmpleado.NombreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Estado_Civil() As String
            Get
                Return CType(Me(Me.tableEmpleado.Estado_CivilColumn),String)
            End Get
            Set
                Me(Me.tableEmpleado.Estado_CivilColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Hijos() As Integer
            Get
                Return CType(Me(Me.tableEmpleado.HijosColumn),Integer)
            End Get
            Set
                Me(Me.tableEmpleado.HijosColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cod_Nacionalidad() As Integer
            Get
                Return CType(Me(Me.tableEmpleado.Cod_NacionalidadColumn),Integer)
            End Get
            Set
                Me(Me.tableEmpleado.Cod_NacionalidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Fecha_Nacimiento() As Date
            Get
                Return CType(Me(Me.tableEmpleado.Fecha_NacimientoColumn),Date)
            End Get
            Set
                Me(Me.tableEmpleado.Fecha_NacimientoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Edad() As Integer
            Get
                Return CType(Me(Me.tableEmpleado.EdadColumn),Integer)
            End Get
            Set
                Me(Me.tableEmpleado.EdadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Telefono1() As String
            Get
                Return CType(Me(Me.tableEmpleado.Telefono1Column),String)
            End Get
            Set
                Me(Me.tableEmpleado.Telefono1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Telefono2() As String
            Get
                Return CType(Me(Me.tableEmpleado.Telefono2Column),String)
            End Get
            Set
                Me(Me.tableEmpleado.Telefono2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Email() As String
            Get
                Return CType(Me(Me.tableEmpleado.EmailColumn),String)
            End Get
            Set
                Me(Me.tableEmpleado.EmailColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Direccion() As String
            Get
                Return CType(Me(Me.tableEmpleado.DireccionColumn),String)
            End Get
            Set
                Me(Me.tableEmpleado.DireccionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Puesto() As String
            Get
                Return CType(Me(Me.tableEmpleado.PuestoColumn),String)
            End Get
            Set
                Me(Me.tableEmpleado.PuestoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Fecha_Ingreso() As Date
            Get
                Return CType(Me(Me.tableEmpleado.Fecha_IngresoColumn),Date)
            End Get
            Set
                Me(Me.tableEmpleado.Fecha_IngresoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Fecha_Salida() As Date
            Get
                Return CType(Me(Me.tableEmpleado.Fecha_SalidaColumn),Date)
            End Get
            Set
                Me(Me.tableEmpleado.Fecha_SalidaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Salario() As Double
            Get
                Return CType(Me(Me.tableEmpleado.SalarioColumn),Double)
            End Get
            Set
                Me(Me.tableEmpleado.SalarioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cod_Departamento() As Integer
            Get
                Return CType(Me(Me.tableEmpleado.Cod_DepartamentoColumn),Integer)
            End Get
            Set
                Me(Me.tableEmpleado.Cod_DepartamentoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Masculino() As Boolean
            Get
                Return CType(Me(Me.tableEmpleado.MasculinoColumn),Boolean)
            End Get
            Set
                Me(Me.tableEmpleado.MasculinoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Femenino() As Boolean
            Get
                Return CType(Me(Me.tableEmpleado.FemeninoColumn),Boolean)
            End Get
            Set
                Me(Me.tableEmpleado.FemeninoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cod_Moneda() As Integer
            Get
                Return CType(Me(Me.tableEmpleado.Cod_MonedaColumn),Integer)
            End Get
            Set
                Me(Me.tableEmpleado.Cod_MonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Hora() As Boolean
            Get
                Return CType(Me(Me.tableEmpleado.HoraColumn),Boolean)
            End Get
            Set
                Me(Me.tableEmpleado.HoraColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Diario() As Boolean
            Get
                Return CType(Me(Me.tableEmpleado.DiarioColumn),Boolean)
            End Get
            Set
                Me(Me.tableEmpleado.DiarioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Semana() As Boolean
            Get
                Return CType(Me(Me.tableEmpleado.SemanaColumn),Boolean)
            End Get
            Set
                Me(Me.tableEmpleado.SemanaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Quincena() As Boolean
            Get
                Return CType(Me(Me.tableEmpleado.QuincenaColumn),Boolean)
            End Get
            Set
                Me(Me.tableEmpleado.QuincenaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Mensual() As Boolean
            Get
                Return CType(Me(Me.tableEmpleado.MensualColumn),Boolean)
            End Get
            Set
                Me(Me.tableEmpleado.MensualColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cod_Estado() As Integer
            Get
                Return CType(Me(Me.tableEmpleado.Cod_EstadoColumn),Integer)
            End Get
            Set
                Me(Me.tableEmpleado.Cod_EstadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Foto() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableEmpleado.FotoColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Foto' in table 'Empleado' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEmpleado.FotoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFotoNull() As Boolean
            Return Me.IsNull(Me.tableEmpleado.FotoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFotoNull()
            Me(Me.tableEmpleado.FotoColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Empleado_DeduccionesRow
        Inherits Global.System.Data.DataRow
        
        Private tableEmpleado_Deducciones As Empleado_DeduccionesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableEmpleado_Deducciones = CType(Me.Table,Empleado_DeduccionesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Id() As Long
            Get
                Return CType(Me(Me.tableEmpleado_Deducciones.IdColumn),Long)
            End Get
            Set
                Me(Me.tableEmpleado_Deducciones.IdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Identificacion() As String
            Get
                Return CType(Me(Me.tableEmpleado_Deducciones.IdentificacionColumn),String)
            End Get
            Set
                Me(Me.tableEmpleado_Deducciones.IdentificacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Codigo() As Integer
            Get
                Return CType(Me(Me.tableEmpleado_Deducciones.CodigoColumn),Integer)
            End Get
            Set
                Me(Me.tableEmpleado_Deducciones.CodigoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Descripcion() As String
            Get
                Return CType(Me(Me.tableEmpleado_Deducciones.DescripcionColumn),String)
            End Get
            Set
                Me(Me.tableEmpleado_Deducciones.DescripcionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Monto() As Double
            Get
                Return CType(Me(Me.tableEmpleado_Deducciones.MontoColumn),Double)
            End Get
            Set
                Me(Me.tableEmpleado_Deducciones.MontoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tipo() As String
            Get
                Return CType(Me(Me.tableEmpleado_Deducciones.TipoColumn),String)
            End Get
            Set
                Me(Me.tableEmpleado_Deducciones.TipoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cod_Moneda() As Integer
            Get
                Return CType(Me(Me.tableEmpleado_Deducciones.Cod_MonedaColumn),Integer)
            End Get
            Set
                Me(Me.tableEmpleado_Deducciones.Cod_MonedaColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class HorasTrabajadasRow
        Inherits Global.System.Data.DataRow
        
        Private tableHorasTrabajadas As HorasTrabajadasDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableHorasTrabajadas = CType(Me.Table,HorasTrabajadasDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Id() As Long
            Get
                Return CType(Me(Me.tableHorasTrabajadas.IdColumn),Long)
            End Get
            Set
                Me(Me.tableHorasTrabajadas.IdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Identificacion() As String
            Get
                Return CType(Me(Me.tableHorasTrabajadas.IdentificacionColumn),String)
            End Get
            Set
                Me(Me.tableHorasTrabajadas.IdentificacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Fecha() As Date
            Get
                Return CType(Me(Me.tableHorasTrabajadas.FechaColumn),Date)
            End Get
            Set
                Me(Me.tableHorasTrabajadas.FechaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HoraOrdinaria() As Double
            Get
                Return CType(Me(Me.tableHorasTrabajadas.HoraOrdinariaColumn),Double)
            End Get
            Set
                Me(Me.tableHorasTrabajadas.HoraOrdinariaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HoraExtra() As String
            Get
                Return CType(Me(Me.tableHorasTrabajadas.HoraExtraColumn),String)
            End Get
            Set
                Me(Me.tableHorasTrabajadas.HoraExtraColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HoraDoble() As String
            Get
                Return CType(Me(Me.tableHorasTrabajadas.HoraDobleColumn),String)
            End Get
            Set
                Me(Me.tableHorasTrabajadas.HoraDobleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Id_Proyecto() As Integer
            Get
                Return CType(Me(Me.tableHorasTrabajadas.Id_ProyectoColumn),Integer)
            End Get
            Set
                Me(Me.tableHorasTrabajadas.Id_ProyectoColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ParametroRentaRow
        Inherits Global.System.Data.DataRow
        
        Private tableParametroRenta As ParametroRentaDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableParametroRenta = CType(Me.Table,ParametroRentaDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Id() As Integer
            Get
                Return CType(Me(Me.tableParametroRenta.IdColumn),Integer)
            End Get
            Set
                Me(Me.tableParametroRenta.IdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontoExento() As Double
            Get
                Return CType(Me(Me.tableParametroRenta.MontoExentoColumn),Double)
            End Get
            Set
                Me(Me.tableParametroRenta.MontoExentoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontoDe() As Double
            Get
                Return CType(Me(Me.tableParametroRenta.MontoDeColumn),Double)
            End Get
            Set
                Me(Me.tableParametroRenta.MontoDeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontoHasta() As Double
            Get
                Return CType(Me(Me.tableParametroRenta.MontoHastaColumn),Double)
            End Get
            Set
                Me(Me.tableParametroRenta.MontoHastaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Porcentaje1() As Double
            Get
                Return CType(Me(Me.tableParametroRenta.Porcentaje1Column),Double)
            End Get
            Set
                Me(Me.tableParametroRenta.Porcentaje1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontoEnAdelante() As Double
            Get
                Return CType(Me(Me.tableParametroRenta.MontoEnAdelanteColumn),Double)
            End Get
            Set
                Me(Me.tableParametroRenta.MontoEnAdelanteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Porcentaje2() As Double
            Get
                Return CType(Me(Me.tableParametroRenta.Porcentaje2Column),Double)
            End Get
            Set
                Me(Me.tableParametroRenta.Porcentaje2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Esposa() As Double
            Get
                Return CType(Me(Me.tableParametroRenta.EsposaColumn),Double)
            End Get
            Set
                Me(Me.tableParametroRenta.EsposaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Hijo() As Double
            Get
                Return CType(Me(Me.tableParametroRenta.HijoColumn),Double)
            End Get
            Set
                Me(Me.tableParametroRenta.HijoColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PlanillaRow
        Inherits Global.System.Data.DataRow
        
        Private tablePlanilla As PlanillaDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePlanilla = CType(Me.Table,PlanillaDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Id_Planilla() As Long
            Get
                Return CType(Me(Me.tablePlanilla.Id_PlanillaColumn),Long)
            End Get
            Set
                Me(Me.tablePlanilla.Id_PlanillaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Fecha() As Date
            Get
                Return CType(Me(Me.tablePlanilla.FechaColumn),Date)
            End Get
            Set
                Me(Me.tablePlanilla.FechaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaInicial() As Date
            Get
                Return CType(Me(Me.tablePlanilla.FechaInicialColumn),Date)
            End Get
            Set
                Me(Me.tablePlanilla.FechaInicialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaFinal() As Date
            Get
                Return CType(Me(Me.tablePlanilla.FechaFinalColumn),Date)
            End Get
            Set
                Me(Me.tablePlanilla.FechaFinalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CierreMes() As Boolean
            Get
                Return CType(Me(Me.tablePlanilla.CierreMesColumn),Boolean)
            End Get
            Set
                Me(Me.tablePlanilla.CierreMesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ced_Usuario() As String
            Get
                Return CType(Me(Me.tablePlanilla.Ced_UsuarioColumn),String)
            End Get
            Set
                Me(Me.tablePlanilla.Ced_UsuarioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nombre_Usuario() As String
            Get
                Return CType(Me(Me.tablePlanilla.Nombre_UsuarioColumn),String)
            End Get
            Set
                Me(Me.tablePlanilla.Nombre_UsuarioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Anulado() As Boolean
            Get
                Return CType(Me(Me.tablePlanilla.AnuladoColumn),Boolean)
            End Get
            Set
                Me(Me.tablePlanilla.AnuladoColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Planilla_DeduccionesRow
        Inherits Global.System.Data.DataRow
        
        Private tablePlanilla_Deducciones As Planilla_DeduccionesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePlanilla_Deducciones = CType(Me.Table,Planilla_DeduccionesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Id() As Long
            Get
                Return CType(Me(Me.tablePlanilla_Deducciones.IdColumn),Long)
            End Get
            Set
                Me(Me.tablePlanilla_Deducciones.IdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Id_PlanillaDetalle() As Long
            Get
                Return CType(Me(Me.tablePlanilla_Deducciones.Id_PlanillaDetalleColumn),Long)
            End Get
            Set
                Me(Me.tablePlanilla_Deducciones.Id_PlanillaDetalleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cod_Deduccion() As Integer
            Get
                Return CType(Me(Me.tablePlanilla_Deducciones.Cod_DeduccionColumn),Integer)
            End Get
            Set
                Me(Me.tablePlanilla_Deducciones.Cod_DeduccionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nombre() As String
            Get
                Return CType(Me(Me.tablePlanilla_Deducciones.NombreColumn),String)
            End Get
            Set
                Me(Me.tablePlanilla_Deducciones.NombreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Monto() As Double
            Get
                Return CType(Me(Me.tablePlanilla_Deducciones.MontoColumn),Double)
            End Get
            Set
                Me(Me.tablePlanilla_Deducciones.MontoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cod_Moneda() As Integer
            Get
                Return CType(Me(Me.tablePlanilla_Deducciones.Cod_MonedaColumn),Integer)
            End Get
            Set
                Me(Me.tablePlanilla_Deducciones.Cod_MonedaColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Planilla_DetalleRow
        Inherits Global.System.Data.DataRow
        
        Private tablePlanilla_Detalle As Planilla_DetalleDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePlanilla_Detalle = CType(Me.Table,Planilla_DetalleDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Id() As Long
            Get
                Return CType(Me(Me.tablePlanilla_Detalle.IdColumn),Long)
            End Get
            Set
                Me(Me.tablePlanilla_Detalle.IdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Id_Planilla() As Long
            Get
                Return CType(Me(Me.tablePlanilla_Detalle.Id_PlanillaColumn),Long)
            End Get
            Set
                Me(Me.tablePlanilla_Detalle.Id_PlanillaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cedula() As String
            Get
                Return CType(Me(Me.tablePlanilla_Detalle.CedulaColumn),String)
            End Get
            Set
                Me(Me.tablePlanilla_Detalle.CedulaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nombre() As String
            Get
                Return CType(Me(Me.tablePlanilla_Detalle.NombreColumn),String)
            End Get
            Set
                Me(Me.tablePlanilla_Detalle.NombreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Puesto() As String
            Get
                Return CType(Me(Me.tablePlanilla_Detalle.PuestoColumn),String)
            End Get
            Set
                Me(Me.tablePlanilla_Detalle.PuestoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Salario() As Double
            Get
                Return CType(Me(Me.tablePlanilla_Detalle.SalarioColumn),Double)
            End Get
            Set
                Me(Me.tablePlanilla_Detalle.SalarioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FormaPago() As String
            Get
                Return CType(Me(Me.tablePlanilla_Detalle.FormaPagoColumn),String)
            End Get
            Set
                Me(Me.tablePlanilla_Detalle.FormaPagoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ordinaria() As Double
            Get
                Return CType(Me(Me.tablePlanilla_Detalle.OrdinariaColumn),Double)
            End Get
            Set
                Me(Me.tablePlanilla_Detalle.OrdinariaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Extra() As Double
            Get
                Return CType(Me(Me.tablePlanilla_Detalle.ExtraColumn),Double)
            End Get
            Set
                Me(Me.tablePlanilla_Detalle.ExtraColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Doble() As Double
            Get
                Return CType(Me(Me.tablePlanilla_Detalle.DobleColumn),Double)
            End Get
            Set
                Me(Me.tablePlanilla_Detalle.DobleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SalarioBruto() As Double
            Get
                Return CType(Me(Me.tablePlanilla_Detalle.SalarioBrutoColumn),Double)
            End Get
            Set
                Me(Me.tablePlanilla_Detalle.SalarioBrutoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Adelantos() As Double
            Get
                Return CType(Me(Me.tablePlanilla_Detalle.AdelantosColumn),Double)
            End Get
            Set
                Me(Me.tablePlanilla_Detalle.AdelantosColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Prestamos() As Double
            Get
                Return CType(Me(Me.tablePlanilla_Detalle.PrestamosColumn),Double)
            End Get
            Set
                Me(Me.tablePlanilla_Detalle.PrestamosColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Renta() As Double
            Get
                Return CType(Me(Me.tablePlanilla_Detalle.RentaColumn),Double)
            End Get
            Set
                Me(Me.tablePlanilla_Detalle.RentaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalDeducciones() As Double
            Get
                Return CType(Me(Me.tablePlanilla_Detalle.TotalDeduccionesColumn),Double)
            End Get
            Set
                Me(Me.tablePlanilla_Detalle.TotalDeduccionesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SalarioNeto() As Double
            Get
                Return CType(Me(Me.tablePlanilla_Detalle.SalarioNetoColumn),Double)
            End Get
            Set
                Me(Me.tablePlanilla_Detalle.SalarioNetoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cod_Moneda() As Integer
            Get
                Return CType(Me(Me.tablePlanilla_Detalle.Cod_MonedaColumn),Integer)
            End Get
            Set
                Me(Me.tablePlanilla_Detalle.Cod_MonedaColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class AccionRow
        Inherits Global.System.Data.DataRow
        
        Private tableAccion As AccionDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableAccion = CType(Me.Table,AccionDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Codigo() As Integer
            Get
                Return CType(Me(Me.tableAccion.CodigoColumn),Integer)
            End Get
            Set
                Me(Me.tableAccion.CodigoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Descripcion() As String
            Get
                Return CType(Me(Me.tableAccion.DescripcionColumn),String)
            End Get
            Set
                Me(Me.tableAccion.DescripcionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RangoFecha() As Boolean
            Get
                Return CType(Me(Me.tableAccion.RangoFechaColumn),Boolean)
            End Get
            Set
                Me(Me.tableAccion.RangoFechaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nombre() As String
            Get
                Return CType(Me(Me.tableAccion.NombreColumn),String)
            End Get
            Set
                Me(Me.tableAccion.NombreColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class MonedaRow
        Inherits Global.System.Data.DataRow
        
        Private tableMoneda As MonedaDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMoneda = CType(Me.Table,MonedaDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MonedaNombre() As String
            Get
                Return CType(Me(Me.tableMoneda.MonedaNombreColumn),String)
            End Get
            Set
                Me(Me.tableMoneda.MonedaNombreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodMoneda() As Integer
            Get
                Return CType(Me(Me.tableMoneda.CodMonedaColumn),Integer)
            End Get
            Set
                Me(Me.tableMoneda.CodMonedaColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class AdelantosRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As AdelantosRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As AdelantosRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As AdelantosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class DeduccionesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As DeduccionesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As DeduccionesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As DeduccionesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class EmpleadoRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As EmpleadoRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As EmpleadoRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As EmpleadoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Empleado_DeduccionesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Empleado_DeduccionesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Empleado_DeduccionesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Empleado_DeduccionesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class HorasTrabajadasRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As HorasTrabajadasRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As HorasTrabajadasRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As HorasTrabajadasRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ParametroRentaRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ParametroRentaRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ParametroRentaRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ParametroRentaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PlanillaRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PlanillaRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PlanillaRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PlanillaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Planilla_DeduccionesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Planilla_DeduccionesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Planilla_DeduccionesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Planilla_DeduccionesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Planilla_DetalleRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Planilla_DetalleRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Planilla_DetalleRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Planilla_DetalleRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class AccionRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As AccionRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As AccionRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As AccionRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class MonedaRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As MonedaRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As MonedaRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As MonedaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
