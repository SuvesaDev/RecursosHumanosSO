'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.8936
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("dsPlanilla"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsPlanilla
    Inherits Global.System.Data.DataSet
    
    Private tableAdelantoPrueba As AdelantoPruebaDataTable
    
    Private tableConsultaSaldos As ConsultaSaldosDataTable
    
    Private tableFacturas_Cobrar As Facturas_CobrarDataTable
    
    Private tableabonoccobrar As abonoccobrarDataTable
    
    Private tableAccionPersonal As AccionPersonalDataTable
    
    Private tableAdelantos As AdelantosDataTable
    
    Private tableAdelantos_Detalle As Adelantos_DetalleDataTable
    
    Private tableDeducciones As DeduccionesDataTable
    
    Private tabledetalle_abonoccobrar As detalle_abonoccobrarDataTable
    
    Private tableEmpleado As EmpleadoDataTable
    
    Private tableEmpleado_Deducciones As Empleado_DeduccionesDataTable
    
    Private tableHoras_Ordinarias As Horas_OrdinariasDataTable
    
    Private tableHorasTrabajadas As HorasTrabajadasDataTable
    
    Private tableMoneda As MonedaDataTable
    
    Private tableParametroRenta As ParametroRentaDataTable
    
    Private tablePlanilla As PlanillaDataTable
    
    Private tablePlanilla_Deducciones As Planilla_DeduccionesDataTable
    
    Private tablePlanilla_Detalle As Planilla_DetalleDataTable
    
    Private tableDeduccion_Empleado As Deduccion_EmpleadoDataTable
    
    Private relationabonoccobrardetalle_abonoccobrar As Global.System.Data.DataRelation
    
    Private relationPlanilla_DetallePlanilla_Deducciones As Global.System.Data.DataRelation
    
    Private relationPlanillaPlanilla_Detalle As Global.System.Data.DataRelation
    
    Private relationPlanilla_DetalleDeduccion_Empleado As Global.System.Data.DataRelation
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("AdelantoPrueba")) Is Nothing) Then
                MyBase.Tables.Add(New AdelantoPruebaDataTable(ds.Tables("AdelantoPrueba")))
            End If
            If (Not (ds.Tables("ConsultaSaldos")) Is Nothing) Then
                MyBase.Tables.Add(New ConsultaSaldosDataTable(ds.Tables("ConsultaSaldos")))
            End If
            If (Not (ds.Tables("Facturas_Cobrar")) Is Nothing) Then
                MyBase.Tables.Add(New Facturas_CobrarDataTable(ds.Tables("Facturas_Cobrar")))
            End If
            If (Not (ds.Tables("abonoccobrar")) Is Nothing) Then
                MyBase.Tables.Add(New abonoccobrarDataTable(ds.Tables("abonoccobrar")))
            End If
            If (Not (ds.Tables("AccionPersonal")) Is Nothing) Then
                MyBase.Tables.Add(New AccionPersonalDataTable(ds.Tables("AccionPersonal")))
            End If
            If (Not (ds.Tables("Adelantos")) Is Nothing) Then
                MyBase.Tables.Add(New AdelantosDataTable(ds.Tables("Adelantos")))
            End If
            If (Not (ds.Tables("Adelantos_Detalle")) Is Nothing) Then
                MyBase.Tables.Add(New Adelantos_DetalleDataTable(ds.Tables("Adelantos_Detalle")))
            End If
            If (Not (ds.Tables("Deducciones")) Is Nothing) Then
                MyBase.Tables.Add(New DeduccionesDataTable(ds.Tables("Deducciones")))
            End If
            If (Not (ds.Tables("detalle_abonoccobrar")) Is Nothing) Then
                MyBase.Tables.Add(New detalle_abonoccobrarDataTable(ds.Tables("detalle_abonoccobrar")))
            End If
            If (Not (ds.Tables("Empleado")) Is Nothing) Then
                MyBase.Tables.Add(New EmpleadoDataTable(ds.Tables("Empleado")))
            End If
            If (Not (ds.Tables("Empleado_Deducciones")) Is Nothing) Then
                MyBase.Tables.Add(New Empleado_DeduccionesDataTable(ds.Tables("Empleado_Deducciones")))
            End If
            If (Not (ds.Tables("Horas_Ordinarias")) Is Nothing) Then
                MyBase.Tables.Add(New Horas_OrdinariasDataTable(ds.Tables("Horas_Ordinarias")))
            End If
            If (Not (ds.Tables("HorasTrabajadas")) Is Nothing) Then
                MyBase.Tables.Add(New HorasTrabajadasDataTable(ds.Tables("HorasTrabajadas")))
            End If
            If (Not (ds.Tables("Moneda")) Is Nothing) Then
                MyBase.Tables.Add(New MonedaDataTable(ds.Tables("Moneda")))
            End If
            If (Not (ds.Tables("ParametroRenta")) Is Nothing) Then
                MyBase.Tables.Add(New ParametroRentaDataTable(ds.Tables("ParametroRenta")))
            End If
            If (Not (ds.Tables("Planilla")) Is Nothing) Then
                MyBase.Tables.Add(New PlanillaDataTable(ds.Tables("Planilla")))
            End If
            If (Not (ds.Tables("Planilla_Deducciones")) Is Nothing) Then
                MyBase.Tables.Add(New Planilla_DeduccionesDataTable(ds.Tables("Planilla_Deducciones")))
            End If
            If (Not (ds.Tables("Planilla_Detalle")) Is Nothing) Then
                MyBase.Tables.Add(New Planilla_DetalleDataTable(ds.Tables("Planilla_Detalle")))
            End If
            If (Not (ds.Tables("Deduccion_Empleado")) Is Nothing) Then
                MyBase.Tables.Add(New Deduccion_EmpleadoDataTable(ds.Tables("Deduccion_Empleado")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property AdelantoPrueba() As AdelantoPruebaDataTable
        Get
            Return Me.tableAdelantoPrueba
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ConsultaSaldos() As ConsultaSaldosDataTable
        Get
            Return Me.tableConsultaSaldos
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Facturas_Cobrar() As Facturas_CobrarDataTable
        Get
            Return Me.tableFacturas_Cobrar
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property abonoccobrar() As abonoccobrarDataTable
        Get
            Return Me.tableabonoccobrar
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property AccionPersonal() As AccionPersonalDataTable
        Get
            Return Me.tableAccionPersonal
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Adelantos() As AdelantosDataTable
        Get
            Return Me.tableAdelantos
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Adelantos_Detalle() As Adelantos_DetalleDataTable
        Get
            Return Me.tableAdelantos_Detalle
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Deducciones() As DeduccionesDataTable
        Get
            Return Me.tableDeducciones
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property detalle_abonoccobrar() As detalle_abonoccobrarDataTable
        Get
            Return Me.tabledetalle_abonoccobrar
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Empleado() As EmpleadoDataTable
        Get
            Return Me.tableEmpleado
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Empleado_Deducciones() As Empleado_DeduccionesDataTable
        Get
            Return Me.tableEmpleado_Deducciones
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Horas_Ordinarias() As Horas_OrdinariasDataTable
        Get
            Return Me.tableHoras_Ordinarias
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property HorasTrabajadas() As HorasTrabajadasDataTable
        Get
            Return Me.tableHorasTrabajadas
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Moneda() As MonedaDataTable
        Get
            Return Me.tableMoneda
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ParametroRenta() As ParametroRentaDataTable
        Get
            Return Me.tableParametroRenta
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Planilla() As PlanillaDataTable
        Get
            Return Me.tablePlanilla
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Planilla_Deducciones() As Planilla_DeduccionesDataTable
        Get
            Return Me.tablePlanilla_Deducciones
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Planilla_Detalle() As Planilla_DetalleDataTable
        Get
            Return Me.tablePlanilla_Detalle
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Deduccion_Empleado() As Deduccion_EmpleadoDataTable
        Get
            Return Me.tableDeduccion_Empleado
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As dsPlanilla = CType(MyBase.Clone,dsPlanilla)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("AdelantoPrueba")) Is Nothing) Then
                MyBase.Tables.Add(New AdelantoPruebaDataTable(ds.Tables("AdelantoPrueba")))
            End If
            If (Not (ds.Tables("ConsultaSaldos")) Is Nothing) Then
                MyBase.Tables.Add(New ConsultaSaldosDataTable(ds.Tables("ConsultaSaldos")))
            End If
            If (Not (ds.Tables("Facturas_Cobrar")) Is Nothing) Then
                MyBase.Tables.Add(New Facturas_CobrarDataTable(ds.Tables("Facturas_Cobrar")))
            End If
            If (Not (ds.Tables("abonoccobrar")) Is Nothing) Then
                MyBase.Tables.Add(New abonoccobrarDataTable(ds.Tables("abonoccobrar")))
            End If
            If (Not (ds.Tables("AccionPersonal")) Is Nothing) Then
                MyBase.Tables.Add(New AccionPersonalDataTable(ds.Tables("AccionPersonal")))
            End If
            If (Not (ds.Tables("Adelantos")) Is Nothing) Then
                MyBase.Tables.Add(New AdelantosDataTable(ds.Tables("Adelantos")))
            End If
            If (Not (ds.Tables("Adelantos_Detalle")) Is Nothing) Then
                MyBase.Tables.Add(New Adelantos_DetalleDataTable(ds.Tables("Adelantos_Detalle")))
            End If
            If (Not (ds.Tables("Deducciones")) Is Nothing) Then
                MyBase.Tables.Add(New DeduccionesDataTable(ds.Tables("Deducciones")))
            End If
            If (Not (ds.Tables("detalle_abonoccobrar")) Is Nothing) Then
                MyBase.Tables.Add(New detalle_abonoccobrarDataTable(ds.Tables("detalle_abonoccobrar")))
            End If
            If (Not (ds.Tables("Empleado")) Is Nothing) Then
                MyBase.Tables.Add(New EmpleadoDataTable(ds.Tables("Empleado")))
            End If
            If (Not (ds.Tables("Empleado_Deducciones")) Is Nothing) Then
                MyBase.Tables.Add(New Empleado_DeduccionesDataTable(ds.Tables("Empleado_Deducciones")))
            End If
            If (Not (ds.Tables("Horas_Ordinarias")) Is Nothing) Then
                MyBase.Tables.Add(New Horas_OrdinariasDataTable(ds.Tables("Horas_Ordinarias")))
            End If
            If (Not (ds.Tables("HorasTrabajadas")) Is Nothing) Then
                MyBase.Tables.Add(New HorasTrabajadasDataTable(ds.Tables("HorasTrabajadas")))
            End If
            If (Not (ds.Tables("Moneda")) Is Nothing) Then
                MyBase.Tables.Add(New MonedaDataTable(ds.Tables("Moneda")))
            End If
            If (Not (ds.Tables("ParametroRenta")) Is Nothing) Then
                MyBase.Tables.Add(New ParametroRentaDataTable(ds.Tables("ParametroRenta")))
            End If
            If (Not (ds.Tables("Planilla")) Is Nothing) Then
                MyBase.Tables.Add(New PlanillaDataTable(ds.Tables("Planilla")))
            End If
            If (Not (ds.Tables("Planilla_Deducciones")) Is Nothing) Then
                MyBase.Tables.Add(New Planilla_DeduccionesDataTable(ds.Tables("Planilla_Deducciones")))
            End If
            If (Not (ds.Tables("Planilla_Detalle")) Is Nothing) Then
                MyBase.Tables.Add(New Planilla_DetalleDataTable(ds.Tables("Planilla_Detalle")))
            End If
            If (Not (ds.Tables("Deduccion_Empleado")) Is Nothing) Then
                MyBase.Tables.Add(New Deduccion_EmpleadoDataTable(ds.Tables("Deduccion_Empleado")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableAdelantoPrueba = CType(MyBase.Tables("AdelantoPrueba"),AdelantoPruebaDataTable)
        If (initTable = true) Then
            If (Not (Me.tableAdelantoPrueba) Is Nothing) Then
                Me.tableAdelantoPrueba.InitVars
            End If
        End If
        Me.tableConsultaSaldos = CType(MyBase.Tables("ConsultaSaldos"),ConsultaSaldosDataTable)
        If (initTable = true) Then
            If (Not (Me.tableConsultaSaldos) Is Nothing) Then
                Me.tableConsultaSaldos.InitVars
            End If
        End If
        Me.tableFacturas_Cobrar = CType(MyBase.Tables("Facturas_Cobrar"),Facturas_CobrarDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFacturas_Cobrar) Is Nothing) Then
                Me.tableFacturas_Cobrar.InitVars
            End If
        End If
        Me.tableabonoccobrar = CType(MyBase.Tables("abonoccobrar"),abonoccobrarDataTable)
        If (initTable = true) Then
            If (Not (Me.tableabonoccobrar) Is Nothing) Then
                Me.tableabonoccobrar.InitVars
            End If
        End If
        Me.tableAccionPersonal = CType(MyBase.Tables("AccionPersonal"),AccionPersonalDataTable)
        If (initTable = true) Then
            If (Not (Me.tableAccionPersonal) Is Nothing) Then
                Me.tableAccionPersonal.InitVars
            End If
        End If
        Me.tableAdelantos = CType(MyBase.Tables("Adelantos"),AdelantosDataTable)
        If (initTable = true) Then
            If (Not (Me.tableAdelantos) Is Nothing) Then
                Me.tableAdelantos.InitVars
            End If
        End If
        Me.tableAdelantos_Detalle = CType(MyBase.Tables("Adelantos_Detalle"),Adelantos_DetalleDataTable)
        If (initTable = true) Then
            If (Not (Me.tableAdelantos_Detalle) Is Nothing) Then
                Me.tableAdelantos_Detalle.InitVars
            End If
        End If
        Me.tableDeducciones = CType(MyBase.Tables("Deducciones"),DeduccionesDataTable)
        If (initTable = true) Then
            If (Not (Me.tableDeducciones) Is Nothing) Then
                Me.tableDeducciones.InitVars
            End If
        End If
        Me.tabledetalle_abonoccobrar = CType(MyBase.Tables("detalle_abonoccobrar"),detalle_abonoccobrarDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledetalle_abonoccobrar) Is Nothing) Then
                Me.tabledetalle_abonoccobrar.InitVars
            End If
        End If
        Me.tableEmpleado = CType(MyBase.Tables("Empleado"),EmpleadoDataTable)
        If (initTable = true) Then
            If (Not (Me.tableEmpleado) Is Nothing) Then
                Me.tableEmpleado.InitVars
            End If
        End If
        Me.tableEmpleado_Deducciones = CType(MyBase.Tables("Empleado_Deducciones"),Empleado_DeduccionesDataTable)
        If (initTable = true) Then
            If (Not (Me.tableEmpleado_Deducciones) Is Nothing) Then
                Me.tableEmpleado_Deducciones.InitVars
            End If
        End If
        Me.tableHoras_Ordinarias = CType(MyBase.Tables("Horas_Ordinarias"),Horas_OrdinariasDataTable)
        If (initTable = true) Then
            If (Not (Me.tableHoras_Ordinarias) Is Nothing) Then
                Me.tableHoras_Ordinarias.InitVars
            End If
        End If
        Me.tableHorasTrabajadas = CType(MyBase.Tables("HorasTrabajadas"),HorasTrabajadasDataTable)
        If (initTable = true) Then
            If (Not (Me.tableHorasTrabajadas) Is Nothing) Then
                Me.tableHorasTrabajadas.InitVars
            End If
        End If
        Me.tableMoneda = CType(MyBase.Tables("Moneda"),MonedaDataTable)
        If (initTable = true) Then
            If (Not (Me.tableMoneda) Is Nothing) Then
                Me.tableMoneda.InitVars
            End If
        End If
        Me.tableParametroRenta = CType(MyBase.Tables("ParametroRenta"),ParametroRentaDataTable)
        If (initTable = true) Then
            If (Not (Me.tableParametroRenta) Is Nothing) Then
                Me.tableParametroRenta.InitVars
            End If
        End If
        Me.tablePlanilla = CType(MyBase.Tables("Planilla"),PlanillaDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePlanilla) Is Nothing) Then
                Me.tablePlanilla.InitVars
            End If
        End If
        Me.tablePlanilla_Deducciones = CType(MyBase.Tables("Planilla_Deducciones"),Planilla_DeduccionesDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePlanilla_Deducciones) Is Nothing) Then
                Me.tablePlanilla_Deducciones.InitVars
            End If
        End If
        Me.tablePlanilla_Detalle = CType(MyBase.Tables("Planilla_Detalle"),Planilla_DetalleDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePlanilla_Detalle) Is Nothing) Then
                Me.tablePlanilla_Detalle.InitVars
            End If
        End If
        Me.tableDeduccion_Empleado = CType(MyBase.Tables("Deduccion_Empleado"),Deduccion_EmpleadoDataTable)
        If (initTable = true) Then
            If (Not (Me.tableDeduccion_Empleado) Is Nothing) Then
                Me.tableDeduccion_Empleado.InitVars
            End If
        End If
        Me.relationabonoccobrardetalle_abonoccobrar = Me.Relations("abonoccobrardetalle_abonoccobrar")
        Me.relationPlanilla_DetallePlanilla_Deducciones = Me.Relations("Planilla_DetallePlanilla_Deducciones")
        Me.relationPlanillaPlanilla_Detalle = Me.Relations("PlanillaPlanilla_Detalle")
        Me.relationPlanilla_DetalleDeduccion_Empleado = Me.Relations("Planilla_DetalleDeduccion_Empleado")
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dsPlanilla"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/dsPlanilla.xsd"
        Me.Locale = New Global.System.Globalization.CultureInfo("es-MX")
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableAdelantoPrueba = New AdelantoPruebaDataTable
        MyBase.Tables.Add(Me.tableAdelantoPrueba)
        Me.tableConsultaSaldos = New ConsultaSaldosDataTable
        MyBase.Tables.Add(Me.tableConsultaSaldos)
        Me.tableFacturas_Cobrar = New Facturas_CobrarDataTable
        MyBase.Tables.Add(Me.tableFacturas_Cobrar)
        Me.tableabonoccobrar = New abonoccobrarDataTable
        MyBase.Tables.Add(Me.tableabonoccobrar)
        Me.tableAccionPersonal = New AccionPersonalDataTable
        MyBase.Tables.Add(Me.tableAccionPersonal)
        Me.tableAdelantos = New AdelantosDataTable
        MyBase.Tables.Add(Me.tableAdelantos)
        Me.tableAdelantos_Detalle = New Adelantos_DetalleDataTable
        MyBase.Tables.Add(Me.tableAdelantos_Detalle)
        Me.tableDeducciones = New DeduccionesDataTable
        MyBase.Tables.Add(Me.tableDeducciones)
        Me.tabledetalle_abonoccobrar = New detalle_abonoccobrarDataTable
        MyBase.Tables.Add(Me.tabledetalle_abonoccobrar)
        Me.tableEmpleado = New EmpleadoDataTable
        MyBase.Tables.Add(Me.tableEmpleado)
        Me.tableEmpleado_Deducciones = New Empleado_DeduccionesDataTable
        MyBase.Tables.Add(Me.tableEmpleado_Deducciones)
        Me.tableHoras_Ordinarias = New Horas_OrdinariasDataTable
        MyBase.Tables.Add(Me.tableHoras_Ordinarias)
        Me.tableHorasTrabajadas = New HorasTrabajadasDataTable
        MyBase.Tables.Add(Me.tableHorasTrabajadas)
        Me.tableMoneda = New MonedaDataTable
        MyBase.Tables.Add(Me.tableMoneda)
        Me.tableParametroRenta = New ParametroRentaDataTable
        MyBase.Tables.Add(Me.tableParametroRenta)
        Me.tablePlanilla = New PlanillaDataTable
        MyBase.Tables.Add(Me.tablePlanilla)
        Me.tablePlanilla_Deducciones = New Planilla_DeduccionesDataTable
        MyBase.Tables.Add(Me.tablePlanilla_Deducciones)
        Me.tablePlanilla_Detalle = New Planilla_DetalleDataTable
        MyBase.Tables.Add(Me.tablePlanilla_Detalle)
        Me.tableDeduccion_Empleado = New Deduccion_EmpleadoDataTable
        MyBase.Tables.Add(Me.tableDeduccion_Empleado)
        Dim fkc As Global.System.Data.ForeignKeyConstraint
        fkc = New Global.System.Data.ForeignKeyConstraint("abonoccobrardetalle_abonoccobrar", New Global.System.Data.DataColumn() {Me.tableabonoccobrar.Id_ReciboColumn}, New Global.System.Data.DataColumn() {Me.tabledetalle_abonoccobrar.Id_ReciboColumn})
        Me.tabledetalle_abonoccobrar.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.Cascade
        fkc = New Global.System.Data.ForeignKeyConstraint("Planilla_DetallePlanilla_Deducciones", New Global.System.Data.DataColumn() {Me.tablePlanilla_Detalle.IdColumn}, New Global.System.Data.DataColumn() {Me.tablePlanilla_Deducciones.Id_PlanillaDetalleColumn})
        Me.tablePlanilla_Deducciones.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.Cascade
        fkc = New Global.System.Data.ForeignKeyConstraint("PlanillaPlanilla_Detalle", New Global.System.Data.DataColumn() {Me.tablePlanilla.Id_PlanillaColumn}, New Global.System.Data.DataColumn() {Me.tablePlanilla_Detalle.Id_PlanillaColumn})
        Me.tablePlanilla_Detalle.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.Cascade
        fkc = New Global.System.Data.ForeignKeyConstraint("Planilla_DetalleDeduccion_Empleado", New Global.System.Data.DataColumn() {Me.tablePlanilla_Detalle.IdColumn}, New Global.System.Data.DataColumn() {Me.tableDeduccion_Empleado.Id_DetalleColumn})
        Me.tableDeduccion_Empleado.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.Cascade
        Me.relationabonoccobrardetalle_abonoccobrar = New Global.System.Data.DataRelation("abonoccobrardetalle_abonoccobrar", New Global.System.Data.DataColumn() {Me.tableabonoccobrar.Id_ReciboColumn}, New Global.System.Data.DataColumn() {Me.tabledetalle_abonoccobrar.Id_ReciboColumn}, false)
        Me.Relations.Add(Me.relationabonoccobrardetalle_abonoccobrar)
        Me.relationPlanilla_DetallePlanilla_Deducciones = New Global.System.Data.DataRelation("Planilla_DetallePlanilla_Deducciones", New Global.System.Data.DataColumn() {Me.tablePlanilla_Detalle.IdColumn}, New Global.System.Data.DataColumn() {Me.tablePlanilla_Deducciones.Id_PlanillaDetalleColumn}, false)
        Me.Relations.Add(Me.relationPlanilla_DetallePlanilla_Deducciones)
        Me.relationPlanillaPlanilla_Detalle = New Global.System.Data.DataRelation("PlanillaPlanilla_Detalle", New Global.System.Data.DataColumn() {Me.tablePlanilla.Id_PlanillaColumn}, New Global.System.Data.DataColumn() {Me.tablePlanilla_Detalle.Id_PlanillaColumn}, false)
        Me.Relations.Add(Me.relationPlanillaPlanilla_Detalle)
        Me.relationPlanilla_DetalleDeduccion_Empleado = New Global.System.Data.DataRelation("Planilla_DetalleDeduccion_Empleado", New Global.System.Data.DataColumn() {Me.tablePlanilla_Detalle.IdColumn}, New Global.System.Data.DataColumn() {Me.tableDeduccion_Empleado.Id_DetalleColumn}, false)
        Me.Relations.Add(Me.relationPlanilla_DetalleDeduccion_Empleado)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeAdelantoPrueba() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeConsultaSaldos() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFacturas_Cobrar() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeabonoccobrar() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeAccionPersonal() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeAdelantos() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeAdelantos_Detalle() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeDeducciones() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedetalle_abonoccobrar() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeEmpleado() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeEmpleado_Deducciones() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeHoras_Ordinarias() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeHorasTrabajadas() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeMoneda() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeParametroRenta() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePlanilla() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePlanilla_Deducciones() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePlanilla_Detalle() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeDeduccion_Empleado() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsPlanilla = New dsPlanilla
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub AdelantoPruebaRowChangeEventHandler(ByVal sender As Object, ByVal e As AdelantoPruebaRowChangeEvent)
    
    Public Delegate Sub ConsultaSaldosRowChangeEventHandler(ByVal sender As Object, ByVal e As ConsultaSaldosRowChangeEvent)
    
    Public Delegate Sub Facturas_CobrarRowChangeEventHandler(ByVal sender As Object, ByVal e As Facturas_CobrarRowChangeEvent)
    
    Public Delegate Sub abonoccobrarRowChangeEventHandler(ByVal sender As Object, ByVal e As abonoccobrarRowChangeEvent)
    
    Public Delegate Sub AccionPersonalRowChangeEventHandler(ByVal sender As Object, ByVal e As AccionPersonalRowChangeEvent)
    
    Public Delegate Sub AdelantosRowChangeEventHandler(ByVal sender As Object, ByVal e As AdelantosRowChangeEvent)
    
    Public Delegate Sub Adelantos_DetalleRowChangeEventHandler(ByVal sender As Object, ByVal e As Adelantos_DetalleRowChangeEvent)
    
    Public Delegate Sub DeduccionesRowChangeEventHandler(ByVal sender As Object, ByVal e As DeduccionesRowChangeEvent)
    
    Public Delegate Sub detalle_abonoccobrarRowChangeEventHandler(ByVal sender As Object, ByVal e As detalle_abonoccobrarRowChangeEvent)
    
    Public Delegate Sub EmpleadoRowChangeEventHandler(ByVal sender As Object, ByVal e As EmpleadoRowChangeEvent)
    
    Public Delegate Sub Empleado_DeduccionesRowChangeEventHandler(ByVal sender As Object, ByVal e As Empleado_DeduccionesRowChangeEvent)
    
    Public Delegate Sub Horas_OrdinariasRowChangeEventHandler(ByVal sender As Object, ByVal e As Horas_OrdinariasRowChangeEvent)
    
    Public Delegate Sub HorasTrabajadasRowChangeEventHandler(ByVal sender As Object, ByVal e As HorasTrabajadasRowChangeEvent)
    
    Public Delegate Sub MonedaRowChangeEventHandler(ByVal sender As Object, ByVal e As MonedaRowChangeEvent)
    
    Public Delegate Sub ParametroRentaRowChangeEventHandler(ByVal sender As Object, ByVal e As ParametroRentaRowChangeEvent)
    
    Public Delegate Sub PlanillaRowChangeEventHandler(ByVal sender As Object, ByVal e As PlanillaRowChangeEvent)
    
    Public Delegate Sub Planilla_DeduccionesRowChangeEventHandler(ByVal sender As Object, ByVal e As Planilla_DeduccionesRowChangeEvent)
    
    Public Delegate Sub Planilla_DetalleRowChangeEventHandler(ByVal sender As Object, ByVal e As Planilla_DetalleRowChangeEvent)
    
    Public Delegate Sub Deduccion_EmpleadoRowChangeEventHandler(ByVal sender As Object, ByVal e As Deduccion_EmpleadoRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class AdelantoPruebaDataTable
        Inherits Global.System.Data.TypedTableBase(Of AdelantoPruebaRow)
        
        Private columnNumero As Global.System.Data.DataColumn
        
        Private columnIdentificacion As Global.System.Data.DataColumn
        
        Private columnDeducirxPago As Global.System.Data.DataColumn
        
        Private columnSaldo As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "AdelantoPrueba"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumeroColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumero
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdentificacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdentificacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DeducirxPagoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDeducirxPago
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SaldoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSaldo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As AdelantoPruebaRow
            Get
                Return CType(Me.Rows(index),AdelantoPruebaRow)
            End Get
        End Property
        
        Public Event AdelantoPruebaRowChanging As AdelantoPruebaRowChangeEventHandler
        
        Public Event AdelantoPruebaRowChanged As AdelantoPruebaRowChangeEventHandler
        
        Public Event AdelantoPruebaRowDeleting As AdelantoPruebaRowChangeEventHandler
        
        Public Event AdelantoPruebaRowDeleted As AdelantoPruebaRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddAdelantoPruebaRow(ByVal row As AdelantoPruebaRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddAdelantoPruebaRow(ByVal Numero As Long, ByVal Identificacion As String, ByVal DeducirxPago As Double, ByVal Saldo As Double) As AdelantoPruebaRow
            Dim rowAdelantoPruebaRow As AdelantoPruebaRow = CType(Me.NewRow,AdelantoPruebaRow)
            Dim columnValuesArray() As Object = New Object() {Numero, Identificacion, DeducirxPago, Saldo}
            rowAdelantoPruebaRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowAdelantoPruebaRow)
            Return rowAdelantoPruebaRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As AdelantoPruebaDataTable = CType(MyBase.Clone,AdelantoPruebaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New AdelantoPruebaDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnNumero = MyBase.Columns("Numero")
            Me.columnIdentificacion = MyBase.Columns("Identificacion")
            Me.columnDeducirxPago = MyBase.Columns("DeducirxPago")
            Me.columnSaldo = MyBase.Columns("Saldo")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnNumero = New Global.System.Data.DataColumn("Numero", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumero)
            Me.columnIdentificacion = New Global.System.Data.DataColumn("Identificacion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdentificacion)
            Me.columnDeducirxPago = New Global.System.Data.DataColumn("DeducirxPago", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDeducirxPago)
            Me.columnSaldo = New Global.System.Data.DataColumn("Saldo", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSaldo)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewAdelantoPruebaRow() As AdelantoPruebaRow
            Return CType(Me.NewRow,AdelantoPruebaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New AdelantoPruebaRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(AdelantoPruebaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AdelantoPruebaRowChangedEvent) Is Nothing) Then
                RaiseEvent AdelantoPruebaRowChanged(Me, New AdelantoPruebaRowChangeEvent(CType(e.Row,AdelantoPruebaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AdelantoPruebaRowChangingEvent) Is Nothing) Then
                RaiseEvent AdelantoPruebaRowChanging(Me, New AdelantoPruebaRowChangeEvent(CType(e.Row,AdelantoPruebaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AdelantoPruebaRowDeletedEvent) Is Nothing) Then
                RaiseEvent AdelantoPruebaRowDeleted(Me, New AdelantoPruebaRowChangeEvent(CType(e.Row,AdelantoPruebaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AdelantoPruebaRowDeletingEvent) Is Nothing) Then
                RaiseEvent AdelantoPruebaRowDeleting(Me, New AdelantoPruebaRowChangeEvent(CType(e.Row,AdelantoPruebaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveAdelantoPruebaRow(ByVal row As AdelantoPruebaRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsPlanilla = New dsPlanilla
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "AdelantoPruebaDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ConsultaSaldosDataTable
        Inherits Global.System.Data.TypedTableBase(Of ConsultaSaldosRow)
        
        Private columnCod_Cliente As Global.System.Data.DataColumn
        
        Private columnSaldoActual As Global.System.Data.DataColumn
        
        Private columnCod_Moneda As Global.System.Data.DataColumn
        
        Private columnIntereses As Global.System.Data.DataColumn
        
        Private columnTipo_Cambio As Global.System.Data.DataColumn
        
        Private columnNum_Factura As Global.System.Data.DataColumn
        
        Private columnCobrar As Global.System.Data.DataColumn
        
        Private columnId_Empleado As Global.System.Data.DataColumn
        
        Private columnId As Global.System.Data.DataColumn
        
        Private columnFecha As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ConsultaSaldos"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Cod_ClienteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCod_Cliente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SaldoActualColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSaldoActual
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Cod_MonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCod_Moneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InteresesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIntereses
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Tipo_CambioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipo_Cambio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Num_FacturaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNum_Factura
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CobrarColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCobrar
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Id_EmpleadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnId_Empleado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnId
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFecha
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ConsultaSaldosRow
            Get
                Return CType(Me.Rows(index),ConsultaSaldosRow)
            End Get
        End Property
        
        Public Event ConsultaSaldosRowChanging As ConsultaSaldosRowChangeEventHandler
        
        Public Event ConsultaSaldosRowChanged As ConsultaSaldosRowChangeEventHandler
        
        Public Event ConsultaSaldosRowDeleting As ConsultaSaldosRowChangeEventHandler
        
        Public Event ConsultaSaldosRowDeleted As ConsultaSaldosRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddConsultaSaldosRow(ByVal row As ConsultaSaldosRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddConsultaSaldosRow(ByVal Cod_Cliente As Integer, ByVal SaldoActual As Double, ByVal Cod_Moneda As Integer, ByVal Intereses As Double, ByVal Tipo_Cambio As Double, ByVal Num_Factura As String, ByVal Cobrar As Boolean, ByVal Id_Empleado As String, ByVal Id As Integer, ByVal Fecha As Date) As ConsultaSaldosRow
            Dim rowConsultaSaldosRow As ConsultaSaldosRow = CType(Me.NewRow,ConsultaSaldosRow)
            Dim columnValuesArray() As Object = New Object() {Cod_Cliente, SaldoActual, Cod_Moneda, Intereses, Tipo_Cambio, Num_Factura, Cobrar, Id_Empleado, Id, Fecha}
            rowConsultaSaldosRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowConsultaSaldosRow)
            Return rowConsultaSaldosRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ConsultaSaldosDataTable = CType(MyBase.Clone,ConsultaSaldosDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ConsultaSaldosDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCod_Cliente = MyBase.Columns("Cod_Cliente")
            Me.columnSaldoActual = MyBase.Columns("SaldoActual")
            Me.columnCod_Moneda = MyBase.Columns("Cod_Moneda")
            Me.columnIntereses = MyBase.Columns("Intereses")
            Me.columnTipo_Cambio = MyBase.Columns("Tipo_Cambio")
            Me.columnNum_Factura = MyBase.Columns("Num_Factura")
            Me.columnCobrar = MyBase.Columns("Cobrar")
            Me.columnId_Empleado = MyBase.Columns("Id_Empleado")
            Me.columnId = MyBase.Columns("Id")
            Me.columnFecha = MyBase.Columns("Fecha")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCod_Cliente = New Global.System.Data.DataColumn("Cod_Cliente", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCod_Cliente)
            Me.columnSaldoActual = New Global.System.Data.DataColumn("SaldoActual", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSaldoActual)
            Me.columnCod_Moneda = New Global.System.Data.DataColumn("Cod_Moneda", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCod_Moneda)
            Me.columnIntereses = New Global.System.Data.DataColumn("Intereses", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIntereses)
            Me.columnTipo_Cambio = New Global.System.Data.DataColumn("Tipo_Cambio", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipo_Cambio)
            Me.columnNum_Factura = New Global.System.Data.DataColumn("Num_Factura", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNum_Factura)
            Me.columnCobrar = New Global.System.Data.DataColumn("Cobrar", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCobrar)
            Me.columnId_Empleado = New Global.System.Data.DataColumn("Id_Empleado", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnId_Empleado)
            Me.columnId = New Global.System.Data.DataColumn("Id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnId)
            Me.columnFecha = New Global.System.Data.DataColumn("Fecha", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFecha)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewConsultaSaldosRow() As ConsultaSaldosRow
            Return CType(Me.NewRow,ConsultaSaldosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ConsultaSaldosRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ConsultaSaldosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ConsultaSaldosRowChangedEvent) Is Nothing) Then
                RaiseEvent ConsultaSaldosRowChanged(Me, New ConsultaSaldosRowChangeEvent(CType(e.Row,ConsultaSaldosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ConsultaSaldosRowChangingEvent) Is Nothing) Then
                RaiseEvent ConsultaSaldosRowChanging(Me, New ConsultaSaldosRowChangeEvent(CType(e.Row,ConsultaSaldosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ConsultaSaldosRowDeletedEvent) Is Nothing) Then
                RaiseEvent ConsultaSaldosRowDeleted(Me, New ConsultaSaldosRowChangeEvent(CType(e.Row,ConsultaSaldosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ConsultaSaldosRowDeletingEvent) Is Nothing) Then
                RaiseEvent ConsultaSaldosRowDeleting(Me, New ConsultaSaldosRowChangeEvent(CType(e.Row,ConsultaSaldosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveConsultaSaldosRow(ByVal row As ConsultaSaldosRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsPlanilla = New dsPlanilla
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ConsultaSaldosDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Facturas_CobrarDataTable
        Inherits Global.System.Data.TypedTableBase(Of Facturas_CobrarRow)
        
        Private columnNumeroFactura As Global.System.Data.DataColumn
        
        Private columnCobrar As Global.System.Data.DataColumn
        
        Private columnTotal As Global.System.Data.DataColumn
        
        Private columnFecha As Global.System.Data.DataColumn
        
        Private columnId_Factura As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Facturas_Cobrar"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumeroFacturaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumeroFactura
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CobrarColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCobrar
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFecha
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Id_FacturaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnId_Factura
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Facturas_CobrarRow
            Get
                Return CType(Me.Rows(index),Facturas_CobrarRow)
            End Get
        End Property
        
        Public Event Facturas_CobrarRowChanging As Facturas_CobrarRowChangeEventHandler
        
        Public Event Facturas_CobrarRowChanged As Facturas_CobrarRowChangeEventHandler
        
        Public Event Facturas_CobrarRowDeleting As Facturas_CobrarRowChangeEventHandler
        
        Public Event Facturas_CobrarRowDeleted As Facturas_CobrarRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFacturas_CobrarRow(ByVal row As Facturas_CobrarRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFacturas_CobrarRow(ByVal NumeroFactura As String, ByVal Cobrar As Boolean, ByVal Total As Single, ByVal Fecha As Date, ByVal Id_Factura As Integer) As Facturas_CobrarRow
            Dim rowFacturas_CobrarRow As Facturas_CobrarRow = CType(Me.NewRow,Facturas_CobrarRow)
            Dim columnValuesArray() As Object = New Object() {NumeroFactura, Cobrar, Total, Fecha, Id_Factura}
            rowFacturas_CobrarRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFacturas_CobrarRow)
            Return rowFacturas_CobrarRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Facturas_CobrarDataTable = CType(MyBase.Clone,Facturas_CobrarDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Facturas_CobrarDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnNumeroFactura = MyBase.Columns("NumeroFactura")
            Me.columnCobrar = MyBase.Columns("Cobrar")
            Me.columnTotal = MyBase.Columns("Total")
            Me.columnFecha = MyBase.Columns("Fecha")
            Me.columnId_Factura = MyBase.Columns("Id_Factura")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnNumeroFactura = New Global.System.Data.DataColumn("NumeroFactura", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumeroFactura)
            Me.columnCobrar = New Global.System.Data.DataColumn("Cobrar", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCobrar)
            Me.columnTotal = New Global.System.Data.DataColumn("Total", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotal)
            Me.columnFecha = New Global.System.Data.DataColumn("Fecha", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFecha)
            Me.columnId_Factura = New Global.System.Data.DataColumn("Id_Factura", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnId_Factura)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFacturas_CobrarRow() As Facturas_CobrarRow
            Return CType(Me.NewRow,Facturas_CobrarRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Facturas_CobrarRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Facturas_CobrarRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Facturas_CobrarRowChangedEvent) Is Nothing) Then
                RaiseEvent Facturas_CobrarRowChanged(Me, New Facturas_CobrarRowChangeEvent(CType(e.Row,Facturas_CobrarRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Facturas_CobrarRowChangingEvent) Is Nothing) Then
                RaiseEvent Facturas_CobrarRowChanging(Me, New Facturas_CobrarRowChangeEvent(CType(e.Row,Facturas_CobrarRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Facturas_CobrarRowDeletedEvent) Is Nothing) Then
                RaiseEvent Facturas_CobrarRowDeleted(Me, New Facturas_CobrarRowChangeEvent(CType(e.Row,Facturas_CobrarRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Facturas_CobrarRowDeletingEvent) Is Nothing) Then
                RaiseEvent Facturas_CobrarRowDeleting(Me, New Facturas_CobrarRowChangeEvent(CType(e.Row,Facturas_CobrarRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFacturas_CobrarRow(ByVal row As Facturas_CobrarRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsPlanilla = New dsPlanilla
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Facturas_CobrarDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class abonoccobrarDataTable
        Inherits Global.System.Data.TypedTableBase(Of abonoccobrarRow)
        
        Private columnId_Recibo As Global.System.Data.DataColumn
        
        Private columnNum_Recibo As Global.System.Data.DataColumn
        
        Private columnCod_Cliente As Global.System.Data.DataColumn
        
        Private columnNombre_Cliente As Global.System.Data.DataColumn
        
        Private columnSaldo_Cuenta As Global.System.Data.DataColumn
        
        Private columnMonto As Global.System.Data.DataColumn
        
        Private columnSaldo_Actual As Global.System.Data.DataColumn
        
        Private columnFecha As Global.System.Data.DataColumn
        
        Private columnObservaciones As Global.System.Data.DataColumn
        
        Private columnAnula As Global.System.Data.DataColumn
        
        Private columnCed_Usuario As Global.System.Data.DataColumn
        
        Private columnContabilizado As Global.System.Data.DataColumn
        
        Private columnAsiento As Global.System.Data.DataColumn
        
        Private columnCod_Moneda As Global.System.Data.DataColumn
        
        Private columnId_Planilla As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "abonoccobrar"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Id_ReciboColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnId_Recibo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Num_ReciboColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNum_Recibo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Cod_ClienteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCod_Cliente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Nombre_ClienteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombre_Cliente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Saldo_CuentaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSaldo_Cuenta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMonto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Saldo_ActualColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSaldo_Actual
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFecha
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ObservacionesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnObservaciones
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AnulaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAnula
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Ced_UsuarioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCed_Usuario
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ContabilizadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnContabilizado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AsientoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAsiento
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Cod_MonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCod_Moneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Id_PlanillaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnId_Planilla
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As abonoccobrarRow
            Get
                Return CType(Me.Rows(index),abonoccobrarRow)
            End Get
        End Property
        
        Public Event abonoccobrarRowChanging As abonoccobrarRowChangeEventHandler
        
        Public Event abonoccobrarRowChanged As abonoccobrarRowChangeEventHandler
        
        Public Event abonoccobrarRowDeleting As abonoccobrarRowChangeEventHandler
        
        Public Event abonoccobrarRowDeleted As abonoccobrarRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddabonoccobrarRow(ByVal row As abonoccobrarRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddabonoccobrarRow(ByVal Num_Recibo As Long, ByVal Cod_Cliente As Integer, ByVal Nombre_Cliente As String, ByVal Saldo_Cuenta As Double, ByVal Monto As Double, ByVal Saldo_Actual As Double, ByVal Fecha As Date, ByVal Observaciones As String, ByVal Anula As Boolean, ByVal Ced_Usuario As String, ByVal Contabilizado As Boolean, ByVal Asiento As String, ByVal Cod_Moneda As Integer, ByVal Id_Planilla As Integer) As abonoccobrarRow
            Dim rowabonoccobrarRow As abonoccobrarRow = CType(Me.NewRow,abonoccobrarRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Num_Recibo, Cod_Cliente, Nombre_Cliente, Saldo_Cuenta, Monto, Saldo_Actual, Fecha, Observaciones, Anula, Ced_Usuario, Contabilizado, Asiento, Cod_Moneda, Id_Planilla}
            rowabonoccobrarRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowabonoccobrarRow)
            Return rowabonoccobrarRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindById_Recibo(ByVal Id_Recibo As Long) As abonoccobrarRow
            Return CType(Me.Rows.Find(New Object() {Id_Recibo}),abonoccobrarRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As abonoccobrarDataTable = CType(MyBase.Clone,abonoccobrarDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New abonoccobrarDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnId_Recibo = MyBase.Columns("Id_Recibo")
            Me.columnNum_Recibo = MyBase.Columns("Num_Recibo")
            Me.columnCod_Cliente = MyBase.Columns("Cod_Cliente")
            Me.columnNombre_Cliente = MyBase.Columns("Nombre_Cliente")
            Me.columnSaldo_Cuenta = MyBase.Columns("Saldo_Cuenta")
            Me.columnMonto = MyBase.Columns("Monto")
            Me.columnSaldo_Actual = MyBase.Columns("Saldo_Actual")
            Me.columnFecha = MyBase.Columns("Fecha")
            Me.columnObservaciones = MyBase.Columns("Observaciones")
            Me.columnAnula = MyBase.Columns("Anula")
            Me.columnCed_Usuario = MyBase.Columns("Ced_Usuario")
            Me.columnContabilizado = MyBase.Columns("Contabilizado")
            Me.columnAsiento = MyBase.Columns("Asiento")
            Me.columnCod_Moneda = MyBase.Columns("Cod_Moneda")
            Me.columnId_Planilla = MyBase.Columns("Id_Planilla")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnId_Recibo = New Global.System.Data.DataColumn("Id_Recibo", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnId_Recibo)
            Me.columnNum_Recibo = New Global.System.Data.DataColumn("Num_Recibo", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNum_Recibo)
            Me.columnCod_Cliente = New Global.System.Data.DataColumn("Cod_Cliente", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCod_Cliente)
            Me.columnNombre_Cliente = New Global.System.Data.DataColumn("Nombre_Cliente", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombre_Cliente)
            Me.columnSaldo_Cuenta = New Global.System.Data.DataColumn("Saldo_Cuenta", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSaldo_Cuenta)
            Me.columnMonto = New Global.System.Data.DataColumn("Monto", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMonto)
            Me.columnSaldo_Actual = New Global.System.Data.DataColumn("Saldo_Actual", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSaldo_Actual)
            Me.columnFecha = New Global.System.Data.DataColumn("Fecha", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFecha)
            Me.columnObservaciones = New Global.System.Data.DataColumn("Observaciones", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnObservaciones)
            Me.columnAnula = New Global.System.Data.DataColumn("Anula", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAnula)
            Me.columnCed_Usuario = New Global.System.Data.DataColumn("Ced_Usuario", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCed_Usuario)
            Me.columnContabilizado = New Global.System.Data.DataColumn("Contabilizado", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnContabilizado)
            Me.columnAsiento = New Global.System.Data.DataColumn("Asiento", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAsiento)
            Me.columnCod_Moneda = New Global.System.Data.DataColumn("Cod_Moneda", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCod_Moneda)
            Me.columnId_Planilla = New Global.System.Data.DataColumn("Id_Planilla", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnId_Planilla)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnId_Recibo}, true))
            Me.columnId_Recibo.AutoIncrement = true
            Me.columnId_Recibo.AllowDBNull = false
            Me.columnId_Recibo.ReadOnly = true
            Me.columnId_Recibo.Unique = true
            Me.columnNum_Recibo.AllowDBNull = false
            Me.columnCod_Cliente.AllowDBNull = false
            Me.columnNombre_Cliente.AllowDBNull = false
            Me.columnSaldo_Cuenta.AllowDBNull = false
            Me.columnMonto.AllowDBNull = false
            Me.columnSaldo_Actual.AllowDBNull = false
            Me.columnFecha.AllowDBNull = false
            Me.columnObservaciones.AllowDBNull = false
            Me.columnAnula.AllowDBNull = false
            Me.columnCed_Usuario.AllowDBNull = false
            Me.columnContabilizado.AllowDBNull = false
            Me.columnAsiento.AllowDBNull = false
            Me.columnCod_Moneda.AllowDBNull = false
            Me.columnId_Planilla.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewabonoccobrarRow() As abonoccobrarRow
            Return CType(Me.NewRow,abonoccobrarRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New abonoccobrarRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(abonoccobrarRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.abonoccobrarRowChangedEvent) Is Nothing) Then
                RaiseEvent abonoccobrarRowChanged(Me, New abonoccobrarRowChangeEvent(CType(e.Row,abonoccobrarRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.abonoccobrarRowChangingEvent) Is Nothing) Then
                RaiseEvent abonoccobrarRowChanging(Me, New abonoccobrarRowChangeEvent(CType(e.Row,abonoccobrarRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.abonoccobrarRowDeletedEvent) Is Nothing) Then
                RaiseEvent abonoccobrarRowDeleted(Me, New abonoccobrarRowChangeEvent(CType(e.Row,abonoccobrarRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.abonoccobrarRowDeletingEvent) Is Nothing) Then
                RaiseEvent abonoccobrarRowDeleting(Me, New abonoccobrarRowChangeEvent(CType(e.Row,abonoccobrarRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveabonoccobrarRow(ByVal row As abonoccobrarRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsPlanilla = New dsPlanilla
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "abonoccobrarDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class AccionPersonalDataTable
        Inherits Global.System.Data.TypedTableBase(Of AccionPersonalRow)
        
        Private columnNum_Accion As Global.System.Data.DataColumn
        
        Private columnId_Empleado As Global.System.Data.DataColumn
        
        Private columnNombre_Empleado As Global.System.Data.DataColumn
        
        Private columnPuesto As Global.System.Data.DataColumn
        
        Private columnId_Accion As Global.System.Data.DataColumn
        
        Private columnFecha As Global.System.Data.DataColumn
        
        Private columnObservaciones As Global.System.Data.DataColumn
        
        Private columnRigeDesde As Global.System.Data.DataColumn
        
        Private columnRigeHasta As Global.System.Data.DataColumn
        
        Private columnDiasaDescontar As Global.System.Data.DataColumn
        
        Private columnHechoPor As Global.System.Data.DataColumn
        
        Private columnNombreUsuario As Global.System.Data.DataColumn
        
        Private columnAnula As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "AccionPersonal"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Num_AccionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNum_Accion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Id_EmpleadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnId_Empleado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Nombre_EmpleadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombre_Empleado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PuestoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPuesto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Id_AccionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnId_Accion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFecha
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ObservacionesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnObservaciones
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RigeDesdeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRigeDesde
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RigeHastaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRigeHasta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DiasaDescontarColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDiasaDescontar
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HechoPorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHechoPor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreUsuarioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombreUsuario
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AnulaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAnula
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As AccionPersonalRow
            Get
                Return CType(Me.Rows(index),AccionPersonalRow)
            End Get
        End Property
        
        Public Event AccionPersonalRowChanging As AccionPersonalRowChangeEventHandler
        
        Public Event AccionPersonalRowChanged As AccionPersonalRowChangeEventHandler
        
        Public Event AccionPersonalRowDeleting As AccionPersonalRowChangeEventHandler
        
        Public Event AccionPersonalRowDeleted As AccionPersonalRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddAccionPersonalRow(ByVal row As AccionPersonalRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddAccionPersonalRow(ByVal Id_Empleado As String, ByVal Nombre_Empleado As String, ByVal Puesto As String, ByVal Id_Accion As Integer, ByVal Fecha As Date, ByVal Observaciones As String, ByVal RigeDesde As Date, ByVal RigeHasta As Date, ByVal DiasaDescontar As Double, ByVal HechoPor As String, ByVal NombreUsuario As String, ByVal Anula As Boolean) As AccionPersonalRow
            Dim rowAccionPersonalRow As AccionPersonalRow = CType(Me.NewRow,AccionPersonalRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Id_Empleado, Nombre_Empleado, Puesto, Id_Accion, Fecha, Observaciones, RigeDesde, RigeHasta, DiasaDescontar, HechoPor, NombreUsuario, Anula}
            rowAccionPersonalRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowAccionPersonalRow)
            Return rowAccionPersonalRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByNum_Accion(ByVal Num_Accion As Long) As AccionPersonalRow
            Return CType(Me.Rows.Find(New Object() {Num_Accion}),AccionPersonalRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As AccionPersonalDataTable = CType(MyBase.Clone,AccionPersonalDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New AccionPersonalDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnNum_Accion = MyBase.Columns("Num_Accion")
            Me.columnId_Empleado = MyBase.Columns("Id_Empleado")
            Me.columnNombre_Empleado = MyBase.Columns("Nombre_Empleado")
            Me.columnPuesto = MyBase.Columns("Puesto")
            Me.columnId_Accion = MyBase.Columns("Id_Accion")
            Me.columnFecha = MyBase.Columns("Fecha")
            Me.columnObservaciones = MyBase.Columns("Observaciones")
            Me.columnRigeDesde = MyBase.Columns("RigeDesde")
            Me.columnRigeHasta = MyBase.Columns("RigeHasta")
            Me.columnDiasaDescontar = MyBase.Columns("DiasaDescontar")
            Me.columnHechoPor = MyBase.Columns("HechoPor")
            Me.columnNombreUsuario = MyBase.Columns("NombreUsuario")
            Me.columnAnula = MyBase.Columns("Anula")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnNum_Accion = New Global.System.Data.DataColumn("Num_Accion", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNum_Accion)
            Me.columnId_Empleado = New Global.System.Data.DataColumn("Id_Empleado", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnId_Empleado)
            Me.columnNombre_Empleado = New Global.System.Data.DataColumn("Nombre_Empleado", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombre_Empleado)
            Me.columnPuesto = New Global.System.Data.DataColumn("Puesto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPuesto)
            Me.columnId_Accion = New Global.System.Data.DataColumn("Id_Accion", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnId_Accion)
            Me.columnFecha = New Global.System.Data.DataColumn("Fecha", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFecha)
            Me.columnObservaciones = New Global.System.Data.DataColumn("Observaciones", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnObservaciones)
            Me.columnRigeDesde = New Global.System.Data.DataColumn("RigeDesde", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRigeDesde)
            Me.columnRigeHasta = New Global.System.Data.DataColumn("RigeHasta", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRigeHasta)
            Me.columnDiasaDescontar = New Global.System.Data.DataColumn("DiasaDescontar", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDiasaDescontar)
            Me.columnHechoPor = New Global.System.Data.DataColumn("HechoPor", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHechoPor)
            Me.columnNombreUsuario = New Global.System.Data.DataColumn("NombreUsuario", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreUsuario)
            Me.columnAnula = New Global.System.Data.DataColumn("Anula", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAnula)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnNum_Accion}, true))
            Me.columnNum_Accion.AutoIncrement = true
            Me.columnNum_Accion.AllowDBNull = false
            Me.columnNum_Accion.ReadOnly = true
            Me.columnNum_Accion.Unique = true
            Me.columnId_Empleado.AllowDBNull = false
            Me.columnNombre_Empleado.AllowDBNull = false
            Me.columnPuesto.AllowDBNull = false
            Me.columnId_Accion.AllowDBNull = false
            Me.columnFecha.AllowDBNull = false
            Me.columnObservaciones.AllowDBNull = false
            Me.columnRigeDesde.AllowDBNull = false
            Me.columnRigeHasta.AllowDBNull = false
            Me.columnDiasaDescontar.AllowDBNull = false
            Me.columnHechoPor.AllowDBNull = false
            Me.columnNombreUsuario.AllowDBNull = false
            Me.columnAnula.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewAccionPersonalRow() As AccionPersonalRow
            Return CType(Me.NewRow,AccionPersonalRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New AccionPersonalRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(AccionPersonalRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AccionPersonalRowChangedEvent) Is Nothing) Then
                RaiseEvent AccionPersonalRowChanged(Me, New AccionPersonalRowChangeEvent(CType(e.Row,AccionPersonalRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AccionPersonalRowChangingEvent) Is Nothing) Then
                RaiseEvent AccionPersonalRowChanging(Me, New AccionPersonalRowChangeEvent(CType(e.Row,AccionPersonalRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AccionPersonalRowDeletedEvent) Is Nothing) Then
                RaiseEvent AccionPersonalRowDeleted(Me, New AccionPersonalRowChangeEvent(CType(e.Row,AccionPersonalRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AccionPersonalRowDeletingEvent) Is Nothing) Then
                RaiseEvent AccionPersonalRowDeleting(Me, New AccionPersonalRowChangeEvent(CType(e.Row,AccionPersonalRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveAccionPersonalRow(ByVal row As AccionPersonalRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsPlanilla = New dsPlanilla
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "AccionPersonalDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class AdelantosDataTable
        Inherits Global.System.Data.TypedTableBase(Of AdelantosRow)
        
        Private columnNumero As Global.System.Data.DataColumn
        
        Private columnIdentificacion As Global.System.Data.DataColumn
        
        Private columnNombre As Global.System.Data.DataColumn
        
        Private columnAdelanto As Global.System.Data.DataColumn
        
        Private columnPrestamo As Global.System.Data.DataColumn
        
        Private columnPuesto As Global.System.Data.DataColumn
        
        Private columnSalario As Global.System.Data.DataColumn
        
        Private columnFechaComprobante As Global.System.Data.DataColumn
        
        Private columnNum_Pago As Global.System.Data.DataColumn
        
        Private columnMonto As Global.System.Data.DataColumn
        
        Private columnMontoEnLetras As Global.System.Data.DataColumn
        
        Private columnFechaCobro As Global.System.Data.DataColumn
        
        Private columnObservaciones As Global.System.Data.DataColumn
        
        Private columnDeducirxPago As Global.System.Data.DataColumn
        
        Private columnUsuario As Global.System.Data.DataColumn
        
        Private columnNombreUsuario As Global.System.Data.DataColumn
        
        Private columnCod_Moneda As Global.System.Data.DataColumn
        
        Private columnAnulado As Global.System.Data.DataColumn
        
        Private columnSaldo As Global.System.Data.DataColumn
        
        Private columnInteresPrestamo As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Adelantos"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumeroColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumero
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdentificacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdentificacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AdelantoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAdelanto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrestamoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrestamo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PuestoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPuesto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SalarioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSalario
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaComprobanteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaComprobante
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Num_PagoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNum_Pago
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMonto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontoEnLetrasColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontoEnLetras
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaCobroColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaCobro
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ObservacionesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnObservaciones
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DeducirxPagoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDeducirxPago
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UsuarioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUsuario
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreUsuarioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombreUsuario
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Cod_MonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCod_Moneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AnuladoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAnulado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SaldoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSaldo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InteresPrestamoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInteresPrestamo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As AdelantosRow
            Get
                Return CType(Me.Rows(index),AdelantosRow)
            End Get
        End Property
        
        Public Event AdelantosRowChanging As AdelantosRowChangeEventHandler
        
        Public Event AdelantosRowChanged As AdelantosRowChangeEventHandler
        
        Public Event AdelantosRowDeleting As AdelantosRowChangeEventHandler
        
        Public Event AdelantosRowDeleted As AdelantosRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddAdelantosRow(ByVal row As AdelantosRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddAdelantosRow( _
                    ByVal Identificacion As String,  _
                    ByVal Nombre As String,  _
                    ByVal Adelanto As Boolean,  _
                    ByVal Prestamo As Boolean,  _
                    ByVal Puesto As String,  _
                    ByVal Salario As Double,  _
                    ByVal FechaComprobante As Date,  _
                    ByVal Num_Pago As Integer,  _
                    ByVal Monto As Double,  _
                    ByVal MontoEnLetras As String,  _
                    ByVal FechaCobro As Date,  _
                    ByVal Observaciones As String,  _
                    ByVal DeducirxPago As Double,  _
                    ByVal Usuario As String,  _
                    ByVal NombreUsuario As String,  _
                    ByVal Cod_Moneda As Integer,  _
                    ByVal Anulado As Boolean,  _
                    ByVal Saldo As Double,  _
                    ByVal InteresPrestamo As Double) As AdelantosRow
            Dim rowAdelantosRow As AdelantosRow = CType(Me.NewRow,AdelantosRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Identificacion, Nombre, Adelanto, Prestamo, Puesto, Salario, FechaComprobante, Num_Pago, Monto, MontoEnLetras, FechaCobro, Observaciones, DeducirxPago, Usuario, NombreUsuario, Cod_Moneda, Anulado, Saldo, InteresPrestamo}
            rowAdelantosRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowAdelantosRow)
            Return rowAdelantosRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByNumero(ByVal Numero As Long) As AdelantosRow
            Return CType(Me.Rows.Find(New Object() {Numero}),AdelantosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As AdelantosDataTable = CType(MyBase.Clone,AdelantosDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New AdelantosDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnNumero = MyBase.Columns("Numero")
            Me.columnIdentificacion = MyBase.Columns("Identificacion")
            Me.columnNombre = MyBase.Columns("Nombre")
            Me.columnAdelanto = MyBase.Columns("Adelanto")
            Me.columnPrestamo = MyBase.Columns("Prestamo")
            Me.columnPuesto = MyBase.Columns("Puesto")
            Me.columnSalario = MyBase.Columns("Salario")
            Me.columnFechaComprobante = MyBase.Columns("FechaComprobante")
            Me.columnNum_Pago = MyBase.Columns("Num_Pago")
            Me.columnMonto = MyBase.Columns("Monto")
            Me.columnMontoEnLetras = MyBase.Columns("MontoEnLetras")
            Me.columnFechaCobro = MyBase.Columns("FechaCobro")
            Me.columnObservaciones = MyBase.Columns("Observaciones")
            Me.columnDeducirxPago = MyBase.Columns("DeducirxPago")
            Me.columnUsuario = MyBase.Columns("Usuario")
            Me.columnNombreUsuario = MyBase.Columns("NombreUsuario")
            Me.columnCod_Moneda = MyBase.Columns("Cod_Moneda")
            Me.columnAnulado = MyBase.Columns("Anulado")
            Me.columnSaldo = MyBase.Columns("Saldo")
            Me.columnInteresPrestamo = MyBase.Columns("InteresPrestamo")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnNumero = New Global.System.Data.DataColumn("Numero", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumero)
            Me.columnIdentificacion = New Global.System.Data.DataColumn("Identificacion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdentificacion)
            Me.columnNombre = New Global.System.Data.DataColumn("Nombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombre)
            Me.columnAdelanto = New Global.System.Data.DataColumn("Adelanto", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAdelanto)
            Me.columnPrestamo = New Global.System.Data.DataColumn("Prestamo", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrestamo)
            Me.columnPuesto = New Global.System.Data.DataColumn("Puesto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPuesto)
            Me.columnSalario = New Global.System.Data.DataColumn("Salario", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSalario)
            Me.columnFechaComprobante = New Global.System.Data.DataColumn("FechaComprobante", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaComprobante)
            Me.columnNum_Pago = New Global.System.Data.DataColumn("Num_Pago", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNum_Pago)
            Me.columnMonto = New Global.System.Data.DataColumn("Monto", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMonto)
            Me.columnMontoEnLetras = New Global.System.Data.DataColumn("MontoEnLetras", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontoEnLetras)
            Me.columnFechaCobro = New Global.System.Data.DataColumn("FechaCobro", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaCobro)
            Me.columnObservaciones = New Global.System.Data.DataColumn("Observaciones", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnObservaciones)
            Me.columnDeducirxPago = New Global.System.Data.DataColumn("DeducirxPago", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDeducirxPago)
            Me.columnUsuario = New Global.System.Data.DataColumn("Usuario", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUsuario)
            Me.columnNombreUsuario = New Global.System.Data.DataColumn("NombreUsuario", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreUsuario)
            Me.columnCod_Moneda = New Global.System.Data.DataColumn("Cod_Moneda", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCod_Moneda)
            Me.columnAnulado = New Global.System.Data.DataColumn("Anulado", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAnulado)
            Me.columnSaldo = New Global.System.Data.DataColumn("Saldo", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSaldo)
            Me.columnInteresPrestamo = New Global.System.Data.DataColumn("InteresPrestamo", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInteresPrestamo)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnNumero}, true))
            Me.columnNumero.AutoIncrement = true
            Me.columnNumero.AllowDBNull = false
            Me.columnNumero.ReadOnly = true
            Me.columnNumero.Unique = true
            Me.columnIdentificacion.AllowDBNull = false
            Me.columnNombre.AllowDBNull = false
            Me.columnAdelanto.AllowDBNull = false
            Me.columnPrestamo.AllowDBNull = false
            Me.columnPuesto.AllowDBNull = false
            Me.columnSalario.AllowDBNull = false
            Me.columnFechaComprobante.AllowDBNull = false
            Me.columnNum_Pago.AllowDBNull = false
            Me.columnMonto.AllowDBNull = false
            Me.columnMontoEnLetras.AllowDBNull = false
            Me.columnFechaCobro.AllowDBNull = false
            Me.columnObservaciones.AllowDBNull = false
            Me.columnDeducirxPago.AllowDBNull = false
            Me.columnUsuario.AllowDBNull = false
            Me.columnNombreUsuario.AllowDBNull = false
            Me.columnCod_Moneda.AllowDBNull = false
            Me.columnAnulado.AllowDBNull = false
            Me.columnInteresPrestamo.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewAdelantosRow() As AdelantosRow
            Return CType(Me.NewRow,AdelantosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New AdelantosRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(AdelantosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AdelantosRowChangedEvent) Is Nothing) Then
                RaiseEvent AdelantosRowChanged(Me, New AdelantosRowChangeEvent(CType(e.Row,AdelantosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AdelantosRowChangingEvent) Is Nothing) Then
                RaiseEvent AdelantosRowChanging(Me, New AdelantosRowChangeEvent(CType(e.Row,AdelantosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AdelantosRowDeletedEvent) Is Nothing) Then
                RaiseEvent AdelantosRowDeleted(Me, New AdelantosRowChangeEvent(CType(e.Row,AdelantosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AdelantosRowDeletingEvent) Is Nothing) Then
                RaiseEvent AdelantosRowDeleting(Me, New AdelantosRowChangeEvent(CType(e.Row,AdelantosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveAdelantosRow(ByVal row As AdelantosRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsPlanilla = New dsPlanilla
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "AdelantosDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Adelantos_DetalleDataTable
        Inherits Global.System.Data.TypedTableBase(Of Adelantos_DetalleRow)
        
        Private columnId_Detalle_AP As Global.System.Data.DataColumn
        
        Private columnId_Empleado As Global.System.Data.DataColumn
        
        Private columnNumero As Global.System.Data.DataColumn
        
        Private columnMonto As Global.System.Data.DataColumn
        
        Private columnTipo_Pago As Global.System.Data.DataColumn
        
        Private columnId_Planilla As Global.System.Data.DataColumn
        
        Private columnInteres_Prestamo As Global.System.Data.DataColumn
        
        Private columnSaldo As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Adelantos_Detalle"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Id_Detalle_APColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnId_Detalle_AP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Id_EmpleadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnId_Empleado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumeroColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumero
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMonto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Tipo_PagoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipo_Pago
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Id_PlanillaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnId_Planilla
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Interes_PrestamoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInteres_Prestamo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SaldoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSaldo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Adelantos_DetalleRow
            Get
                Return CType(Me.Rows(index),Adelantos_DetalleRow)
            End Get
        End Property
        
        Public Event Adelantos_DetalleRowChanging As Adelantos_DetalleRowChangeEventHandler
        
        Public Event Adelantos_DetalleRowChanged As Adelantos_DetalleRowChangeEventHandler
        
        Public Event Adelantos_DetalleRowDeleting As Adelantos_DetalleRowChangeEventHandler
        
        Public Event Adelantos_DetalleRowDeleted As Adelantos_DetalleRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddAdelantos_DetalleRow(ByVal row As Adelantos_DetalleRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddAdelantos_DetalleRow(ByVal Id_Empleado As String, ByVal Numero As Long, ByVal Monto As Double, ByVal Tipo_Pago As Boolean, ByVal Id_Planilla As Integer, ByVal Interes_Prestamo As Double, ByVal Saldo As Double) As Adelantos_DetalleRow
            Dim rowAdelantos_DetalleRow As Adelantos_DetalleRow = CType(Me.NewRow,Adelantos_DetalleRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Id_Empleado, Numero, Monto, Tipo_Pago, Id_Planilla, Interes_Prestamo, Saldo}
            rowAdelantos_DetalleRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowAdelantos_DetalleRow)
            Return rowAdelantos_DetalleRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindById_Detalle_AP(ByVal Id_Detalle_AP As Integer) As Adelantos_DetalleRow
            Return CType(Me.Rows.Find(New Object() {Id_Detalle_AP}),Adelantos_DetalleRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Adelantos_DetalleDataTable = CType(MyBase.Clone,Adelantos_DetalleDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Adelantos_DetalleDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnId_Detalle_AP = MyBase.Columns("Id_Detalle_AP")
            Me.columnId_Empleado = MyBase.Columns("Id_Empleado")
            Me.columnNumero = MyBase.Columns("Numero")
            Me.columnMonto = MyBase.Columns("Monto")
            Me.columnTipo_Pago = MyBase.Columns("Tipo_Pago")
            Me.columnId_Planilla = MyBase.Columns("Id_Planilla")
            Me.columnInteres_Prestamo = MyBase.Columns("Interes_Prestamo")
            Me.columnSaldo = MyBase.Columns("Saldo")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnId_Detalle_AP = New Global.System.Data.DataColumn("Id_Detalle_AP", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnId_Detalle_AP)
            Me.columnId_Empleado = New Global.System.Data.DataColumn("Id_Empleado", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnId_Empleado)
            Me.columnNumero = New Global.System.Data.DataColumn("Numero", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumero)
            Me.columnMonto = New Global.System.Data.DataColumn("Monto", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMonto)
            Me.columnTipo_Pago = New Global.System.Data.DataColumn("Tipo_Pago", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipo_Pago)
            Me.columnId_Planilla = New Global.System.Data.DataColumn("Id_Planilla", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnId_Planilla)
            Me.columnInteres_Prestamo = New Global.System.Data.DataColumn("Interes_Prestamo", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInteres_Prestamo)
            Me.columnSaldo = New Global.System.Data.DataColumn("Saldo", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSaldo)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnId_Detalle_AP}, true))
            Me.columnId_Detalle_AP.AutoIncrement = true
            Me.columnId_Detalle_AP.AllowDBNull = false
            Me.columnId_Detalle_AP.ReadOnly = true
            Me.columnId_Detalle_AP.Unique = true
            Me.columnId_Empleado.AllowDBNull = false
            Me.columnNumero.AllowDBNull = false
            Me.columnMonto.AllowDBNull = false
            Me.columnTipo_Pago.AllowDBNull = false
            Me.columnId_Planilla.AllowDBNull = false
            Me.columnInteres_Prestamo.AllowDBNull = false
            Me.columnSaldo.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewAdelantos_DetalleRow() As Adelantos_DetalleRow
            Return CType(Me.NewRow,Adelantos_DetalleRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Adelantos_DetalleRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Adelantos_DetalleRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Adelantos_DetalleRowChangedEvent) Is Nothing) Then
                RaiseEvent Adelantos_DetalleRowChanged(Me, New Adelantos_DetalleRowChangeEvent(CType(e.Row,Adelantos_DetalleRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Adelantos_DetalleRowChangingEvent) Is Nothing) Then
                RaiseEvent Adelantos_DetalleRowChanging(Me, New Adelantos_DetalleRowChangeEvent(CType(e.Row,Adelantos_DetalleRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Adelantos_DetalleRowDeletedEvent) Is Nothing) Then
                RaiseEvent Adelantos_DetalleRowDeleted(Me, New Adelantos_DetalleRowChangeEvent(CType(e.Row,Adelantos_DetalleRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Adelantos_DetalleRowDeletingEvent) Is Nothing) Then
                RaiseEvent Adelantos_DetalleRowDeleting(Me, New Adelantos_DetalleRowChangeEvent(CType(e.Row,Adelantos_DetalleRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveAdelantos_DetalleRow(ByVal row As Adelantos_DetalleRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsPlanilla = New dsPlanilla
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Adelantos_DetalleDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class DeduccionesDataTable
        Inherits Global.System.Data.TypedTableBase(Of DeduccionesRow)
        
        Private columnCodigo As Global.System.Data.DataColumn
        
        Private columnDescripcion As Global.System.Data.DataColumn
        
        Private columnMonto As Global.System.Data.DataColumn
        
        Private columnTipo As Global.System.Data.DataColumn
        
        Private columnAplica As Global.System.Data.DataColumn
        
        Private columnCod_Moneda As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Deducciones"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescripcionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescripcion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMonto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AplicaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAplica
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Cod_MonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCod_Moneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As DeduccionesRow
            Get
                Return CType(Me.Rows(index),DeduccionesRow)
            End Get
        End Property
        
        Public Event DeduccionesRowChanging As DeduccionesRowChangeEventHandler
        
        Public Event DeduccionesRowChanged As DeduccionesRowChangeEventHandler
        
        Public Event DeduccionesRowDeleting As DeduccionesRowChangeEventHandler
        
        Public Event DeduccionesRowDeleted As DeduccionesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddDeduccionesRow(ByVal row As DeduccionesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddDeduccionesRow(ByVal Descripcion As String, ByVal Monto As Double, ByVal Tipo As String, ByVal Aplica As Boolean, ByVal Cod_Moneda As Integer) As DeduccionesRow
            Dim rowDeduccionesRow As DeduccionesRow = CType(Me.NewRow,DeduccionesRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Descripcion, Monto, Tipo, Aplica, Cod_Moneda}
            rowDeduccionesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowDeduccionesRow)
            Return rowDeduccionesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCodigo(ByVal Codigo As Integer) As DeduccionesRow
            Return CType(Me.Rows.Find(New Object() {Codigo}),DeduccionesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As DeduccionesDataTable = CType(MyBase.Clone,DeduccionesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New DeduccionesDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCodigo = MyBase.Columns("Codigo")
            Me.columnDescripcion = MyBase.Columns("Descripcion")
            Me.columnMonto = MyBase.Columns("Monto")
            Me.columnTipo = MyBase.Columns("Tipo")
            Me.columnAplica = MyBase.Columns("Aplica")
            Me.columnCod_Moneda = MyBase.Columns("Cod_Moneda")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCodigo = New Global.System.Data.DataColumn("Codigo", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigo)
            Me.columnDescripcion = New Global.System.Data.DataColumn("Descripcion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescripcion)
            Me.columnMonto = New Global.System.Data.DataColumn("Monto", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMonto)
            Me.columnTipo = New Global.System.Data.DataColumn("Tipo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipo)
            Me.columnAplica = New Global.System.Data.DataColumn("Aplica", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAplica)
            Me.columnCod_Moneda = New Global.System.Data.DataColumn("Cod_Moneda", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCod_Moneda)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCodigo}, true))
            Me.columnCodigo.AutoIncrement = true
            Me.columnCodigo.AllowDBNull = false
            Me.columnCodigo.ReadOnly = true
            Me.columnCodigo.Unique = true
            Me.columnDescripcion.AllowDBNull = false
            Me.columnMonto.AllowDBNull = false
            Me.columnTipo.AllowDBNull = false
            Me.columnAplica.AllowDBNull = false
            Me.columnCod_Moneda.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewDeduccionesRow() As DeduccionesRow
            Return CType(Me.NewRow,DeduccionesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New DeduccionesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(DeduccionesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DeduccionesRowChangedEvent) Is Nothing) Then
                RaiseEvent DeduccionesRowChanged(Me, New DeduccionesRowChangeEvent(CType(e.Row,DeduccionesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DeduccionesRowChangingEvent) Is Nothing) Then
                RaiseEvent DeduccionesRowChanging(Me, New DeduccionesRowChangeEvent(CType(e.Row,DeduccionesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DeduccionesRowDeletedEvent) Is Nothing) Then
                RaiseEvent DeduccionesRowDeleted(Me, New DeduccionesRowChangeEvent(CType(e.Row,DeduccionesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DeduccionesRowDeletingEvent) Is Nothing) Then
                RaiseEvent DeduccionesRowDeleting(Me, New DeduccionesRowChangeEvent(CType(e.Row,DeduccionesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveDeduccionesRow(ByVal row As DeduccionesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsPlanilla = New dsPlanilla
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "DeduccionesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class detalle_abonoccobrarDataTable
        Inherits Global.System.Data.TypedTableBase(Of detalle_abonoccobrarRow)
        
        Private columnConsecutivo As Global.System.Data.DataColumn
        
        Private columnId_Recibo As Global.System.Data.DataColumn
        
        Private columnFactura As Global.System.Data.DataColumn
        
        Private columnTipo As Global.System.Data.DataColumn
        
        Private columnMonto As Global.System.Data.DataColumn
        
        Private columnSaldo_Ant As Global.System.Data.DataColumn
        
        Private columnIntereses As Global.System.Data.DataColumn
        
        Private columnAbono As Global.System.Data.DataColumn
        
        Private columnAbono_SuMoneda As Global.System.Data.DataColumn
        
        Private columnSaldo As Global.System.Data.DataColumn
        
        Private columnId_Factura As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "detalle_abonoccobrar"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ConsecutivoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnConsecutivo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Id_ReciboColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnId_Recibo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FacturaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFactura
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMonto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Saldo_AntColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSaldo_Ant
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InteresesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIntereses
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AbonoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAbono
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Abono_SuMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAbono_SuMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SaldoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSaldo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Id_FacturaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnId_Factura
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As detalle_abonoccobrarRow
            Get
                Return CType(Me.Rows(index),detalle_abonoccobrarRow)
            End Get
        End Property
        
        Public Event detalle_abonoccobrarRowChanging As detalle_abonoccobrarRowChangeEventHandler
        
        Public Event detalle_abonoccobrarRowChanged As detalle_abonoccobrarRowChangeEventHandler
        
        Public Event detalle_abonoccobrarRowDeleting As detalle_abonoccobrarRowChangeEventHandler
        
        Public Event detalle_abonoccobrarRowDeleted As detalle_abonoccobrarRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Adddetalle_abonoccobrarRow(ByVal row As detalle_abonoccobrarRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Adddetalle_abonoccobrarRow(ByVal parentabonoccobrarRowByabonoccobrardetalle_abonoccobrar As abonoccobrarRow, ByVal Factura As Double, ByVal Tipo As String, ByVal Monto As Double, ByVal Saldo_Ant As Double, ByVal Intereses As Double, ByVal Abono As Double, ByVal Abono_SuMoneda As Double, ByVal Saldo As Double, ByVal Id_Factura As Long) As detalle_abonoccobrarRow
            Dim rowdetalle_abonoccobrarRow As detalle_abonoccobrarRow = CType(Me.NewRow,detalle_abonoccobrarRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Nothing, Factura, Tipo, Monto, Saldo_Ant, Intereses, Abono, Abono_SuMoneda, Saldo, Id_Factura}
            If (Not (parentabonoccobrarRowByabonoccobrardetalle_abonoccobrar) Is Nothing) Then
                columnValuesArray(1) = parentabonoccobrarRowByabonoccobrardetalle_abonoccobrar(0)
            End If
            rowdetalle_abonoccobrarRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdetalle_abonoccobrarRow)
            Return rowdetalle_abonoccobrarRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByConsecutivo(ByVal Consecutivo As Long) As detalle_abonoccobrarRow
            Return CType(Me.Rows.Find(New Object() {Consecutivo}),detalle_abonoccobrarRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As detalle_abonoccobrarDataTable = CType(MyBase.Clone,detalle_abonoccobrarDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New detalle_abonoccobrarDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnConsecutivo = MyBase.Columns("Consecutivo")
            Me.columnId_Recibo = MyBase.Columns("Id_Recibo")
            Me.columnFactura = MyBase.Columns("Factura")
            Me.columnTipo = MyBase.Columns("Tipo")
            Me.columnMonto = MyBase.Columns("Monto")
            Me.columnSaldo_Ant = MyBase.Columns("Saldo_Ant")
            Me.columnIntereses = MyBase.Columns("Intereses")
            Me.columnAbono = MyBase.Columns("Abono")
            Me.columnAbono_SuMoneda = MyBase.Columns("Abono_SuMoneda")
            Me.columnSaldo = MyBase.Columns("Saldo")
            Me.columnId_Factura = MyBase.Columns("Id_Factura")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnConsecutivo = New Global.System.Data.DataColumn("Consecutivo", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnConsecutivo)
            Me.columnId_Recibo = New Global.System.Data.DataColumn("Id_Recibo", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnId_Recibo)
            Me.columnFactura = New Global.System.Data.DataColumn("Factura", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFactura)
            Me.columnTipo = New Global.System.Data.DataColumn("Tipo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipo)
            Me.columnMonto = New Global.System.Data.DataColumn("Monto", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMonto)
            Me.columnSaldo_Ant = New Global.System.Data.DataColumn("Saldo_Ant", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSaldo_Ant)
            Me.columnIntereses = New Global.System.Data.DataColumn("Intereses", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIntereses)
            Me.columnAbono = New Global.System.Data.DataColumn("Abono", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAbono)
            Me.columnAbono_SuMoneda = New Global.System.Data.DataColumn("Abono_SuMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAbono_SuMoneda)
            Me.columnSaldo = New Global.System.Data.DataColumn("Saldo", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSaldo)
            Me.columnId_Factura = New Global.System.Data.DataColumn("Id_Factura", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnId_Factura)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnConsecutivo}, true))
            Me.columnConsecutivo.AutoIncrement = true
            Me.columnConsecutivo.AllowDBNull = false
            Me.columnConsecutivo.ReadOnly = true
            Me.columnConsecutivo.Unique = true
            Me.columnId_Recibo.AllowDBNull = false
            Me.columnFactura.AllowDBNull = false
            Me.columnTipo.AllowDBNull = false
            Me.columnMonto.AllowDBNull = false
            Me.columnSaldo_Ant.AllowDBNull = false
            Me.columnIntereses.AllowDBNull = false
            Me.columnAbono.AllowDBNull = false
            Me.columnAbono_SuMoneda.AllowDBNull = false
            Me.columnSaldo.AllowDBNull = false
            Me.columnId_Factura.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newdetalle_abonoccobrarRow() As detalle_abonoccobrarRow
            Return CType(Me.NewRow,detalle_abonoccobrarRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New detalle_abonoccobrarRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(detalle_abonoccobrarRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.detalle_abonoccobrarRowChangedEvent) Is Nothing) Then
                RaiseEvent detalle_abonoccobrarRowChanged(Me, New detalle_abonoccobrarRowChangeEvent(CType(e.Row,detalle_abonoccobrarRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.detalle_abonoccobrarRowChangingEvent) Is Nothing) Then
                RaiseEvent detalle_abonoccobrarRowChanging(Me, New detalle_abonoccobrarRowChangeEvent(CType(e.Row,detalle_abonoccobrarRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.detalle_abonoccobrarRowDeletedEvent) Is Nothing) Then
                RaiseEvent detalle_abonoccobrarRowDeleted(Me, New detalle_abonoccobrarRowChangeEvent(CType(e.Row,detalle_abonoccobrarRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.detalle_abonoccobrarRowDeletingEvent) Is Nothing) Then
                RaiseEvent detalle_abonoccobrarRowDeleting(Me, New detalle_abonoccobrarRowChangeEvent(CType(e.Row,detalle_abonoccobrarRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removedetalle_abonoccobrarRow(ByVal row As detalle_abonoccobrarRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsPlanilla = New dsPlanilla
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "detalle_abonoccobrarDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class EmpleadoDataTable
        Inherits Global.System.Data.TypedTableBase(Of EmpleadoRow)
        
        Private columnIdentificacion As Global.System.Data.DataColumn
        
        Private columnNombre As Global.System.Data.DataColumn
        
        Private columnEstado_Civil As Global.System.Data.DataColumn
        
        Private columnHijos As Global.System.Data.DataColumn
        
        Private columnCod_Nacionalidad As Global.System.Data.DataColumn
        
        Private columnFecha_Nacimiento As Global.System.Data.DataColumn
        
        Private columnEdad As Global.System.Data.DataColumn
        
        Private columnTelefono1 As Global.System.Data.DataColumn
        
        Private columnTelefono2 As Global.System.Data.DataColumn
        
        Private columnEmail As Global.System.Data.DataColumn
        
        Private columnDireccion As Global.System.Data.DataColumn
        
        Private columnPuesto As Global.System.Data.DataColumn
        
        Private columnFecha_Ingreso As Global.System.Data.DataColumn
        
        Private columnFecha_Salida As Global.System.Data.DataColumn
        
        Private columnSalario As Global.System.Data.DataColumn
        
        Private columnCod_Departamento As Global.System.Data.DataColumn
        
        Private columnMasculino As Global.System.Data.DataColumn
        
        Private columnFemenino As Global.System.Data.DataColumn
        
        Private columnCod_Moneda As Global.System.Data.DataColumn
        
        Private columnHora As Global.System.Data.DataColumn
        
        Private columnDiario As Global.System.Data.DataColumn
        
        Private columnSemana As Global.System.Data.DataColumn
        
        Private columnQuincena As Global.System.Data.DataColumn
        
        Private columnMensual As Global.System.Data.DataColumn
        
        Private columnCod_Estado As Global.System.Data.DataColumn
        
        Private columnFoto As Global.System.Data.DataColumn
        
        Private columnHorasOrdinarias As Global.System.Data.DataColumn
        
        Private columnServiciosProf As Global.System.Data.DataColumn
        
        Private columnCambioCedula As Global.System.Data.DataColumn
        
        Private columnNuevaCedula As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Empleado"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdentificacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdentificacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Estado_CivilColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEstado_Civil
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HijosColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHijos
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Cod_NacionalidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCod_Nacionalidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Fecha_NacimientoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFecha_Nacimiento
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EdadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEdad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Telefono1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnTelefono1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Telefono2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnTelefono2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EmailColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmail
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DireccionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDireccion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PuestoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPuesto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Fecha_IngresoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFecha_Ingreso
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Fecha_SalidaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFecha_Salida
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SalarioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSalario
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Cod_DepartamentoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCod_Departamento
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MasculinoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMasculino
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FemeninoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFemenino
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Cod_MonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCod_Moneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HoraColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHora
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DiarioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDiario
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SemanaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSemana
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QuincenaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQuincena
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MensualColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMensual
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Cod_EstadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCod_Estado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FotoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFoto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HorasOrdinariasColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHorasOrdinarias
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ServiciosProfColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnServiciosProf
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CambioCedulaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCambioCedula
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NuevaCedulaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNuevaCedula
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As EmpleadoRow
            Get
                Return CType(Me.Rows(index),EmpleadoRow)
            End Get
        End Property
        
        Public Event EmpleadoRowChanging As EmpleadoRowChangeEventHandler
        
        Public Event EmpleadoRowChanged As EmpleadoRowChangeEventHandler
        
        Public Event EmpleadoRowDeleting As EmpleadoRowChangeEventHandler
        
        Public Event EmpleadoRowDeleted As EmpleadoRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddEmpleadoRow(ByVal row As EmpleadoRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddEmpleadoRow( _
                    ByVal Identificacion As String,  _
                    ByVal Nombre As String,  _
                    ByVal Estado_Civil As String,  _
                    ByVal Hijos As Integer,  _
                    ByVal Cod_Nacionalidad As Integer,  _
                    ByVal Fecha_Nacimiento As Date,  _
                    ByVal Edad As Integer,  _
                    ByVal Telefono1 As String,  _
                    ByVal Telefono2 As String,  _
                    ByVal Email As String,  _
                    ByVal Direccion As String,  _
                    ByVal Puesto As String,  _
                    ByVal Fecha_Ingreso As Date,  _
                    ByVal Fecha_Salida As Date,  _
                    ByVal Salario As Double,  _
                    ByVal Cod_Departamento As Integer,  _
                    ByVal Masculino As Boolean,  _
                    ByVal Femenino As Boolean,  _
                    ByVal Cod_Moneda As Integer,  _
                    ByVal Hora As Boolean,  _
                    ByVal Diario As Boolean,  _
                    ByVal Semana As Boolean,  _
                    ByVal Quincena As Boolean,  _
                    ByVal Mensual As Boolean,  _
                    ByVal Cod_Estado As Integer,  _
                    ByVal Foto() As Byte,  _
                    ByVal HorasOrdinarias As Integer,  _
                    ByVal ServiciosProf As Boolean,  _
                    ByVal CambioCedula As Boolean,  _
                    ByVal NuevaCedula As String) As EmpleadoRow
            Dim rowEmpleadoRow As EmpleadoRow = CType(Me.NewRow,EmpleadoRow)
            Dim columnValuesArray() As Object = New Object() {Identificacion, Nombre, Estado_Civil, Hijos, Cod_Nacionalidad, Fecha_Nacimiento, Edad, Telefono1, Telefono2, Email, Direccion, Puesto, Fecha_Ingreso, Fecha_Salida, Salario, Cod_Departamento, Masculino, Femenino, Cod_Moneda, Hora, Diario, Semana, Quincena, Mensual, Cod_Estado, Foto, HorasOrdinarias, ServiciosProf, CambioCedula, NuevaCedula}
            rowEmpleadoRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowEmpleadoRow)
            Return rowEmpleadoRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByIdentificacion(ByVal Identificacion As String) As EmpleadoRow
            Return CType(Me.Rows.Find(New Object() {Identificacion}),EmpleadoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As EmpleadoDataTable = CType(MyBase.Clone,EmpleadoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New EmpleadoDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnIdentificacion = MyBase.Columns("Identificacion")
            Me.columnNombre = MyBase.Columns("Nombre")
            Me.columnEstado_Civil = MyBase.Columns("Estado_Civil")
            Me.columnHijos = MyBase.Columns("Hijos")
            Me.columnCod_Nacionalidad = MyBase.Columns("Cod_Nacionalidad")
            Me.columnFecha_Nacimiento = MyBase.Columns("Fecha_Nacimiento")
            Me.columnEdad = MyBase.Columns("Edad")
            Me.columnTelefono1 = MyBase.Columns("Telefono1")
            Me.columnTelefono2 = MyBase.Columns("Telefono2")
            Me.columnEmail = MyBase.Columns("Email")
            Me.columnDireccion = MyBase.Columns("Direccion")
            Me.columnPuesto = MyBase.Columns("Puesto")
            Me.columnFecha_Ingreso = MyBase.Columns("Fecha_Ingreso")
            Me.columnFecha_Salida = MyBase.Columns("Fecha_Salida")
            Me.columnSalario = MyBase.Columns("Salario")
            Me.columnCod_Departamento = MyBase.Columns("Cod_Departamento")
            Me.columnMasculino = MyBase.Columns("Masculino")
            Me.columnFemenino = MyBase.Columns("Femenino")
            Me.columnCod_Moneda = MyBase.Columns("Cod_Moneda")
            Me.columnHora = MyBase.Columns("Hora")
            Me.columnDiario = MyBase.Columns("Diario")
            Me.columnSemana = MyBase.Columns("Semana")
            Me.columnQuincena = MyBase.Columns("Quincena")
            Me.columnMensual = MyBase.Columns("Mensual")
            Me.columnCod_Estado = MyBase.Columns("Cod_Estado")
            Me.columnFoto = MyBase.Columns("Foto")
            Me.columnHorasOrdinarias = MyBase.Columns("HorasOrdinarias")
            Me.columnServiciosProf = MyBase.Columns("ServiciosProf")
            Me.columnCambioCedula = MyBase.Columns("CambioCedula")
            Me.columnNuevaCedula = MyBase.Columns("NuevaCedula")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnIdentificacion = New Global.System.Data.DataColumn("Identificacion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdentificacion)
            Me.columnNombre = New Global.System.Data.DataColumn("Nombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombre)
            Me.columnEstado_Civil = New Global.System.Data.DataColumn("Estado_Civil", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEstado_Civil)
            Me.columnHijos = New Global.System.Data.DataColumn("Hijos", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHijos)
            Me.columnCod_Nacionalidad = New Global.System.Data.DataColumn("Cod_Nacionalidad", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCod_Nacionalidad)
            Me.columnFecha_Nacimiento = New Global.System.Data.DataColumn("Fecha_Nacimiento", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFecha_Nacimiento)
            Me.columnEdad = New Global.System.Data.DataColumn("Edad", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEdad)
            Me.columnTelefono1 = New Global.System.Data.DataColumn("Telefono1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTelefono1)
            Me.columnTelefono2 = New Global.System.Data.DataColumn("Telefono2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTelefono2)
            Me.columnEmail = New Global.System.Data.DataColumn("Email", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmail)
            Me.columnDireccion = New Global.System.Data.DataColumn("Direccion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDireccion)
            Me.columnPuesto = New Global.System.Data.DataColumn("Puesto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPuesto)
            Me.columnFecha_Ingreso = New Global.System.Data.DataColumn("Fecha_Ingreso", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFecha_Ingreso)
            Me.columnFecha_Salida = New Global.System.Data.DataColumn("Fecha_Salida", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFecha_Salida)
            Me.columnSalario = New Global.System.Data.DataColumn("Salario", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSalario)
            Me.columnCod_Departamento = New Global.System.Data.DataColumn("Cod_Departamento", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCod_Departamento)
            Me.columnMasculino = New Global.System.Data.DataColumn("Masculino", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMasculino)
            Me.columnFemenino = New Global.System.Data.DataColumn("Femenino", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFemenino)
            Me.columnCod_Moneda = New Global.System.Data.DataColumn("Cod_Moneda", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCod_Moneda)
            Me.columnHora = New Global.System.Data.DataColumn("Hora", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHora)
            Me.columnDiario = New Global.System.Data.DataColumn("Diario", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDiario)
            Me.columnSemana = New Global.System.Data.DataColumn("Semana", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSemana)
            Me.columnQuincena = New Global.System.Data.DataColumn("Quincena", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQuincena)
            Me.columnMensual = New Global.System.Data.DataColumn("Mensual", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMensual)
            Me.columnCod_Estado = New Global.System.Data.DataColumn("Cod_Estado", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCod_Estado)
            Me.columnFoto = New Global.System.Data.DataColumn("Foto", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFoto)
            Me.columnHorasOrdinarias = New Global.System.Data.DataColumn("HorasOrdinarias", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHorasOrdinarias)
            Me.columnServiciosProf = New Global.System.Data.DataColumn("ServiciosProf", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnServiciosProf)
            Me.columnCambioCedula = New Global.System.Data.DataColumn("CambioCedula", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCambioCedula)
            Me.columnNuevaCedula = New Global.System.Data.DataColumn("NuevaCedula", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNuevaCedula)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnIdentificacion}, true))
            Me.columnIdentificacion.AllowDBNull = false
            Me.columnIdentificacion.Unique = true
            Me.columnNombre.AllowDBNull = false
            Me.columnEstado_Civil.AllowDBNull = false
            Me.columnHijos.AllowDBNull = false
            Me.columnCod_Nacionalidad.AllowDBNull = false
            Me.columnFecha_Nacimiento.AllowDBNull = false
            Me.columnEdad.AllowDBNull = false
            Me.columnTelefono1.AllowDBNull = false
            Me.columnTelefono2.AllowDBNull = false
            Me.columnEmail.AllowDBNull = false
            Me.columnDireccion.AllowDBNull = false
            Me.columnPuesto.AllowDBNull = false
            Me.columnFecha_Ingreso.AllowDBNull = false
            Me.columnFecha_Salida.AllowDBNull = false
            Me.columnSalario.AllowDBNull = false
            Me.columnCod_Departamento.AllowDBNull = false
            Me.columnMasculino.AllowDBNull = false
            Me.columnFemenino.AllowDBNull = false
            Me.columnCod_Moneda.AllowDBNull = false
            Me.columnHora.AllowDBNull = false
            Me.columnDiario.AllowDBNull = false
            Me.columnSemana.AllowDBNull = false
            Me.columnQuincena.AllowDBNull = false
            Me.columnMensual.AllowDBNull = false
            Me.columnCod_Estado.AllowDBNull = false
            Me.columnHorasOrdinarias.AllowDBNull = false
            Me.columnServiciosProf.AllowDBNull = false
            Me.columnCambioCedula.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewEmpleadoRow() As EmpleadoRow
            Return CType(Me.NewRow,EmpleadoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New EmpleadoRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(EmpleadoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EmpleadoRowChangedEvent) Is Nothing) Then
                RaiseEvent EmpleadoRowChanged(Me, New EmpleadoRowChangeEvent(CType(e.Row,EmpleadoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EmpleadoRowChangingEvent) Is Nothing) Then
                RaiseEvent EmpleadoRowChanging(Me, New EmpleadoRowChangeEvent(CType(e.Row,EmpleadoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EmpleadoRowDeletedEvent) Is Nothing) Then
                RaiseEvent EmpleadoRowDeleted(Me, New EmpleadoRowChangeEvent(CType(e.Row,EmpleadoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EmpleadoRowDeletingEvent) Is Nothing) Then
                RaiseEvent EmpleadoRowDeleting(Me, New EmpleadoRowChangeEvent(CType(e.Row,EmpleadoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveEmpleadoRow(ByVal row As EmpleadoRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsPlanilla = New dsPlanilla
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "EmpleadoDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Empleado_DeduccionesDataTable
        Inherits Global.System.Data.TypedTableBase(Of Empleado_DeduccionesRow)
        
        Private columnId As Global.System.Data.DataColumn
        
        Private columnIdentificacion As Global.System.Data.DataColumn
        
        Private columnCodigo As Global.System.Data.DataColumn
        
        Private columnDescripcion As Global.System.Data.DataColumn
        
        Private columnMonto As Global.System.Data.DataColumn
        
        Private columnTipo As Global.System.Data.DataColumn
        
        Private columnCod_Moneda As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Empleado_Deducciones"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnId
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdentificacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdentificacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescripcionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescripcion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMonto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Cod_MonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCod_Moneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Empleado_DeduccionesRow
            Get
                Return CType(Me.Rows(index),Empleado_DeduccionesRow)
            End Get
        End Property
        
        Public Event Empleado_DeduccionesRowChanging As Empleado_DeduccionesRowChangeEventHandler
        
        Public Event Empleado_DeduccionesRowChanged As Empleado_DeduccionesRowChangeEventHandler
        
        Public Event Empleado_DeduccionesRowDeleting As Empleado_DeduccionesRowChangeEventHandler
        
        Public Event Empleado_DeduccionesRowDeleted As Empleado_DeduccionesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddEmpleado_DeduccionesRow(ByVal row As Empleado_DeduccionesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddEmpleado_DeduccionesRow(ByVal Identificacion As String, ByVal Codigo As Integer, ByVal Descripcion As String, ByVal Monto As Double, ByVal Tipo As String, ByVal Cod_Moneda As Integer) As Empleado_DeduccionesRow
            Dim rowEmpleado_DeduccionesRow As Empleado_DeduccionesRow = CType(Me.NewRow,Empleado_DeduccionesRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Identificacion, Codigo, Descripcion, Monto, Tipo, Cod_Moneda}
            rowEmpleado_DeduccionesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowEmpleado_DeduccionesRow)
            Return rowEmpleado_DeduccionesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindById(ByVal Id As Long) As Empleado_DeduccionesRow
            Return CType(Me.Rows.Find(New Object() {Id}),Empleado_DeduccionesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Empleado_DeduccionesDataTable = CType(MyBase.Clone,Empleado_DeduccionesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Empleado_DeduccionesDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnId = MyBase.Columns("Id")
            Me.columnIdentificacion = MyBase.Columns("Identificacion")
            Me.columnCodigo = MyBase.Columns("Codigo")
            Me.columnDescripcion = MyBase.Columns("Descripcion")
            Me.columnMonto = MyBase.Columns("Monto")
            Me.columnTipo = MyBase.Columns("Tipo")
            Me.columnCod_Moneda = MyBase.Columns("Cod_Moneda")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnId = New Global.System.Data.DataColumn("Id", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnId)
            Me.columnIdentificacion = New Global.System.Data.DataColumn("Identificacion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdentificacion)
            Me.columnCodigo = New Global.System.Data.DataColumn("Codigo", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigo)
            Me.columnDescripcion = New Global.System.Data.DataColumn("Descripcion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescripcion)
            Me.columnMonto = New Global.System.Data.DataColumn("Monto", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMonto)
            Me.columnTipo = New Global.System.Data.DataColumn("Tipo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipo)
            Me.columnCod_Moneda = New Global.System.Data.DataColumn("Cod_Moneda", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCod_Moneda)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnId}, true))
            Me.columnId.AutoIncrement = true
            Me.columnId.AllowDBNull = false
            Me.columnId.ReadOnly = true
            Me.columnId.Unique = true
            Me.columnIdentificacion.AllowDBNull = false
            Me.columnCodigo.AllowDBNull = false
            Me.columnDescripcion.AllowDBNull = false
            Me.columnMonto.AllowDBNull = false
            Me.columnTipo.AllowDBNull = false
            Me.columnCod_Moneda.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewEmpleado_DeduccionesRow() As Empleado_DeduccionesRow
            Return CType(Me.NewRow,Empleado_DeduccionesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Empleado_DeduccionesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Empleado_DeduccionesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Empleado_DeduccionesRowChangedEvent) Is Nothing) Then
                RaiseEvent Empleado_DeduccionesRowChanged(Me, New Empleado_DeduccionesRowChangeEvent(CType(e.Row,Empleado_DeduccionesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Empleado_DeduccionesRowChangingEvent) Is Nothing) Then
                RaiseEvent Empleado_DeduccionesRowChanging(Me, New Empleado_DeduccionesRowChangeEvent(CType(e.Row,Empleado_DeduccionesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Empleado_DeduccionesRowDeletedEvent) Is Nothing) Then
                RaiseEvent Empleado_DeduccionesRowDeleted(Me, New Empleado_DeduccionesRowChangeEvent(CType(e.Row,Empleado_DeduccionesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Empleado_DeduccionesRowDeletingEvent) Is Nothing) Then
                RaiseEvent Empleado_DeduccionesRowDeleting(Me, New Empleado_DeduccionesRowChangeEvent(CType(e.Row,Empleado_DeduccionesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveEmpleado_DeduccionesRow(ByVal row As Empleado_DeduccionesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsPlanilla = New dsPlanilla
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Empleado_DeduccionesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Horas_OrdinariasDataTable
        Inherits Global.System.Data.TypedTableBase(Of Horas_OrdinariasRow)
        
        Private columnHoras As Global.System.Data.DataColumn
        
        Private columnIndividual As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Horas_Ordinarias"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HorasColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHoras
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IndividualColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIndividual
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Horas_OrdinariasRow
            Get
                Return CType(Me.Rows(index),Horas_OrdinariasRow)
            End Get
        End Property
        
        Public Event Horas_OrdinariasRowChanging As Horas_OrdinariasRowChangeEventHandler
        
        Public Event Horas_OrdinariasRowChanged As Horas_OrdinariasRowChangeEventHandler
        
        Public Event Horas_OrdinariasRowDeleting As Horas_OrdinariasRowChangeEventHandler
        
        Public Event Horas_OrdinariasRowDeleted As Horas_OrdinariasRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddHoras_OrdinariasRow(ByVal row As Horas_OrdinariasRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddHoras_OrdinariasRow(ByVal Horas As Integer, ByVal Individual As Boolean) As Horas_OrdinariasRow
            Dim rowHoras_OrdinariasRow As Horas_OrdinariasRow = CType(Me.NewRow,Horas_OrdinariasRow)
            Dim columnValuesArray() As Object = New Object() {Horas, Individual}
            rowHoras_OrdinariasRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowHoras_OrdinariasRow)
            Return rowHoras_OrdinariasRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Horas_OrdinariasDataTable = CType(MyBase.Clone,Horas_OrdinariasDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Horas_OrdinariasDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnHoras = MyBase.Columns("Horas")
            Me.columnIndividual = MyBase.Columns("Individual")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnHoras = New Global.System.Data.DataColumn("Horas", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHoras)
            Me.columnIndividual = New Global.System.Data.DataColumn("Individual", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIndividual)
            Me.columnHoras.AllowDBNull = false
            Me.columnIndividual.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewHoras_OrdinariasRow() As Horas_OrdinariasRow
            Return CType(Me.NewRow,Horas_OrdinariasRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Horas_OrdinariasRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Horas_OrdinariasRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Horas_OrdinariasRowChangedEvent) Is Nothing) Then
                RaiseEvent Horas_OrdinariasRowChanged(Me, New Horas_OrdinariasRowChangeEvent(CType(e.Row,Horas_OrdinariasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Horas_OrdinariasRowChangingEvent) Is Nothing) Then
                RaiseEvent Horas_OrdinariasRowChanging(Me, New Horas_OrdinariasRowChangeEvent(CType(e.Row,Horas_OrdinariasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Horas_OrdinariasRowDeletedEvent) Is Nothing) Then
                RaiseEvent Horas_OrdinariasRowDeleted(Me, New Horas_OrdinariasRowChangeEvent(CType(e.Row,Horas_OrdinariasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Horas_OrdinariasRowDeletingEvent) Is Nothing) Then
                RaiseEvent Horas_OrdinariasRowDeleting(Me, New Horas_OrdinariasRowChangeEvent(CType(e.Row,Horas_OrdinariasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveHoras_OrdinariasRow(ByVal row As Horas_OrdinariasRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsPlanilla = New dsPlanilla
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Horas_OrdinariasDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class HorasTrabajadasDataTable
        Inherits Global.System.Data.TypedTableBase(Of HorasTrabajadasRow)
        
        Private columnId As Global.System.Data.DataColumn
        
        Private columnIdentificacion As Global.System.Data.DataColumn
        
        Private columnFecha As Global.System.Data.DataColumn
        
        Private columnHoraOrdinaria As Global.System.Data.DataColumn
        
        Private columnHoraExtra As Global.System.Data.DataColumn
        
        Private columnHoraDoble As Global.System.Data.DataColumn
        
        Private columnId_Proyecto As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "HorasTrabajadas"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnId
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdentificacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdentificacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFecha
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HoraOrdinariaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHoraOrdinaria
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HoraExtraColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHoraExtra
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HoraDobleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHoraDoble
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Id_ProyectoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnId_Proyecto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As HorasTrabajadasRow
            Get
                Return CType(Me.Rows(index),HorasTrabajadasRow)
            End Get
        End Property
        
        Public Event HorasTrabajadasRowChanging As HorasTrabajadasRowChangeEventHandler
        
        Public Event HorasTrabajadasRowChanged As HorasTrabajadasRowChangeEventHandler
        
        Public Event HorasTrabajadasRowDeleting As HorasTrabajadasRowChangeEventHandler
        
        Public Event HorasTrabajadasRowDeleted As HorasTrabajadasRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddHorasTrabajadasRow(ByVal row As HorasTrabajadasRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddHorasTrabajadasRow(ByVal Identificacion As String, ByVal Fecha As Date, ByVal HoraOrdinaria As Double, ByVal HoraExtra As Double, ByVal HoraDoble As Double, ByVal Id_Proyecto As Integer) As HorasTrabajadasRow
            Dim rowHorasTrabajadasRow As HorasTrabajadasRow = CType(Me.NewRow,HorasTrabajadasRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Identificacion, Fecha, HoraOrdinaria, HoraExtra, HoraDoble, Id_Proyecto}
            rowHorasTrabajadasRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowHorasTrabajadasRow)
            Return rowHorasTrabajadasRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindById(ByVal Id As Long) As HorasTrabajadasRow
            Return CType(Me.Rows.Find(New Object() {Id}),HorasTrabajadasRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As HorasTrabajadasDataTable = CType(MyBase.Clone,HorasTrabajadasDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New HorasTrabajadasDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnId = MyBase.Columns("Id")
            Me.columnIdentificacion = MyBase.Columns("Identificacion")
            Me.columnFecha = MyBase.Columns("Fecha")
            Me.columnHoraOrdinaria = MyBase.Columns("HoraOrdinaria")
            Me.columnHoraExtra = MyBase.Columns("HoraExtra")
            Me.columnHoraDoble = MyBase.Columns("HoraDoble")
            Me.columnId_Proyecto = MyBase.Columns("Id_Proyecto")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnId = New Global.System.Data.DataColumn("Id", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnId)
            Me.columnIdentificacion = New Global.System.Data.DataColumn("Identificacion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdentificacion)
            Me.columnFecha = New Global.System.Data.DataColumn("Fecha", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFecha)
            Me.columnHoraOrdinaria = New Global.System.Data.DataColumn("HoraOrdinaria", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHoraOrdinaria)
            Me.columnHoraExtra = New Global.System.Data.DataColumn("HoraExtra", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHoraExtra)
            Me.columnHoraDoble = New Global.System.Data.DataColumn("HoraDoble", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHoraDoble)
            Me.columnId_Proyecto = New Global.System.Data.DataColumn("Id_Proyecto", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnId_Proyecto)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnId}, true))
            Me.columnId.AutoIncrement = true
            Me.columnId.AllowDBNull = false
            Me.columnId.ReadOnly = true
            Me.columnId.Unique = true
            Me.columnIdentificacion.AllowDBNull = false
            Me.columnFecha.AllowDBNull = false
            Me.columnHoraOrdinaria.AllowDBNull = false
            Me.columnHoraExtra.AllowDBNull = false
            Me.columnHoraDoble.AllowDBNull = false
            Me.columnId_Proyecto.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewHorasTrabajadasRow() As HorasTrabajadasRow
            Return CType(Me.NewRow,HorasTrabajadasRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New HorasTrabajadasRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(HorasTrabajadasRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.HorasTrabajadasRowChangedEvent) Is Nothing) Then
                RaiseEvent HorasTrabajadasRowChanged(Me, New HorasTrabajadasRowChangeEvent(CType(e.Row,HorasTrabajadasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.HorasTrabajadasRowChangingEvent) Is Nothing) Then
                RaiseEvent HorasTrabajadasRowChanging(Me, New HorasTrabajadasRowChangeEvent(CType(e.Row,HorasTrabajadasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.HorasTrabajadasRowDeletedEvent) Is Nothing) Then
                RaiseEvent HorasTrabajadasRowDeleted(Me, New HorasTrabajadasRowChangeEvent(CType(e.Row,HorasTrabajadasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.HorasTrabajadasRowDeletingEvent) Is Nothing) Then
                RaiseEvent HorasTrabajadasRowDeleting(Me, New HorasTrabajadasRowChangeEvent(CType(e.Row,HorasTrabajadasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveHorasTrabajadasRow(ByVal row As HorasTrabajadasRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsPlanilla = New dsPlanilla
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "HorasTrabajadasDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class MonedaDataTable
        Inherits Global.System.Data.TypedTableBase(Of MonedaRow)
        
        Private columnCodMoneda As Global.System.Data.DataColumn
        
        Private columnMonedaNombre As Global.System.Data.DataColumn
        
        Private columnValorCompra As Global.System.Data.DataColumn
        
        Private columnValorVenta As Global.System.Data.DataColumn
        
        Private columnSimbolo As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Moneda"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MonedaNombreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMonedaNombre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ValorCompraColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnValorCompra
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ValorVentaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnValorVenta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SimboloColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSimbolo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As MonedaRow
            Get
                Return CType(Me.Rows(index),MonedaRow)
            End Get
        End Property
        
        Public Event MonedaRowChanging As MonedaRowChangeEventHandler
        
        Public Event MonedaRowChanged As MonedaRowChangeEventHandler
        
        Public Event MonedaRowDeleting As MonedaRowChangeEventHandler
        
        Public Event MonedaRowDeleted As MonedaRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddMonedaRow(ByVal row As MonedaRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddMonedaRow(ByVal CodMoneda As Integer, ByVal MonedaNombre As String, ByVal ValorCompra As Double, ByVal ValorVenta As Double, ByVal Simbolo As String) As MonedaRow
            Dim rowMonedaRow As MonedaRow = CType(Me.NewRow,MonedaRow)
            Dim columnValuesArray() As Object = New Object() {CodMoneda, MonedaNombre, ValorCompra, ValorVenta, Simbolo}
            rowMonedaRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowMonedaRow)
            Return rowMonedaRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCodMoneda(ByVal CodMoneda As Integer) As MonedaRow
            Return CType(Me.Rows.Find(New Object() {CodMoneda}),MonedaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As MonedaDataTable = CType(MyBase.Clone,MonedaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New MonedaDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCodMoneda = MyBase.Columns("CodMoneda")
            Me.columnMonedaNombre = MyBase.Columns("MonedaNombre")
            Me.columnValorCompra = MyBase.Columns("ValorCompra")
            Me.columnValorVenta = MyBase.Columns("ValorVenta")
            Me.columnSimbolo = MyBase.Columns("Simbolo")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCodMoneda = New Global.System.Data.DataColumn("CodMoneda", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodMoneda)
            Me.columnMonedaNombre = New Global.System.Data.DataColumn("MonedaNombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMonedaNombre)
            Me.columnValorCompra = New Global.System.Data.DataColumn("ValorCompra", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnValorCompra)
            Me.columnValorVenta = New Global.System.Data.DataColumn("ValorVenta", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnValorVenta)
            Me.columnSimbolo = New Global.System.Data.DataColumn("Simbolo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSimbolo)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCodMoneda}, true))
            Me.columnCodMoneda.AllowDBNull = false
            Me.columnCodMoneda.Unique = true
            Me.columnMonedaNombre.AllowDBNull = false
            Me.columnValorCompra.AllowDBNull = false
            Me.columnValorVenta.AllowDBNull = false
            Me.columnSimbolo.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewMonedaRow() As MonedaRow
            Return CType(Me.NewRow,MonedaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New MonedaRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(MonedaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MonedaRowChangedEvent) Is Nothing) Then
                RaiseEvent MonedaRowChanged(Me, New MonedaRowChangeEvent(CType(e.Row,MonedaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MonedaRowChangingEvent) Is Nothing) Then
                RaiseEvent MonedaRowChanging(Me, New MonedaRowChangeEvent(CType(e.Row,MonedaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MonedaRowDeletedEvent) Is Nothing) Then
                RaiseEvent MonedaRowDeleted(Me, New MonedaRowChangeEvent(CType(e.Row,MonedaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MonedaRowDeletingEvent) Is Nothing) Then
                RaiseEvent MonedaRowDeleting(Me, New MonedaRowChangeEvent(CType(e.Row,MonedaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveMonedaRow(ByVal row As MonedaRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsPlanilla = New dsPlanilla
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "MonedaDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ParametroRentaDataTable
        Inherits Global.System.Data.TypedTableBase(Of ParametroRentaRow)
        
        Private columnId As Global.System.Data.DataColumn
        
        Private columnMontoExento As Global.System.Data.DataColumn
        
        Private columnMontoDe As Global.System.Data.DataColumn
        
        Private columnMontoHasta As Global.System.Data.DataColumn
        
        Private columnPorcentaje1 As Global.System.Data.DataColumn
        
        Private columnMontoEnAdelante As Global.System.Data.DataColumn
        
        Private columnPorcentaje2 As Global.System.Data.DataColumn
        
        Private columnEsposa As Global.System.Data.DataColumn
        
        Private columnHijo As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ParametroRenta"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnId
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontoExentoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontoExento
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontoDeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontoDe
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontoHastaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontoHasta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Porcentaje1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPorcentaje1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontoEnAdelanteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontoEnAdelante
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Porcentaje2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPorcentaje2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EsposaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEsposa
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HijoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHijo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ParametroRentaRow
            Get
                Return CType(Me.Rows(index),ParametroRentaRow)
            End Get
        End Property
        
        Public Event ParametroRentaRowChanging As ParametroRentaRowChangeEventHandler
        
        Public Event ParametroRentaRowChanged As ParametroRentaRowChangeEventHandler
        
        Public Event ParametroRentaRowDeleting As ParametroRentaRowChangeEventHandler
        
        Public Event ParametroRentaRowDeleted As ParametroRentaRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddParametroRentaRow(ByVal row As ParametroRentaRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddParametroRentaRow(ByVal MontoExento As Double, ByVal MontoDe As Double, ByVal MontoHasta As Double, ByVal Porcentaje1 As Double, ByVal MontoEnAdelante As Double, ByVal Porcentaje2 As Double, ByVal Esposa As Double, ByVal Hijo As Double) As ParametroRentaRow
            Dim rowParametroRentaRow As ParametroRentaRow = CType(Me.NewRow,ParametroRentaRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, MontoExento, MontoDe, MontoHasta, Porcentaje1, MontoEnAdelante, Porcentaje2, Esposa, Hijo}
            rowParametroRentaRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowParametroRentaRow)
            Return rowParametroRentaRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindById(ByVal Id As Integer) As ParametroRentaRow
            Return CType(Me.Rows.Find(New Object() {Id}),ParametroRentaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ParametroRentaDataTable = CType(MyBase.Clone,ParametroRentaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ParametroRentaDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnId = MyBase.Columns("Id")
            Me.columnMontoExento = MyBase.Columns("MontoExento")
            Me.columnMontoDe = MyBase.Columns("MontoDe")
            Me.columnMontoHasta = MyBase.Columns("MontoHasta")
            Me.columnPorcentaje1 = MyBase.Columns("Porcentaje1")
            Me.columnMontoEnAdelante = MyBase.Columns("MontoEnAdelante")
            Me.columnPorcentaje2 = MyBase.Columns("Porcentaje2")
            Me.columnEsposa = MyBase.Columns("Esposa")
            Me.columnHijo = MyBase.Columns("Hijo")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnId = New Global.System.Data.DataColumn("Id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnId)
            Me.columnMontoExento = New Global.System.Data.DataColumn("MontoExento", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontoExento)
            Me.columnMontoDe = New Global.System.Data.DataColumn("MontoDe", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontoDe)
            Me.columnMontoHasta = New Global.System.Data.DataColumn("MontoHasta", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontoHasta)
            Me.columnPorcentaje1 = New Global.System.Data.DataColumn("Porcentaje1", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPorcentaje1)
            Me.columnMontoEnAdelante = New Global.System.Data.DataColumn("MontoEnAdelante", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontoEnAdelante)
            Me.columnPorcentaje2 = New Global.System.Data.DataColumn("Porcentaje2", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPorcentaje2)
            Me.columnEsposa = New Global.System.Data.DataColumn("Esposa", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEsposa)
            Me.columnHijo = New Global.System.Data.DataColumn("Hijo", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHijo)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnId}, true))
            Me.columnId.AutoIncrement = true
            Me.columnId.AllowDBNull = false
            Me.columnId.ReadOnly = true
            Me.columnId.Unique = true
            Me.columnMontoExento.AllowDBNull = false
            Me.columnMontoDe.AllowDBNull = false
            Me.columnMontoHasta.AllowDBNull = false
            Me.columnPorcentaje1.AllowDBNull = false
            Me.columnMontoEnAdelante.AllowDBNull = false
            Me.columnPorcentaje2.AllowDBNull = false
            Me.columnEsposa.AllowDBNull = false
            Me.columnHijo.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewParametroRentaRow() As ParametroRentaRow
            Return CType(Me.NewRow,ParametroRentaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ParametroRentaRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ParametroRentaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ParametroRentaRowChangedEvent) Is Nothing) Then
                RaiseEvent ParametroRentaRowChanged(Me, New ParametroRentaRowChangeEvent(CType(e.Row,ParametroRentaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ParametroRentaRowChangingEvent) Is Nothing) Then
                RaiseEvent ParametroRentaRowChanging(Me, New ParametroRentaRowChangeEvent(CType(e.Row,ParametroRentaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ParametroRentaRowDeletedEvent) Is Nothing) Then
                RaiseEvent ParametroRentaRowDeleted(Me, New ParametroRentaRowChangeEvent(CType(e.Row,ParametroRentaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ParametroRentaRowDeletingEvent) Is Nothing) Then
                RaiseEvent ParametroRentaRowDeleting(Me, New ParametroRentaRowChangeEvent(CType(e.Row,ParametroRentaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveParametroRentaRow(ByVal row As ParametroRentaRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsPlanilla = New dsPlanilla
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ParametroRentaDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PlanillaDataTable
        Inherits Global.System.Data.TypedTableBase(Of PlanillaRow)
        
        Private columnId_Planilla As Global.System.Data.DataColumn
        
        Private columnFecha As Global.System.Data.DataColumn
        
        Private columnFechaInicial As Global.System.Data.DataColumn
        
        Private columnFechaFinal As Global.System.Data.DataColumn
        
        Private columnCierreMes As Global.System.Data.DataColumn
        
        Private columnCed_Usuario As Global.System.Data.DataColumn
        
        Private columnNombre_Usuario As Global.System.Data.DataColumn
        
        Private columnAnulado As Global.System.Data.DataColumn
        
        Private columnServ_Prof As Global.System.Data.DataColumn
        
        Private columnNumeroPlanilla As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Planilla"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Id_PlanillaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnId_Planilla
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFecha
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaInicialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaInicial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaFinalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaFinal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CierreMesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCierreMes
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Ced_UsuarioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCed_Usuario
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Nombre_UsuarioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombre_Usuario
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AnuladoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAnulado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Serv_ProfColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnServ_Prof
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumeroPlanillaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumeroPlanilla
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PlanillaRow
            Get
                Return CType(Me.Rows(index),PlanillaRow)
            End Get
        End Property
        
        Public Event PlanillaRowChanging As PlanillaRowChangeEventHandler
        
        Public Event PlanillaRowChanged As PlanillaRowChangeEventHandler
        
        Public Event PlanillaRowDeleting As PlanillaRowChangeEventHandler
        
        Public Event PlanillaRowDeleted As PlanillaRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPlanillaRow(ByVal row As PlanillaRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPlanillaRow(ByVal Fecha As Date, ByVal FechaInicial As Date, ByVal FechaFinal As Date, ByVal CierreMes As Boolean, ByVal Ced_Usuario As String, ByVal Nombre_Usuario As String, ByVal Anulado As Boolean, ByVal Serv_Prof As Boolean, ByVal NumeroPlanilla As Long) As PlanillaRow
            Dim rowPlanillaRow As PlanillaRow = CType(Me.NewRow,PlanillaRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Fecha, FechaInicial, FechaFinal, CierreMes, Ced_Usuario, Nombre_Usuario, Anulado, Serv_Prof, NumeroPlanilla}
            rowPlanillaRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPlanillaRow)
            Return rowPlanillaRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindById_Planilla(ByVal Id_Planilla As Long) As PlanillaRow
            Return CType(Me.Rows.Find(New Object() {Id_Planilla}),PlanillaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PlanillaDataTable = CType(MyBase.Clone,PlanillaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PlanillaDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnId_Planilla = MyBase.Columns("Id_Planilla")
            Me.columnFecha = MyBase.Columns("Fecha")
            Me.columnFechaInicial = MyBase.Columns("FechaInicial")
            Me.columnFechaFinal = MyBase.Columns("FechaFinal")
            Me.columnCierreMes = MyBase.Columns("CierreMes")
            Me.columnCed_Usuario = MyBase.Columns("Ced_Usuario")
            Me.columnNombre_Usuario = MyBase.Columns("Nombre_Usuario")
            Me.columnAnulado = MyBase.Columns("Anulado")
            Me.columnServ_Prof = MyBase.Columns("Serv_Prof")
            Me.columnNumeroPlanilla = MyBase.Columns("NumeroPlanilla")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnId_Planilla = New Global.System.Data.DataColumn("Id_Planilla", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnId_Planilla)
            Me.columnFecha = New Global.System.Data.DataColumn("Fecha", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFecha)
            Me.columnFechaInicial = New Global.System.Data.DataColumn("FechaInicial", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaInicial)
            Me.columnFechaFinal = New Global.System.Data.DataColumn("FechaFinal", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaFinal)
            Me.columnCierreMes = New Global.System.Data.DataColumn("CierreMes", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCierreMes)
            Me.columnCed_Usuario = New Global.System.Data.DataColumn("Ced_Usuario", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCed_Usuario)
            Me.columnNombre_Usuario = New Global.System.Data.DataColumn("Nombre_Usuario", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombre_Usuario)
            Me.columnAnulado = New Global.System.Data.DataColumn("Anulado", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAnulado)
            Me.columnServ_Prof = New Global.System.Data.DataColumn("Serv_Prof", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnServ_Prof)
            Me.columnNumeroPlanilla = New Global.System.Data.DataColumn("NumeroPlanilla", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumeroPlanilla)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnId_Planilla}, true))
            Me.columnId_Planilla.AutoIncrement = true
            Me.columnId_Planilla.AllowDBNull = false
            Me.columnId_Planilla.ReadOnly = true
            Me.columnId_Planilla.Unique = true
            Me.columnFecha.AllowDBNull = false
            Me.columnFechaInicial.AllowDBNull = false
            Me.columnFechaFinal.AllowDBNull = false
            Me.columnCierreMes.AllowDBNull = false
            Me.columnCed_Usuario.AllowDBNull = false
            Me.columnNombre_Usuario.AllowDBNull = false
            Me.columnAnulado.AllowDBNull = false
            Me.columnServ_Prof.AllowDBNull = false
            Me.columnNumeroPlanilla.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPlanillaRow() As PlanillaRow
            Return CType(Me.NewRow,PlanillaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PlanillaRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PlanillaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PlanillaRowChangedEvent) Is Nothing) Then
                RaiseEvent PlanillaRowChanged(Me, New PlanillaRowChangeEvent(CType(e.Row,PlanillaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PlanillaRowChangingEvent) Is Nothing) Then
                RaiseEvent PlanillaRowChanging(Me, New PlanillaRowChangeEvent(CType(e.Row,PlanillaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PlanillaRowDeletedEvent) Is Nothing) Then
                RaiseEvent PlanillaRowDeleted(Me, New PlanillaRowChangeEvent(CType(e.Row,PlanillaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PlanillaRowDeletingEvent) Is Nothing) Then
                RaiseEvent PlanillaRowDeleting(Me, New PlanillaRowChangeEvent(CType(e.Row,PlanillaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePlanillaRow(ByVal row As PlanillaRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsPlanilla = New dsPlanilla
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PlanillaDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Planilla_DeduccionesDataTable
        Inherits Global.System.Data.TypedTableBase(Of Planilla_DeduccionesRow)
        
        Private columnId As Global.System.Data.DataColumn
        
        Private columnId_PlanillaDetalle As Global.System.Data.DataColumn
        
        Private columnCod_Deduccion As Global.System.Data.DataColumn
        
        Private columnNombre As Global.System.Data.DataColumn
        
        Private columnMonto As Global.System.Data.DataColumn
        
        Private columnCod_Moneda As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Planilla_Deducciones"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnId
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Id_PlanillaDetalleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnId_PlanillaDetalle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Cod_DeduccionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCod_Deduccion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMonto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Cod_MonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCod_Moneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Planilla_DeduccionesRow
            Get
                Return CType(Me.Rows(index),Planilla_DeduccionesRow)
            End Get
        End Property
        
        Public Event Planilla_DeduccionesRowChanging As Planilla_DeduccionesRowChangeEventHandler
        
        Public Event Planilla_DeduccionesRowChanged As Planilla_DeduccionesRowChangeEventHandler
        
        Public Event Planilla_DeduccionesRowDeleting As Planilla_DeduccionesRowChangeEventHandler
        
        Public Event Planilla_DeduccionesRowDeleted As Planilla_DeduccionesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPlanilla_DeduccionesRow(ByVal row As Planilla_DeduccionesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPlanilla_DeduccionesRow(ByVal parentPlanilla_DetalleRowByPlanilla_DetallePlanilla_Deducciones As Planilla_DetalleRow, ByVal Cod_Deduccion As Integer, ByVal Nombre As String, ByVal Monto As Double, ByVal Cod_Moneda As Integer) As Planilla_DeduccionesRow
            Dim rowPlanilla_DeduccionesRow As Planilla_DeduccionesRow = CType(Me.NewRow,Planilla_DeduccionesRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Nothing, Cod_Deduccion, Nombre, Monto, Cod_Moneda}
            If (Not (parentPlanilla_DetalleRowByPlanilla_DetallePlanilla_Deducciones) Is Nothing) Then
                columnValuesArray(1) = parentPlanilla_DetalleRowByPlanilla_DetallePlanilla_Deducciones(0)
            End If
            rowPlanilla_DeduccionesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPlanilla_DeduccionesRow)
            Return rowPlanilla_DeduccionesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindById(ByVal Id As Long) As Planilla_DeduccionesRow
            Return CType(Me.Rows.Find(New Object() {Id}),Planilla_DeduccionesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Planilla_DeduccionesDataTable = CType(MyBase.Clone,Planilla_DeduccionesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Planilla_DeduccionesDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnId = MyBase.Columns("Id")
            Me.columnId_PlanillaDetalle = MyBase.Columns("Id_PlanillaDetalle")
            Me.columnCod_Deduccion = MyBase.Columns("Cod_Deduccion")
            Me.columnNombre = MyBase.Columns("Nombre")
            Me.columnMonto = MyBase.Columns("Monto")
            Me.columnCod_Moneda = MyBase.Columns("Cod_Moneda")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnId = New Global.System.Data.DataColumn("Id", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnId)
            Me.columnId_PlanillaDetalle = New Global.System.Data.DataColumn("Id_PlanillaDetalle", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnId_PlanillaDetalle)
            Me.columnCod_Deduccion = New Global.System.Data.DataColumn("Cod_Deduccion", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCod_Deduccion)
            Me.columnNombre = New Global.System.Data.DataColumn("Nombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombre)
            Me.columnMonto = New Global.System.Data.DataColumn("Monto", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMonto)
            Me.columnCod_Moneda = New Global.System.Data.DataColumn("Cod_Moneda", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCod_Moneda)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnId}, true))
            Me.columnId.AutoIncrement = true
            Me.columnId.AllowDBNull = false
            Me.columnId.ReadOnly = true
            Me.columnId.Unique = true
            Me.columnId_PlanillaDetalle.AllowDBNull = false
            Me.columnCod_Deduccion.AllowDBNull = false
            Me.columnNombre.AllowDBNull = false
            Me.columnMonto.AllowDBNull = false
            Me.columnCod_Moneda.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPlanilla_DeduccionesRow() As Planilla_DeduccionesRow
            Return CType(Me.NewRow,Planilla_DeduccionesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Planilla_DeduccionesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Planilla_DeduccionesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Planilla_DeduccionesRowChangedEvent) Is Nothing) Then
                RaiseEvent Planilla_DeduccionesRowChanged(Me, New Planilla_DeduccionesRowChangeEvent(CType(e.Row,Planilla_DeduccionesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Planilla_DeduccionesRowChangingEvent) Is Nothing) Then
                RaiseEvent Planilla_DeduccionesRowChanging(Me, New Planilla_DeduccionesRowChangeEvent(CType(e.Row,Planilla_DeduccionesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Planilla_DeduccionesRowDeletedEvent) Is Nothing) Then
                RaiseEvent Planilla_DeduccionesRowDeleted(Me, New Planilla_DeduccionesRowChangeEvent(CType(e.Row,Planilla_DeduccionesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Planilla_DeduccionesRowDeletingEvent) Is Nothing) Then
                RaiseEvent Planilla_DeduccionesRowDeleting(Me, New Planilla_DeduccionesRowChangeEvent(CType(e.Row,Planilla_DeduccionesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePlanilla_DeduccionesRow(ByVal row As Planilla_DeduccionesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsPlanilla = New dsPlanilla
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Planilla_DeduccionesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Planilla_DetalleDataTable
        Inherits Global.System.Data.TypedTableBase(Of Planilla_DetalleRow)
        
        Private columnId As Global.System.Data.DataColumn
        
        Private columnId_Planilla As Global.System.Data.DataColumn
        
        Private columnCedula As Global.System.Data.DataColumn
        
        Private columnNombre As Global.System.Data.DataColumn
        
        Private columnPuesto As Global.System.Data.DataColumn
        
        Private columnSalario As Global.System.Data.DataColumn
        
        Private columnFormaPago As Global.System.Data.DataColumn
        
        Private columnOrdinaria As Global.System.Data.DataColumn
        
        Private columnExtra As Global.System.Data.DataColumn
        
        Private columnDoble As Global.System.Data.DataColumn
        
        Private columnSalarioBruto As Global.System.Data.DataColumn
        
        Private columnAdelantos As Global.System.Data.DataColumn
        
        Private columnPrestamos As Global.System.Data.DataColumn
        
        Private columnRenta As Global.System.Data.DataColumn
        
        Private columnTotalDeducciones As Global.System.Data.DataColumn
        
        Private columnSalarioNeto As Global.System.Data.DataColumn
        
        Private columnCod_Moneda As Global.System.Data.DataColumn
        
        Private columnFeriada As Global.System.Data.DataColumn
        
        Private columnPrestamos_Int As Global.System.Data.DataColumn
        
        Private columnOtros_Ingresos As Global.System.Data.DataColumn
        
        Private columnCuentasxCobrar As Global.System.Data.DataColumn
        
        Private columnOrd_Nocturna As Global.System.Data.DataColumn
        
        Private columnExt_Nocturna As Global.System.Data.DataColumn
        
        Private columnDiasLibre As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Planilla_Detalle"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnId
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Id_PlanillaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnId_Planilla
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CedulaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCedula
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PuestoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPuesto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SalarioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSalario
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FormaPagoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFormaPago
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OrdinariaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOrdinaria
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ExtraColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnExtra
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DobleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDoble
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SalarioBrutoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSalarioBruto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AdelantosColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAdelantos
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrestamosColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrestamos
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RentaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRenta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalDeduccionesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalDeducciones
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SalarioNetoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSalarioNeto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Cod_MonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCod_Moneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FeriadaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFeriada
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Prestamos_IntColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrestamos_Int
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Otros_IngresosColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOtros_Ingresos
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CuentasxCobrarColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCuentasxCobrar
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Ord_NocturnaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOrd_Nocturna
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Ext_NocturnaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnExt_Nocturna
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DiasLibreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDiasLibre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Planilla_DetalleRow
            Get
                Return CType(Me.Rows(index),Planilla_DetalleRow)
            End Get
        End Property
        
        Public Event Planilla_DetalleRowChanging As Planilla_DetalleRowChangeEventHandler
        
        Public Event Planilla_DetalleRowChanged As Planilla_DetalleRowChangeEventHandler
        
        Public Event Planilla_DetalleRowDeleting As Planilla_DetalleRowChangeEventHandler
        
        Public Event Planilla_DetalleRowDeleted As Planilla_DetalleRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPlanilla_DetalleRow(ByVal row As Planilla_DetalleRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPlanilla_DetalleRow( _
                    ByVal parentPlanillaRowByPlanillaPlanilla_Detalle As PlanillaRow,  _
                    ByVal Cedula As String,  _
                    ByVal Nombre As String,  _
                    ByVal Puesto As String,  _
                    ByVal Salario As Double,  _
                    ByVal FormaPago As String,  _
                    ByVal Ordinaria As Double,  _
                    ByVal Extra As Double,  _
                    ByVal Doble As Double,  _
                    ByVal SalarioBruto As Double,  _
                    ByVal Adelantos As Double,  _
                    ByVal Prestamos As Double,  _
                    ByVal Renta As Double,  _
                    ByVal TotalDeducciones As Double,  _
                    ByVal SalarioNeto As Double,  _
                    ByVal Cod_Moneda As Integer,  _
                    ByVal Feriada As Double,  _
                    ByVal Prestamos_Int As Double,  _
                    ByVal Otros_Ingresos As Double,  _
                    ByVal CuentasxCobrar As Double,  _
                    ByVal Ord_Nocturna As Double,  _
                    ByVal Ext_Nocturna As Double,  _
                    ByVal DiasLibre As Single) As Planilla_DetalleRow
            Dim rowPlanilla_DetalleRow As Planilla_DetalleRow = CType(Me.NewRow,Planilla_DetalleRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Nothing, Cedula, Nombre, Puesto, Salario, FormaPago, Ordinaria, Extra, Doble, SalarioBruto, Adelantos, Prestamos, Renta, TotalDeducciones, SalarioNeto, Cod_Moneda, Feriada, Prestamos_Int, Otros_Ingresos, CuentasxCobrar, Ord_Nocturna, Ext_Nocturna, DiasLibre}
            If (Not (parentPlanillaRowByPlanillaPlanilla_Detalle) Is Nothing) Then
                columnValuesArray(1) = parentPlanillaRowByPlanillaPlanilla_Detalle(0)
            End If
            rowPlanilla_DetalleRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPlanilla_DetalleRow)
            Return rowPlanilla_DetalleRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindById(ByVal Id As Long) As Planilla_DetalleRow
            Return CType(Me.Rows.Find(New Object() {Id}),Planilla_DetalleRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Planilla_DetalleDataTable = CType(MyBase.Clone,Planilla_DetalleDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Planilla_DetalleDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnId = MyBase.Columns("Id")
            Me.columnId_Planilla = MyBase.Columns("Id_Planilla")
            Me.columnCedula = MyBase.Columns("Cedula")
            Me.columnNombre = MyBase.Columns("Nombre")
            Me.columnPuesto = MyBase.Columns("Puesto")
            Me.columnSalario = MyBase.Columns("Salario")
            Me.columnFormaPago = MyBase.Columns("FormaPago")
            Me.columnOrdinaria = MyBase.Columns("Ordinaria")
            Me.columnExtra = MyBase.Columns("Extra")
            Me.columnDoble = MyBase.Columns("Doble")
            Me.columnSalarioBruto = MyBase.Columns("SalarioBruto")
            Me.columnAdelantos = MyBase.Columns("Adelantos")
            Me.columnPrestamos = MyBase.Columns("Prestamos")
            Me.columnRenta = MyBase.Columns("Renta")
            Me.columnTotalDeducciones = MyBase.Columns("TotalDeducciones")
            Me.columnSalarioNeto = MyBase.Columns("SalarioNeto")
            Me.columnCod_Moneda = MyBase.Columns("Cod_Moneda")
            Me.columnFeriada = MyBase.Columns("Feriada")
            Me.columnPrestamos_Int = MyBase.Columns("Prestamos_Int")
            Me.columnOtros_Ingresos = MyBase.Columns("Otros_Ingresos")
            Me.columnCuentasxCobrar = MyBase.Columns("CuentasxCobrar")
            Me.columnOrd_Nocturna = MyBase.Columns("Ord_Nocturna")
            Me.columnExt_Nocturna = MyBase.Columns("Ext_Nocturna")
            Me.columnDiasLibre = MyBase.Columns("DiasLibre")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnId = New Global.System.Data.DataColumn("Id", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnId)
            Me.columnId_Planilla = New Global.System.Data.DataColumn("Id_Planilla", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnId_Planilla)
            Me.columnCedula = New Global.System.Data.DataColumn("Cedula", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCedula)
            Me.columnNombre = New Global.System.Data.DataColumn("Nombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombre)
            Me.columnPuesto = New Global.System.Data.DataColumn("Puesto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPuesto)
            Me.columnSalario = New Global.System.Data.DataColumn("Salario", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSalario)
            Me.columnFormaPago = New Global.System.Data.DataColumn("FormaPago", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFormaPago)
            Me.columnOrdinaria = New Global.System.Data.DataColumn("Ordinaria", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrdinaria)
            Me.columnExtra = New Global.System.Data.DataColumn("Extra", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnExtra)
            Me.columnDoble = New Global.System.Data.DataColumn("Doble", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDoble)
            Me.columnSalarioBruto = New Global.System.Data.DataColumn("SalarioBruto", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSalarioBruto)
            Me.columnAdelantos = New Global.System.Data.DataColumn("Adelantos", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAdelantos)
            Me.columnPrestamos = New Global.System.Data.DataColumn("Prestamos", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrestamos)
            Me.columnRenta = New Global.System.Data.DataColumn("Renta", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRenta)
            Me.columnTotalDeducciones = New Global.System.Data.DataColumn("TotalDeducciones", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalDeducciones)
            Me.columnSalarioNeto = New Global.System.Data.DataColumn("SalarioNeto", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSalarioNeto)
            Me.columnCod_Moneda = New Global.System.Data.DataColumn("Cod_Moneda", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCod_Moneda)
            Me.columnFeriada = New Global.System.Data.DataColumn("Feriada", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFeriada)
            Me.columnPrestamos_Int = New Global.System.Data.DataColumn("Prestamos_Int", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrestamos_Int)
            Me.columnOtros_Ingresos = New Global.System.Data.DataColumn("Otros_Ingresos", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOtros_Ingresos)
            Me.columnCuentasxCobrar = New Global.System.Data.DataColumn("CuentasxCobrar", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCuentasxCobrar)
            Me.columnOrd_Nocturna = New Global.System.Data.DataColumn("Ord_Nocturna", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrd_Nocturna)
            Me.columnExt_Nocturna = New Global.System.Data.DataColumn("Ext_Nocturna", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnExt_Nocturna)
            Me.columnDiasLibre = New Global.System.Data.DataColumn("DiasLibre", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDiasLibre)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnId}, true))
            Me.columnId.AutoIncrement = true
            Me.columnId.AllowDBNull = false
            Me.columnId.ReadOnly = true
            Me.columnId.Unique = true
            Me.columnId_Planilla.AllowDBNull = false
            Me.columnCedula.AllowDBNull = false
            Me.columnNombre.AllowDBNull = false
            Me.columnPuesto.AllowDBNull = false
            Me.columnSalario.AllowDBNull = false
            Me.columnFormaPago.AllowDBNull = false
            Me.columnOrdinaria.AllowDBNull = false
            Me.columnExtra.AllowDBNull = false
            Me.columnDoble.AllowDBNull = false
            Me.columnSalarioBruto.AllowDBNull = false
            Me.columnAdelantos.AllowDBNull = false
            Me.columnPrestamos.AllowDBNull = false
            Me.columnRenta.AllowDBNull = false
            Me.columnTotalDeducciones.AllowDBNull = false
            Me.columnSalarioNeto.AllowDBNull = false
            Me.columnCod_Moneda.AllowDBNull = false
            Me.columnFeriada.AllowDBNull = false
            Me.columnPrestamos_Int.AllowDBNull = false
            Me.columnOtros_Ingresos.AllowDBNull = false
            Me.columnCuentasxCobrar.AllowDBNull = false
            Me.columnOrd_Nocturna.AllowDBNull = false
            Me.columnExt_Nocturna.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPlanilla_DetalleRow() As Planilla_DetalleRow
            Return CType(Me.NewRow,Planilla_DetalleRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Planilla_DetalleRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Planilla_DetalleRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Planilla_DetalleRowChangedEvent) Is Nothing) Then
                RaiseEvent Planilla_DetalleRowChanged(Me, New Planilla_DetalleRowChangeEvent(CType(e.Row,Planilla_DetalleRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Planilla_DetalleRowChangingEvent) Is Nothing) Then
                RaiseEvent Planilla_DetalleRowChanging(Me, New Planilla_DetalleRowChangeEvent(CType(e.Row,Planilla_DetalleRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Planilla_DetalleRowDeletedEvent) Is Nothing) Then
                RaiseEvent Planilla_DetalleRowDeleted(Me, New Planilla_DetalleRowChangeEvent(CType(e.Row,Planilla_DetalleRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Planilla_DetalleRowDeletingEvent) Is Nothing) Then
                RaiseEvent Planilla_DetalleRowDeleting(Me, New Planilla_DetalleRowChangeEvent(CType(e.Row,Planilla_DetalleRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePlanilla_DetalleRow(ByVal row As Planilla_DetalleRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsPlanilla = New dsPlanilla
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Planilla_DetalleDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Deduccion_EmpleadoDataTable
        Inherits Global.System.Data.TypedTableBase(Of Deduccion_EmpleadoRow)
        
        Private columnId_Deduccion As Global.System.Data.DataColumn
        
        Private columnId_Detalle As Global.System.Data.DataColumn
        
        Private columnCCSS As Global.System.Data.DataColumn
        
        Private columnALIMENTACION As Global.System.Data.DataColumn
        
        Private columnCAMISETAS As Global.System.Data.DataColumn
        
        Private columnPENSION As Global.System.Data.DataColumn
        
        Private columnCodMoneda As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Deduccion_Empleado"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Id_DeduccionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnId_Deduccion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Id_DetalleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnId_Detalle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CCSSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCCSS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ALIMENTACIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnALIMENTACION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CAMISETASColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCAMISETAS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PENSIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPENSION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Deduccion_EmpleadoRow
            Get
                Return CType(Me.Rows(index),Deduccion_EmpleadoRow)
            End Get
        End Property
        
        Public Event Deduccion_EmpleadoRowChanging As Deduccion_EmpleadoRowChangeEventHandler
        
        Public Event Deduccion_EmpleadoRowChanged As Deduccion_EmpleadoRowChangeEventHandler
        
        Public Event Deduccion_EmpleadoRowDeleting As Deduccion_EmpleadoRowChangeEventHandler
        
        Public Event Deduccion_EmpleadoRowDeleted As Deduccion_EmpleadoRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddDeduccion_EmpleadoRow(ByVal row As Deduccion_EmpleadoRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddDeduccion_EmpleadoRow(ByVal parentPlanilla_DetalleRowByPlanilla_DetalleDeduccion_Empleado As Planilla_DetalleRow, ByVal CCSS As Double, ByVal ALIMENTACION As Double, ByVal CAMISETAS As Double, ByVal PENSION As Double, ByVal CodMoneda As Integer) As Deduccion_EmpleadoRow
            Dim rowDeduccion_EmpleadoRow As Deduccion_EmpleadoRow = CType(Me.NewRow,Deduccion_EmpleadoRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Nothing, CCSS, ALIMENTACION, CAMISETAS, PENSION, CodMoneda}
            If (Not (parentPlanilla_DetalleRowByPlanilla_DetalleDeduccion_Empleado) Is Nothing) Then
                columnValuesArray(1) = parentPlanilla_DetalleRowByPlanilla_DetalleDeduccion_Empleado(0)
            End If
            rowDeduccion_EmpleadoRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowDeduccion_EmpleadoRow)
            Return rowDeduccion_EmpleadoRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindById_Deduccion(ByVal Id_Deduccion As Long) As Deduccion_EmpleadoRow
            Return CType(Me.Rows.Find(New Object() {Id_Deduccion}),Deduccion_EmpleadoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Deduccion_EmpleadoDataTable = CType(MyBase.Clone,Deduccion_EmpleadoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Deduccion_EmpleadoDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnId_Deduccion = MyBase.Columns("Id_Deduccion")
            Me.columnId_Detalle = MyBase.Columns("Id_Detalle")
            Me.columnCCSS = MyBase.Columns("CCSS")
            Me.columnALIMENTACION = MyBase.Columns("ALIMENTACION")
            Me.columnCAMISETAS = MyBase.Columns("CAMISETAS")
            Me.columnPENSION = MyBase.Columns("PENSION")
            Me.columnCodMoneda = MyBase.Columns("CodMoneda")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnId_Deduccion = New Global.System.Data.DataColumn("Id_Deduccion", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnId_Deduccion)
            Me.columnId_Detalle = New Global.System.Data.DataColumn("Id_Detalle", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnId_Detalle)
            Me.columnCCSS = New Global.System.Data.DataColumn("CCSS", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCCSS)
            Me.columnALIMENTACION = New Global.System.Data.DataColumn("ALIMENTACION", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnALIMENTACION)
            Me.columnCAMISETAS = New Global.System.Data.DataColumn("CAMISETAS", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCAMISETAS)
            Me.columnPENSION = New Global.System.Data.DataColumn("PENSION", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPENSION)
            Me.columnCodMoneda = New Global.System.Data.DataColumn("CodMoneda", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodMoneda)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnId_Deduccion}, true))
            Me.columnId_Deduccion.AutoIncrement = true
            Me.columnId_Deduccion.AllowDBNull = false
            Me.columnId_Deduccion.ReadOnly = true
            Me.columnId_Deduccion.Unique = true
            Me.columnId_Detalle.AllowDBNull = false
            Me.columnCCSS.AllowDBNull = false
            Me.columnALIMENTACION.AllowDBNull = false
            Me.columnCAMISETAS.AllowDBNull = false
            Me.columnPENSION.AllowDBNull = false
            Me.columnCodMoneda.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewDeduccion_EmpleadoRow() As Deduccion_EmpleadoRow
            Return CType(Me.NewRow,Deduccion_EmpleadoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Deduccion_EmpleadoRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Deduccion_EmpleadoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Deduccion_EmpleadoRowChangedEvent) Is Nothing) Then
                RaiseEvent Deduccion_EmpleadoRowChanged(Me, New Deduccion_EmpleadoRowChangeEvent(CType(e.Row,Deduccion_EmpleadoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Deduccion_EmpleadoRowChangingEvent) Is Nothing) Then
                RaiseEvent Deduccion_EmpleadoRowChanging(Me, New Deduccion_EmpleadoRowChangeEvent(CType(e.Row,Deduccion_EmpleadoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Deduccion_EmpleadoRowDeletedEvent) Is Nothing) Then
                RaiseEvent Deduccion_EmpleadoRowDeleted(Me, New Deduccion_EmpleadoRowChangeEvent(CType(e.Row,Deduccion_EmpleadoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Deduccion_EmpleadoRowDeletingEvent) Is Nothing) Then
                RaiseEvent Deduccion_EmpleadoRowDeleting(Me, New Deduccion_EmpleadoRowChangeEvent(CType(e.Row,Deduccion_EmpleadoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveDeduccion_EmpleadoRow(ByVal row As Deduccion_EmpleadoRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsPlanilla = New dsPlanilla
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Deduccion_EmpleadoDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class AdelantoPruebaRow
        Inherits Global.System.Data.DataRow
        
        Private tableAdelantoPrueba As AdelantoPruebaDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableAdelantoPrueba = CType(Me.Table,AdelantoPruebaDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Numero() As Long
            Get
                Try 
                    Return CType(Me(Me.tableAdelantoPrueba.NumeroColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Numero' in table 'AdelantoPrueba' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAdelantoPrueba.NumeroColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Identificacion() As String
            Get
                Try 
                    Return CType(Me(Me.tableAdelantoPrueba.IdentificacionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Identificacion' in table 'AdelantoPrueba' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAdelantoPrueba.IdentificacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DeducirxPago() As Double
            Get
                Try 
                    Return CType(Me(Me.tableAdelantoPrueba.DeducirxPagoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DeducirxPago' in table 'AdelantoPrueba' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAdelantoPrueba.DeducirxPagoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Saldo() As Double
            Get
                Try 
                    Return CType(Me(Me.tableAdelantoPrueba.SaldoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Saldo' in table 'AdelantoPrueba' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAdelantoPrueba.SaldoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNumeroNull() As Boolean
            Return Me.IsNull(Me.tableAdelantoPrueba.NumeroColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNumeroNull()
            Me(Me.tableAdelantoPrueba.NumeroColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIdentificacionNull() As Boolean
            Return Me.IsNull(Me.tableAdelantoPrueba.IdentificacionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIdentificacionNull()
            Me(Me.tableAdelantoPrueba.IdentificacionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDeducirxPagoNull() As Boolean
            Return Me.IsNull(Me.tableAdelantoPrueba.DeducirxPagoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDeducirxPagoNull()
            Me(Me.tableAdelantoPrueba.DeducirxPagoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSaldoNull() As Boolean
            Return Me.IsNull(Me.tableAdelantoPrueba.SaldoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSaldoNull()
            Me(Me.tableAdelantoPrueba.SaldoColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ConsultaSaldosRow
        Inherits Global.System.Data.DataRow
        
        Private tableConsultaSaldos As ConsultaSaldosDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableConsultaSaldos = CType(Me.Table,ConsultaSaldosDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cod_Cliente() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableConsultaSaldos.Cod_ClienteColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Cod_Cliente' in table 'ConsultaSaldos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConsultaSaldos.Cod_ClienteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SaldoActual() As Double
            Get
                Try 
                    Return CType(Me(Me.tableConsultaSaldos.SaldoActualColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SaldoActual' in table 'ConsultaSaldos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConsultaSaldos.SaldoActualColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cod_Moneda() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableConsultaSaldos.Cod_MonedaColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Cod_Moneda' in table 'ConsultaSaldos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConsultaSaldos.Cod_MonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Intereses() As Double
            Get
                Try 
                    Return CType(Me(Me.tableConsultaSaldos.InteresesColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Intereses' in table 'ConsultaSaldos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConsultaSaldos.InteresesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tipo_Cambio() As Double
            Get
                Try 
                    Return CType(Me(Me.tableConsultaSaldos.Tipo_CambioColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Tipo_Cambio' in table 'ConsultaSaldos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConsultaSaldos.Tipo_CambioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Num_Factura() As String
            Get
                Try 
                    Return CType(Me(Me.tableConsultaSaldos.Num_FacturaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Num_Factura' in table 'ConsultaSaldos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConsultaSaldos.Num_FacturaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cobrar() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableConsultaSaldos.CobrarColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Cobrar' in table 'ConsultaSaldos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConsultaSaldos.CobrarColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Id_Empleado() As String
            Get
                Try 
                    Return CType(Me(Me.tableConsultaSaldos.Id_EmpleadoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Id_Empleado' in table 'ConsultaSaldos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConsultaSaldos.Id_EmpleadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableConsultaSaldos.IdColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Id' in table 'ConsultaSaldos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConsultaSaldos.IdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Fecha() As Date
            Get
                Try 
                    Return CType(Me(Me.tableConsultaSaldos.FechaColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Fecha' in table 'ConsultaSaldos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConsultaSaldos.FechaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCod_ClienteNull() As Boolean
            Return Me.IsNull(Me.tableConsultaSaldos.Cod_ClienteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCod_ClienteNull()
            Me(Me.tableConsultaSaldos.Cod_ClienteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSaldoActualNull() As Boolean
            Return Me.IsNull(Me.tableConsultaSaldos.SaldoActualColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSaldoActualNull()
            Me(Me.tableConsultaSaldos.SaldoActualColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCod_MonedaNull() As Boolean
            Return Me.IsNull(Me.tableConsultaSaldos.Cod_MonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCod_MonedaNull()
            Me(Me.tableConsultaSaldos.Cod_MonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInteresesNull() As Boolean
            Return Me.IsNull(Me.tableConsultaSaldos.InteresesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInteresesNull()
            Me(Me.tableConsultaSaldos.InteresesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTipo_CambioNull() As Boolean
            Return Me.IsNull(Me.tableConsultaSaldos.Tipo_CambioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTipo_CambioNull()
            Me(Me.tableConsultaSaldos.Tipo_CambioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNum_FacturaNull() As Boolean
            Return Me.IsNull(Me.tableConsultaSaldos.Num_FacturaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNum_FacturaNull()
            Me(Me.tableConsultaSaldos.Num_FacturaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCobrarNull() As Boolean
            Return Me.IsNull(Me.tableConsultaSaldos.CobrarColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCobrarNull()
            Me(Me.tableConsultaSaldos.CobrarColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsId_EmpleadoNull() As Boolean
            Return Me.IsNull(Me.tableConsultaSaldos.Id_EmpleadoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetId_EmpleadoNull()
            Me(Me.tableConsultaSaldos.Id_EmpleadoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIdNull() As Boolean
            Return Me.IsNull(Me.tableConsultaSaldos.IdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIdNull()
            Me(Me.tableConsultaSaldos.IdColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaNull() As Boolean
            Return Me.IsNull(Me.tableConsultaSaldos.FechaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaNull()
            Me(Me.tableConsultaSaldos.FechaColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Facturas_CobrarRow
        Inherits Global.System.Data.DataRow
        
        Private tableFacturas_Cobrar As Facturas_CobrarDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFacturas_Cobrar = CType(Me.Table,Facturas_CobrarDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NumeroFactura() As String
            Get
                Try 
                    Return CType(Me(Me.tableFacturas_Cobrar.NumeroFacturaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NumeroFactura' in table 'Facturas_Cobrar' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFacturas_Cobrar.NumeroFacturaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cobrar() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableFacturas_Cobrar.CobrarColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Cobrar' in table 'Facturas_Cobrar' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFacturas_Cobrar.CobrarColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Total() As Single
            Get
                Try 
                    Return CType(Me(Me.tableFacturas_Cobrar.TotalColumn),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Total' in table 'Facturas_Cobrar' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFacturas_Cobrar.TotalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Fecha() As Date
            Get
                Try 
                    Return CType(Me(Me.tableFacturas_Cobrar.FechaColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Fecha' in table 'Facturas_Cobrar' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFacturas_Cobrar.FechaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Id_Factura() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableFacturas_Cobrar.Id_FacturaColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Id_Factura' in table 'Facturas_Cobrar' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFacturas_Cobrar.Id_FacturaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNumeroFacturaNull() As Boolean
            Return Me.IsNull(Me.tableFacturas_Cobrar.NumeroFacturaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNumeroFacturaNull()
            Me(Me.tableFacturas_Cobrar.NumeroFacturaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCobrarNull() As Boolean
            Return Me.IsNull(Me.tableFacturas_Cobrar.CobrarColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCobrarNull()
            Me(Me.tableFacturas_Cobrar.CobrarColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalNull() As Boolean
            Return Me.IsNull(Me.tableFacturas_Cobrar.TotalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalNull()
            Me(Me.tableFacturas_Cobrar.TotalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaNull() As Boolean
            Return Me.IsNull(Me.tableFacturas_Cobrar.FechaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaNull()
            Me(Me.tableFacturas_Cobrar.FechaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsId_FacturaNull() As Boolean
            Return Me.IsNull(Me.tableFacturas_Cobrar.Id_FacturaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetId_FacturaNull()
            Me(Me.tableFacturas_Cobrar.Id_FacturaColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class abonoccobrarRow
        Inherits Global.System.Data.DataRow
        
        Private tableabonoccobrar As abonoccobrarDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableabonoccobrar = CType(Me.Table,abonoccobrarDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Id_Recibo() As Long
            Get
                Return CType(Me(Me.tableabonoccobrar.Id_ReciboColumn),Long)
            End Get
            Set
                Me(Me.tableabonoccobrar.Id_ReciboColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Num_Recibo() As Long
            Get
                Return CType(Me(Me.tableabonoccobrar.Num_ReciboColumn),Long)
            End Get
            Set
                Me(Me.tableabonoccobrar.Num_ReciboColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cod_Cliente() As Integer
            Get
                Return CType(Me(Me.tableabonoccobrar.Cod_ClienteColumn),Integer)
            End Get
            Set
                Me(Me.tableabonoccobrar.Cod_ClienteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nombre_Cliente() As String
            Get
                Return CType(Me(Me.tableabonoccobrar.Nombre_ClienteColumn),String)
            End Get
            Set
                Me(Me.tableabonoccobrar.Nombre_ClienteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Saldo_Cuenta() As Double
            Get
                Return CType(Me(Me.tableabonoccobrar.Saldo_CuentaColumn),Double)
            End Get
            Set
                Me(Me.tableabonoccobrar.Saldo_CuentaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Monto() As Double
            Get
                Return CType(Me(Me.tableabonoccobrar.MontoColumn),Double)
            End Get
            Set
                Me(Me.tableabonoccobrar.MontoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Saldo_Actual() As Double
            Get
                Return CType(Me(Me.tableabonoccobrar.Saldo_ActualColumn),Double)
            End Get
            Set
                Me(Me.tableabonoccobrar.Saldo_ActualColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Fecha() As Date
            Get
                Return CType(Me(Me.tableabonoccobrar.FechaColumn),Date)
            End Get
            Set
                Me(Me.tableabonoccobrar.FechaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Observaciones() As String
            Get
                Return CType(Me(Me.tableabonoccobrar.ObservacionesColumn),String)
            End Get
            Set
                Me(Me.tableabonoccobrar.ObservacionesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Anula() As Boolean
            Get
                Return CType(Me(Me.tableabonoccobrar.AnulaColumn),Boolean)
            End Get
            Set
                Me(Me.tableabonoccobrar.AnulaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ced_Usuario() As String
            Get
                Return CType(Me(Me.tableabonoccobrar.Ced_UsuarioColumn),String)
            End Get
            Set
                Me(Me.tableabonoccobrar.Ced_UsuarioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Contabilizado() As Boolean
            Get
                Return CType(Me(Me.tableabonoccobrar.ContabilizadoColumn),Boolean)
            End Get
            Set
                Me(Me.tableabonoccobrar.ContabilizadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Asiento() As String
            Get
                Return CType(Me(Me.tableabonoccobrar.AsientoColumn),String)
            End Get
            Set
                Me(Me.tableabonoccobrar.AsientoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cod_Moneda() As Integer
            Get
                Return CType(Me(Me.tableabonoccobrar.Cod_MonedaColumn),Integer)
            End Get
            Set
                Me(Me.tableabonoccobrar.Cod_MonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Id_Planilla() As Integer
            Get
                Return CType(Me(Me.tableabonoccobrar.Id_PlanillaColumn),Integer)
            End Get
            Set
                Me(Me.tableabonoccobrar.Id_PlanillaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Getdetalle_abonoccobrarRows() As detalle_abonoccobrarRow()
            If (Me.Table.ChildRelations("abonoccobrardetalle_abonoccobrar") Is Nothing) Then
                Return New detalle_abonoccobrarRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("abonoccobrardetalle_abonoccobrar")),detalle_abonoccobrarRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class AccionPersonalRow
        Inherits Global.System.Data.DataRow
        
        Private tableAccionPersonal As AccionPersonalDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableAccionPersonal = CType(Me.Table,AccionPersonalDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Num_Accion() As Long
            Get
                Return CType(Me(Me.tableAccionPersonal.Num_AccionColumn),Long)
            End Get
            Set
                Me(Me.tableAccionPersonal.Num_AccionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Id_Empleado() As String
            Get
                Return CType(Me(Me.tableAccionPersonal.Id_EmpleadoColumn),String)
            End Get
            Set
                Me(Me.tableAccionPersonal.Id_EmpleadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nombre_Empleado() As String
            Get
                Return CType(Me(Me.tableAccionPersonal.Nombre_EmpleadoColumn),String)
            End Get
            Set
                Me(Me.tableAccionPersonal.Nombre_EmpleadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Puesto() As String
            Get
                Return CType(Me(Me.tableAccionPersonal.PuestoColumn),String)
            End Get
            Set
                Me(Me.tableAccionPersonal.PuestoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Id_Accion() As Integer
            Get
                Return CType(Me(Me.tableAccionPersonal.Id_AccionColumn),Integer)
            End Get
            Set
                Me(Me.tableAccionPersonal.Id_AccionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Fecha() As Date
            Get
                Return CType(Me(Me.tableAccionPersonal.FechaColumn),Date)
            End Get
            Set
                Me(Me.tableAccionPersonal.FechaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Observaciones() As String
            Get
                Return CType(Me(Me.tableAccionPersonal.ObservacionesColumn),String)
            End Get
            Set
                Me(Me.tableAccionPersonal.ObservacionesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RigeDesde() As Date
            Get
                Return CType(Me(Me.tableAccionPersonal.RigeDesdeColumn),Date)
            End Get
            Set
                Me(Me.tableAccionPersonal.RigeDesdeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RigeHasta() As Date
            Get
                Return CType(Me(Me.tableAccionPersonal.RigeHastaColumn),Date)
            End Get
            Set
                Me(Me.tableAccionPersonal.RigeHastaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DiasaDescontar() As Double
            Get
                Return CType(Me(Me.tableAccionPersonal.DiasaDescontarColumn),Double)
            End Get
            Set
                Me(Me.tableAccionPersonal.DiasaDescontarColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HechoPor() As String
            Get
                Return CType(Me(Me.tableAccionPersonal.HechoPorColumn),String)
            End Get
            Set
                Me(Me.tableAccionPersonal.HechoPorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombreUsuario() As String
            Get
                Return CType(Me(Me.tableAccionPersonal.NombreUsuarioColumn),String)
            End Get
            Set
                Me(Me.tableAccionPersonal.NombreUsuarioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Anula() As Boolean
            Get
                Return CType(Me(Me.tableAccionPersonal.AnulaColumn),Boolean)
            End Get
            Set
                Me(Me.tableAccionPersonal.AnulaColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class AdelantosRow
        Inherits Global.System.Data.DataRow
        
        Private tableAdelantos As AdelantosDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableAdelantos = CType(Me.Table,AdelantosDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Numero() As Long
            Get
                Return CType(Me(Me.tableAdelantos.NumeroColumn),Long)
            End Get
            Set
                Me(Me.tableAdelantos.NumeroColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Identificacion() As String
            Get
                Return CType(Me(Me.tableAdelantos.IdentificacionColumn),String)
            End Get
            Set
                Me(Me.tableAdelantos.IdentificacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nombre() As String
            Get
                Return CType(Me(Me.tableAdelantos.NombreColumn),String)
            End Get
            Set
                Me(Me.tableAdelantos.NombreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Adelanto() As Boolean
            Get
                Return CType(Me(Me.tableAdelantos.AdelantoColumn),Boolean)
            End Get
            Set
                Me(Me.tableAdelantos.AdelantoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Prestamo() As Boolean
            Get
                Return CType(Me(Me.tableAdelantos.PrestamoColumn),Boolean)
            End Get
            Set
                Me(Me.tableAdelantos.PrestamoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Puesto() As String
            Get
                Return CType(Me(Me.tableAdelantos.PuestoColumn),String)
            End Get
            Set
                Me(Me.tableAdelantos.PuestoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Salario() As Double
            Get
                Return CType(Me(Me.tableAdelantos.SalarioColumn),Double)
            End Get
            Set
                Me(Me.tableAdelantos.SalarioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaComprobante() As Date
            Get
                Return CType(Me(Me.tableAdelantos.FechaComprobanteColumn),Date)
            End Get
            Set
                Me(Me.tableAdelantos.FechaComprobanteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Num_Pago() As Integer
            Get
                Return CType(Me(Me.tableAdelantos.Num_PagoColumn),Integer)
            End Get
            Set
                Me(Me.tableAdelantos.Num_PagoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Monto() As Double
            Get
                Return CType(Me(Me.tableAdelantos.MontoColumn),Double)
            End Get
            Set
                Me(Me.tableAdelantos.MontoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontoEnLetras() As String
            Get
                Return CType(Me(Me.tableAdelantos.MontoEnLetrasColumn),String)
            End Get
            Set
                Me(Me.tableAdelantos.MontoEnLetrasColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaCobro() As Date
            Get
                Return CType(Me(Me.tableAdelantos.FechaCobroColumn),Date)
            End Get
            Set
                Me(Me.tableAdelantos.FechaCobroColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Observaciones() As String
            Get
                Return CType(Me(Me.tableAdelantos.ObservacionesColumn),String)
            End Get
            Set
                Me(Me.tableAdelantos.ObservacionesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DeducirxPago() As Double
            Get
                Return CType(Me(Me.tableAdelantos.DeducirxPagoColumn),Double)
            End Get
            Set
                Me(Me.tableAdelantos.DeducirxPagoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Usuario() As String
            Get
                Return CType(Me(Me.tableAdelantos.UsuarioColumn),String)
            End Get
            Set
                Me(Me.tableAdelantos.UsuarioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombreUsuario() As String
            Get
                Return CType(Me(Me.tableAdelantos.NombreUsuarioColumn),String)
            End Get
            Set
                Me(Me.tableAdelantos.NombreUsuarioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cod_Moneda() As Integer
            Get
                Return CType(Me(Me.tableAdelantos.Cod_MonedaColumn),Integer)
            End Get
            Set
                Me(Me.tableAdelantos.Cod_MonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Anulado() As Boolean
            Get
                Return CType(Me(Me.tableAdelantos.AnuladoColumn),Boolean)
            End Get
            Set
                Me(Me.tableAdelantos.AnuladoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Saldo() As Double
            Get
                Try 
                    Return CType(Me(Me.tableAdelantos.SaldoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Saldo' in table 'Adelantos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAdelantos.SaldoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InteresPrestamo() As Double
            Get
                Return CType(Me(Me.tableAdelantos.InteresPrestamoColumn),Double)
            End Get
            Set
                Me(Me.tableAdelantos.InteresPrestamoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSaldoNull() As Boolean
            Return Me.IsNull(Me.tableAdelantos.SaldoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSaldoNull()
            Me(Me.tableAdelantos.SaldoColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Adelantos_DetalleRow
        Inherits Global.System.Data.DataRow
        
        Private tableAdelantos_Detalle As Adelantos_DetalleDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableAdelantos_Detalle = CType(Me.Table,Adelantos_DetalleDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Id_Detalle_AP() As Integer
            Get
                Return CType(Me(Me.tableAdelantos_Detalle.Id_Detalle_APColumn),Integer)
            End Get
            Set
                Me(Me.tableAdelantos_Detalle.Id_Detalle_APColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Id_Empleado() As String
            Get
                Return CType(Me(Me.tableAdelantos_Detalle.Id_EmpleadoColumn),String)
            End Get
            Set
                Me(Me.tableAdelantos_Detalle.Id_EmpleadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Numero() As Long
            Get
                Return CType(Me(Me.tableAdelantos_Detalle.NumeroColumn),Long)
            End Get
            Set
                Me(Me.tableAdelantos_Detalle.NumeroColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Monto() As Double
            Get
                Return CType(Me(Me.tableAdelantos_Detalle.MontoColumn),Double)
            End Get
            Set
                Me(Me.tableAdelantos_Detalle.MontoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tipo_Pago() As Boolean
            Get
                Return CType(Me(Me.tableAdelantos_Detalle.Tipo_PagoColumn),Boolean)
            End Get
            Set
                Me(Me.tableAdelantos_Detalle.Tipo_PagoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Id_Planilla() As Integer
            Get
                Return CType(Me(Me.tableAdelantos_Detalle.Id_PlanillaColumn),Integer)
            End Get
            Set
                Me(Me.tableAdelantos_Detalle.Id_PlanillaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Interes_Prestamo() As Double
            Get
                Return CType(Me(Me.tableAdelantos_Detalle.Interes_PrestamoColumn),Double)
            End Get
            Set
                Me(Me.tableAdelantos_Detalle.Interes_PrestamoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Saldo() As Double
            Get
                Return CType(Me(Me.tableAdelantos_Detalle.SaldoColumn),Double)
            End Get
            Set
                Me(Me.tableAdelantos_Detalle.SaldoColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class DeduccionesRow
        Inherits Global.System.Data.DataRow
        
        Private tableDeducciones As DeduccionesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDeducciones = CType(Me.Table,DeduccionesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Codigo() As Integer
            Get
                Return CType(Me(Me.tableDeducciones.CodigoColumn),Integer)
            End Get
            Set
                Me(Me.tableDeducciones.CodigoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Descripcion() As String
            Get
                Return CType(Me(Me.tableDeducciones.DescripcionColumn),String)
            End Get
            Set
                Me(Me.tableDeducciones.DescripcionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Monto() As Double
            Get
                Return CType(Me(Me.tableDeducciones.MontoColumn),Double)
            End Get
            Set
                Me(Me.tableDeducciones.MontoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tipo() As String
            Get
                Return CType(Me(Me.tableDeducciones.TipoColumn),String)
            End Get
            Set
                Me(Me.tableDeducciones.TipoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Aplica() As Boolean
            Get
                Return CType(Me(Me.tableDeducciones.AplicaColumn),Boolean)
            End Get
            Set
                Me(Me.tableDeducciones.AplicaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cod_Moneda() As Integer
            Get
                Return CType(Me(Me.tableDeducciones.Cod_MonedaColumn),Integer)
            End Get
            Set
                Me(Me.tableDeducciones.Cod_MonedaColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class detalle_abonoccobrarRow
        Inherits Global.System.Data.DataRow
        
        Private tabledetalle_abonoccobrar As detalle_abonoccobrarDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledetalle_abonoccobrar = CType(Me.Table,detalle_abonoccobrarDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Consecutivo() As Long
            Get
                Return CType(Me(Me.tabledetalle_abonoccobrar.ConsecutivoColumn),Long)
            End Get
            Set
                Me(Me.tabledetalle_abonoccobrar.ConsecutivoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Id_Recibo() As Long
            Get
                Return CType(Me(Me.tabledetalle_abonoccobrar.Id_ReciboColumn),Long)
            End Get
            Set
                Me(Me.tabledetalle_abonoccobrar.Id_ReciboColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Factura() As Double
            Get
                Return CType(Me(Me.tabledetalle_abonoccobrar.FacturaColumn),Double)
            End Get
            Set
                Me(Me.tabledetalle_abonoccobrar.FacturaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tipo() As String
            Get
                Return CType(Me(Me.tabledetalle_abonoccobrar.TipoColumn),String)
            End Get
            Set
                Me(Me.tabledetalle_abonoccobrar.TipoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Monto() As Double
            Get
                Return CType(Me(Me.tabledetalle_abonoccobrar.MontoColumn),Double)
            End Get
            Set
                Me(Me.tabledetalle_abonoccobrar.MontoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Saldo_Ant() As Double
            Get
                Return CType(Me(Me.tabledetalle_abonoccobrar.Saldo_AntColumn),Double)
            End Get
            Set
                Me(Me.tabledetalle_abonoccobrar.Saldo_AntColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Intereses() As Double
            Get
                Return CType(Me(Me.tabledetalle_abonoccobrar.InteresesColumn),Double)
            End Get
            Set
                Me(Me.tabledetalle_abonoccobrar.InteresesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Abono() As Double
            Get
                Return CType(Me(Me.tabledetalle_abonoccobrar.AbonoColumn),Double)
            End Get
            Set
                Me(Me.tabledetalle_abonoccobrar.AbonoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Abono_SuMoneda() As Double
            Get
                Return CType(Me(Me.tabledetalle_abonoccobrar.Abono_SuMonedaColumn),Double)
            End Get
            Set
                Me(Me.tabledetalle_abonoccobrar.Abono_SuMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Saldo() As Double
            Get
                Return CType(Me(Me.tabledetalle_abonoccobrar.SaldoColumn),Double)
            End Get
            Set
                Me(Me.tabledetalle_abonoccobrar.SaldoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Id_Factura() As Long
            Get
                Return CType(Me(Me.tabledetalle_abonoccobrar.Id_FacturaColumn),Long)
            End Get
            Set
                Me(Me.tabledetalle_abonoccobrar.Id_FacturaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property abonoccobrarRow() As abonoccobrarRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("abonoccobrardetalle_abonoccobrar")),abonoccobrarRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("abonoccobrardetalle_abonoccobrar"))
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class EmpleadoRow
        Inherits Global.System.Data.DataRow
        
        Private tableEmpleado As EmpleadoDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableEmpleado = CType(Me.Table,EmpleadoDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Identificacion() As String
            Get
                Return CType(Me(Me.tableEmpleado.IdentificacionColumn),String)
            End Get
            Set
                Me(Me.tableEmpleado.IdentificacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nombre() As String
            Get
                Return CType(Me(Me.tableEmpleado.NombreColumn),String)
            End Get
            Set
                Me(Me.tableEmpleado.NombreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Estado_Civil() As String
            Get
                Return CType(Me(Me.tableEmpleado.Estado_CivilColumn),String)
            End Get
            Set
                Me(Me.tableEmpleado.Estado_CivilColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Hijos() As Integer
            Get
                Return CType(Me(Me.tableEmpleado.HijosColumn),Integer)
            End Get
            Set
                Me(Me.tableEmpleado.HijosColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cod_Nacionalidad() As Integer
            Get
                Return CType(Me(Me.tableEmpleado.Cod_NacionalidadColumn),Integer)
            End Get
            Set
                Me(Me.tableEmpleado.Cod_NacionalidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Fecha_Nacimiento() As Date
            Get
                Return CType(Me(Me.tableEmpleado.Fecha_NacimientoColumn),Date)
            End Get
            Set
                Me(Me.tableEmpleado.Fecha_NacimientoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Edad() As Integer
            Get
                Return CType(Me(Me.tableEmpleado.EdadColumn),Integer)
            End Get
            Set
                Me(Me.tableEmpleado.EdadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Telefono1() As String
            Get
                Return CType(Me(Me.tableEmpleado.Telefono1Column),String)
            End Get
            Set
                Me(Me.tableEmpleado.Telefono1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Telefono2() As String
            Get
                Return CType(Me(Me.tableEmpleado.Telefono2Column),String)
            End Get
            Set
                Me(Me.tableEmpleado.Telefono2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Email() As String
            Get
                Return CType(Me(Me.tableEmpleado.EmailColumn),String)
            End Get
            Set
                Me(Me.tableEmpleado.EmailColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Direccion() As String
            Get
                Return CType(Me(Me.tableEmpleado.DireccionColumn),String)
            End Get
            Set
                Me(Me.tableEmpleado.DireccionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Puesto() As String
            Get
                Return CType(Me(Me.tableEmpleado.PuestoColumn),String)
            End Get
            Set
                Me(Me.tableEmpleado.PuestoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Fecha_Ingreso() As Date
            Get
                Return CType(Me(Me.tableEmpleado.Fecha_IngresoColumn),Date)
            End Get
            Set
                Me(Me.tableEmpleado.Fecha_IngresoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Fecha_Salida() As Date
            Get
                Return CType(Me(Me.tableEmpleado.Fecha_SalidaColumn),Date)
            End Get
            Set
                Me(Me.tableEmpleado.Fecha_SalidaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Salario() As Double
            Get
                Return CType(Me(Me.tableEmpleado.SalarioColumn),Double)
            End Get
            Set
                Me(Me.tableEmpleado.SalarioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cod_Departamento() As Integer
            Get
                Return CType(Me(Me.tableEmpleado.Cod_DepartamentoColumn),Integer)
            End Get
            Set
                Me(Me.tableEmpleado.Cod_DepartamentoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Masculino() As Boolean
            Get
                Return CType(Me(Me.tableEmpleado.MasculinoColumn),Boolean)
            End Get
            Set
                Me(Me.tableEmpleado.MasculinoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Femenino() As Boolean
            Get
                Return CType(Me(Me.tableEmpleado.FemeninoColumn),Boolean)
            End Get
            Set
                Me(Me.tableEmpleado.FemeninoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cod_Moneda() As Integer
            Get
                Return CType(Me(Me.tableEmpleado.Cod_MonedaColumn),Integer)
            End Get
            Set
                Me(Me.tableEmpleado.Cod_MonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Hora() As Boolean
            Get
                Return CType(Me(Me.tableEmpleado.HoraColumn),Boolean)
            End Get
            Set
                Me(Me.tableEmpleado.HoraColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Diario() As Boolean
            Get
                Return CType(Me(Me.tableEmpleado.DiarioColumn),Boolean)
            End Get
            Set
                Me(Me.tableEmpleado.DiarioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Semana() As Boolean
            Get
                Return CType(Me(Me.tableEmpleado.SemanaColumn),Boolean)
            End Get
            Set
                Me(Me.tableEmpleado.SemanaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Quincena() As Boolean
            Get
                Return CType(Me(Me.tableEmpleado.QuincenaColumn),Boolean)
            End Get
            Set
                Me(Me.tableEmpleado.QuincenaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Mensual() As Boolean
            Get
                Return CType(Me(Me.tableEmpleado.MensualColumn),Boolean)
            End Get
            Set
                Me(Me.tableEmpleado.MensualColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cod_Estado() As Integer
            Get
                Return CType(Me(Me.tableEmpleado.Cod_EstadoColumn),Integer)
            End Get
            Set
                Me(Me.tableEmpleado.Cod_EstadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Foto() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableEmpleado.FotoColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Foto' in table 'Empleado' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEmpleado.FotoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HorasOrdinarias() As Integer
            Get
                Return CType(Me(Me.tableEmpleado.HorasOrdinariasColumn),Integer)
            End Get
            Set
                Me(Me.tableEmpleado.HorasOrdinariasColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ServiciosProf() As Boolean
            Get
                Return CType(Me(Me.tableEmpleado.ServiciosProfColumn),Boolean)
            End Get
            Set
                Me(Me.tableEmpleado.ServiciosProfColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CambioCedula() As Boolean
            Get
                Return CType(Me(Me.tableEmpleado.CambioCedulaColumn),Boolean)
            End Get
            Set
                Me(Me.tableEmpleado.CambioCedulaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NuevaCedula() As String
            Get
                Try 
                    Return CType(Me(Me.tableEmpleado.NuevaCedulaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NuevaCedula' in table 'Empleado' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEmpleado.NuevaCedulaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFotoNull() As Boolean
            Return Me.IsNull(Me.tableEmpleado.FotoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFotoNull()
            Me(Me.tableEmpleado.FotoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNuevaCedulaNull() As Boolean
            Return Me.IsNull(Me.tableEmpleado.NuevaCedulaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNuevaCedulaNull()
            Me(Me.tableEmpleado.NuevaCedulaColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Empleado_DeduccionesRow
        Inherits Global.System.Data.DataRow
        
        Private tableEmpleado_Deducciones As Empleado_DeduccionesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableEmpleado_Deducciones = CType(Me.Table,Empleado_DeduccionesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Id() As Long
            Get
                Return CType(Me(Me.tableEmpleado_Deducciones.IdColumn),Long)
            End Get
            Set
                Me(Me.tableEmpleado_Deducciones.IdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Identificacion() As String
            Get
                Return CType(Me(Me.tableEmpleado_Deducciones.IdentificacionColumn),String)
            End Get
            Set
                Me(Me.tableEmpleado_Deducciones.IdentificacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Codigo() As Integer
            Get
                Return CType(Me(Me.tableEmpleado_Deducciones.CodigoColumn),Integer)
            End Get
            Set
                Me(Me.tableEmpleado_Deducciones.CodigoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Descripcion() As String
            Get
                Return CType(Me(Me.tableEmpleado_Deducciones.DescripcionColumn),String)
            End Get
            Set
                Me(Me.tableEmpleado_Deducciones.DescripcionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Monto() As Double
            Get
                Return CType(Me(Me.tableEmpleado_Deducciones.MontoColumn),Double)
            End Get
            Set
                Me(Me.tableEmpleado_Deducciones.MontoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tipo() As String
            Get
                Return CType(Me(Me.tableEmpleado_Deducciones.TipoColumn),String)
            End Get
            Set
                Me(Me.tableEmpleado_Deducciones.TipoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cod_Moneda() As Integer
            Get
                Return CType(Me(Me.tableEmpleado_Deducciones.Cod_MonedaColumn),Integer)
            End Get
            Set
                Me(Me.tableEmpleado_Deducciones.Cod_MonedaColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Horas_OrdinariasRow
        Inherits Global.System.Data.DataRow
        
        Private tableHoras_Ordinarias As Horas_OrdinariasDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableHoras_Ordinarias = CType(Me.Table,Horas_OrdinariasDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Horas() As Integer
            Get
                Return CType(Me(Me.tableHoras_Ordinarias.HorasColumn),Integer)
            End Get
            Set
                Me(Me.tableHoras_Ordinarias.HorasColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Individual() As Boolean
            Get
                Return CType(Me(Me.tableHoras_Ordinarias.IndividualColumn),Boolean)
            End Get
            Set
                Me(Me.tableHoras_Ordinarias.IndividualColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class HorasTrabajadasRow
        Inherits Global.System.Data.DataRow
        
        Private tableHorasTrabajadas As HorasTrabajadasDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableHorasTrabajadas = CType(Me.Table,HorasTrabajadasDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Id() As Long
            Get
                Return CType(Me(Me.tableHorasTrabajadas.IdColumn),Long)
            End Get
            Set
                Me(Me.tableHorasTrabajadas.IdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Identificacion() As String
            Get
                Return CType(Me(Me.tableHorasTrabajadas.IdentificacionColumn),String)
            End Get
            Set
                Me(Me.tableHorasTrabajadas.IdentificacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Fecha() As Date
            Get
                Return CType(Me(Me.tableHorasTrabajadas.FechaColumn),Date)
            End Get
            Set
                Me(Me.tableHorasTrabajadas.FechaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HoraOrdinaria() As Double
            Get
                Return CType(Me(Me.tableHorasTrabajadas.HoraOrdinariaColumn),Double)
            End Get
            Set
                Me(Me.tableHorasTrabajadas.HoraOrdinariaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HoraExtra() As Double
            Get
                Return CType(Me(Me.tableHorasTrabajadas.HoraExtraColumn),Double)
            End Get
            Set
                Me(Me.tableHorasTrabajadas.HoraExtraColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HoraDoble() As Double
            Get
                Return CType(Me(Me.tableHorasTrabajadas.HoraDobleColumn),Double)
            End Get
            Set
                Me(Me.tableHorasTrabajadas.HoraDobleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Id_Proyecto() As Integer
            Get
                Return CType(Me(Me.tableHorasTrabajadas.Id_ProyectoColumn),Integer)
            End Get
            Set
                Me(Me.tableHorasTrabajadas.Id_ProyectoColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class MonedaRow
        Inherits Global.System.Data.DataRow
        
        Private tableMoneda As MonedaDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMoneda = CType(Me.Table,MonedaDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodMoneda() As Integer
            Get
                Return CType(Me(Me.tableMoneda.CodMonedaColumn),Integer)
            End Get
            Set
                Me(Me.tableMoneda.CodMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MonedaNombre() As String
            Get
                Return CType(Me(Me.tableMoneda.MonedaNombreColumn),String)
            End Get
            Set
                Me(Me.tableMoneda.MonedaNombreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ValorCompra() As Double
            Get
                Return CType(Me(Me.tableMoneda.ValorCompraColumn),Double)
            End Get
            Set
                Me(Me.tableMoneda.ValorCompraColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ValorVenta() As Double
            Get
                Return CType(Me(Me.tableMoneda.ValorVentaColumn),Double)
            End Get
            Set
                Me(Me.tableMoneda.ValorVentaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Simbolo() As String
            Get
                Return CType(Me(Me.tableMoneda.SimboloColumn),String)
            End Get
            Set
                Me(Me.tableMoneda.SimboloColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ParametroRentaRow
        Inherits Global.System.Data.DataRow
        
        Private tableParametroRenta As ParametroRentaDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableParametroRenta = CType(Me.Table,ParametroRentaDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Id() As Integer
            Get
                Return CType(Me(Me.tableParametroRenta.IdColumn),Integer)
            End Get
            Set
                Me(Me.tableParametroRenta.IdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontoExento() As Double
            Get
                Return CType(Me(Me.tableParametroRenta.MontoExentoColumn),Double)
            End Get
            Set
                Me(Me.tableParametroRenta.MontoExentoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontoDe() As Double
            Get
                Return CType(Me(Me.tableParametroRenta.MontoDeColumn),Double)
            End Get
            Set
                Me(Me.tableParametroRenta.MontoDeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontoHasta() As Double
            Get
                Return CType(Me(Me.tableParametroRenta.MontoHastaColumn),Double)
            End Get
            Set
                Me(Me.tableParametroRenta.MontoHastaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Porcentaje1() As Double
            Get
                Return CType(Me(Me.tableParametroRenta.Porcentaje1Column),Double)
            End Get
            Set
                Me(Me.tableParametroRenta.Porcentaje1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontoEnAdelante() As Double
            Get
                Return CType(Me(Me.tableParametroRenta.MontoEnAdelanteColumn),Double)
            End Get
            Set
                Me(Me.tableParametroRenta.MontoEnAdelanteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Porcentaje2() As Double
            Get
                Return CType(Me(Me.tableParametroRenta.Porcentaje2Column),Double)
            End Get
            Set
                Me(Me.tableParametroRenta.Porcentaje2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Esposa() As Double
            Get
                Return CType(Me(Me.tableParametroRenta.EsposaColumn),Double)
            End Get
            Set
                Me(Me.tableParametroRenta.EsposaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Hijo() As Double
            Get
                Return CType(Me(Me.tableParametroRenta.HijoColumn),Double)
            End Get
            Set
                Me(Me.tableParametroRenta.HijoColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PlanillaRow
        Inherits Global.System.Data.DataRow
        
        Private tablePlanilla As PlanillaDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePlanilla = CType(Me.Table,PlanillaDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Id_Planilla() As Long
            Get
                Return CType(Me(Me.tablePlanilla.Id_PlanillaColumn),Long)
            End Get
            Set
                Me(Me.tablePlanilla.Id_PlanillaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Fecha() As Date
            Get
                Return CType(Me(Me.tablePlanilla.FechaColumn),Date)
            End Get
            Set
                Me(Me.tablePlanilla.FechaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaInicial() As Date
            Get
                Return CType(Me(Me.tablePlanilla.FechaInicialColumn),Date)
            End Get
            Set
                Me(Me.tablePlanilla.FechaInicialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaFinal() As Date
            Get
                Return CType(Me(Me.tablePlanilla.FechaFinalColumn),Date)
            End Get
            Set
                Me(Me.tablePlanilla.FechaFinalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CierreMes() As Boolean
            Get
                Return CType(Me(Me.tablePlanilla.CierreMesColumn),Boolean)
            End Get
            Set
                Me(Me.tablePlanilla.CierreMesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ced_Usuario() As String
            Get
                Return CType(Me(Me.tablePlanilla.Ced_UsuarioColumn),String)
            End Get
            Set
                Me(Me.tablePlanilla.Ced_UsuarioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nombre_Usuario() As String
            Get
                Return CType(Me(Me.tablePlanilla.Nombre_UsuarioColumn),String)
            End Get
            Set
                Me(Me.tablePlanilla.Nombre_UsuarioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Anulado() As Boolean
            Get
                Return CType(Me(Me.tablePlanilla.AnuladoColumn),Boolean)
            End Get
            Set
                Me(Me.tablePlanilla.AnuladoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Serv_Prof() As Boolean
            Get
                Return CType(Me(Me.tablePlanilla.Serv_ProfColumn),Boolean)
            End Get
            Set
                Me(Me.tablePlanilla.Serv_ProfColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NumeroPlanilla() As Long
            Get
                Return CType(Me(Me.tablePlanilla.NumeroPlanillaColumn),Long)
            End Get
            Set
                Me(Me.tablePlanilla.NumeroPlanillaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetPlanilla_DetalleRows() As Planilla_DetalleRow()
            If (Me.Table.ChildRelations("PlanillaPlanilla_Detalle") Is Nothing) Then
                Return New Planilla_DetalleRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("PlanillaPlanilla_Detalle")),Planilla_DetalleRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Planilla_DeduccionesRow
        Inherits Global.System.Data.DataRow
        
        Private tablePlanilla_Deducciones As Planilla_DeduccionesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePlanilla_Deducciones = CType(Me.Table,Planilla_DeduccionesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Id() As Long
            Get
                Return CType(Me(Me.tablePlanilla_Deducciones.IdColumn),Long)
            End Get
            Set
                Me(Me.tablePlanilla_Deducciones.IdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Id_PlanillaDetalle() As Long
            Get
                Return CType(Me(Me.tablePlanilla_Deducciones.Id_PlanillaDetalleColumn),Long)
            End Get
            Set
                Me(Me.tablePlanilla_Deducciones.Id_PlanillaDetalleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cod_Deduccion() As Integer
            Get
                Return CType(Me(Me.tablePlanilla_Deducciones.Cod_DeduccionColumn),Integer)
            End Get
            Set
                Me(Me.tablePlanilla_Deducciones.Cod_DeduccionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nombre() As String
            Get
                Return CType(Me(Me.tablePlanilla_Deducciones.NombreColumn),String)
            End Get
            Set
                Me(Me.tablePlanilla_Deducciones.NombreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Monto() As Double
            Get
                Return CType(Me(Me.tablePlanilla_Deducciones.MontoColumn),Double)
            End Get
            Set
                Me(Me.tablePlanilla_Deducciones.MontoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cod_Moneda() As Integer
            Get
                Return CType(Me(Me.tablePlanilla_Deducciones.Cod_MonedaColumn),Integer)
            End Get
            Set
                Me(Me.tablePlanilla_Deducciones.Cod_MonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Planilla_DetalleRow() As Planilla_DetalleRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Planilla_DetallePlanilla_Deducciones")),Planilla_DetalleRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Planilla_DetallePlanilla_Deducciones"))
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Planilla_DetalleRow
        Inherits Global.System.Data.DataRow
        
        Private tablePlanilla_Detalle As Planilla_DetalleDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePlanilla_Detalle = CType(Me.Table,Planilla_DetalleDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Id() As Long
            Get
                Return CType(Me(Me.tablePlanilla_Detalle.IdColumn),Long)
            End Get
            Set
                Me(Me.tablePlanilla_Detalle.IdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Id_Planilla() As Long
            Get
                Return CType(Me(Me.tablePlanilla_Detalle.Id_PlanillaColumn),Long)
            End Get
            Set
                Me(Me.tablePlanilla_Detalle.Id_PlanillaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cedula() As String
            Get
                Return CType(Me(Me.tablePlanilla_Detalle.CedulaColumn),String)
            End Get
            Set
                Me(Me.tablePlanilla_Detalle.CedulaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nombre() As String
            Get
                Return CType(Me(Me.tablePlanilla_Detalle.NombreColumn),String)
            End Get
            Set
                Me(Me.tablePlanilla_Detalle.NombreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Puesto() As String
            Get
                Return CType(Me(Me.tablePlanilla_Detalle.PuestoColumn),String)
            End Get
            Set
                Me(Me.tablePlanilla_Detalle.PuestoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Salario() As Double
            Get
                Return CType(Me(Me.tablePlanilla_Detalle.SalarioColumn),Double)
            End Get
            Set
                Me(Me.tablePlanilla_Detalle.SalarioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FormaPago() As String
            Get
                Return CType(Me(Me.tablePlanilla_Detalle.FormaPagoColumn),String)
            End Get
            Set
                Me(Me.tablePlanilla_Detalle.FormaPagoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ordinaria() As Double
            Get
                Return CType(Me(Me.tablePlanilla_Detalle.OrdinariaColumn),Double)
            End Get
            Set
                Me(Me.tablePlanilla_Detalle.OrdinariaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Extra() As Double
            Get
                Return CType(Me(Me.tablePlanilla_Detalle.ExtraColumn),Double)
            End Get
            Set
                Me(Me.tablePlanilla_Detalle.ExtraColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Doble() As Double
            Get
                Return CType(Me(Me.tablePlanilla_Detalle.DobleColumn),Double)
            End Get
            Set
                Me(Me.tablePlanilla_Detalle.DobleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SalarioBruto() As Double
            Get
                Return CType(Me(Me.tablePlanilla_Detalle.SalarioBrutoColumn),Double)
            End Get
            Set
                Me(Me.tablePlanilla_Detalle.SalarioBrutoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Adelantos() As Double
            Get
                Return CType(Me(Me.tablePlanilla_Detalle.AdelantosColumn),Double)
            End Get
            Set
                Me(Me.tablePlanilla_Detalle.AdelantosColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Prestamos() As Double
            Get
                Return CType(Me(Me.tablePlanilla_Detalle.PrestamosColumn),Double)
            End Get
            Set
                Me(Me.tablePlanilla_Detalle.PrestamosColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Renta() As Double
            Get
                Return CType(Me(Me.tablePlanilla_Detalle.RentaColumn),Double)
            End Get
            Set
                Me(Me.tablePlanilla_Detalle.RentaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalDeducciones() As Double
            Get
                Return CType(Me(Me.tablePlanilla_Detalle.TotalDeduccionesColumn),Double)
            End Get
            Set
                Me(Me.tablePlanilla_Detalle.TotalDeduccionesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SalarioNeto() As Double
            Get
                Return CType(Me(Me.tablePlanilla_Detalle.SalarioNetoColumn),Double)
            End Get
            Set
                Me(Me.tablePlanilla_Detalle.SalarioNetoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cod_Moneda() As Integer
            Get
                Return CType(Me(Me.tablePlanilla_Detalle.Cod_MonedaColumn),Integer)
            End Get
            Set
                Me(Me.tablePlanilla_Detalle.Cod_MonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Feriada() As Double
            Get
                Return CType(Me(Me.tablePlanilla_Detalle.FeriadaColumn),Double)
            End Get
            Set
                Me(Me.tablePlanilla_Detalle.FeriadaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Prestamos_Int() As Double
            Get
                Return CType(Me(Me.tablePlanilla_Detalle.Prestamos_IntColumn),Double)
            End Get
            Set
                Me(Me.tablePlanilla_Detalle.Prestamos_IntColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Otros_Ingresos() As Double
            Get
                Return CType(Me(Me.tablePlanilla_Detalle.Otros_IngresosColumn),Double)
            End Get
            Set
                Me(Me.tablePlanilla_Detalle.Otros_IngresosColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CuentasxCobrar() As Double
            Get
                Return CType(Me(Me.tablePlanilla_Detalle.CuentasxCobrarColumn),Double)
            End Get
            Set
                Me(Me.tablePlanilla_Detalle.CuentasxCobrarColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ord_Nocturna() As Double
            Get
                Return CType(Me(Me.tablePlanilla_Detalle.Ord_NocturnaColumn),Double)
            End Get
            Set
                Me(Me.tablePlanilla_Detalle.Ord_NocturnaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ext_Nocturna() As Double
            Get
                Return CType(Me(Me.tablePlanilla_Detalle.Ext_NocturnaColumn),Double)
            End Get
            Set
                Me(Me.tablePlanilla_Detalle.Ext_NocturnaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DiasLibre() As Single
            Get
                Try 
                    Return CType(Me(Me.tablePlanilla_Detalle.DiasLibreColumn),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DiasLibre' in table 'Planilla_Detalle' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePlanilla_Detalle.DiasLibreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PlanillaRow() As PlanillaRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("PlanillaPlanilla_Detalle")),PlanillaRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("PlanillaPlanilla_Detalle"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDiasLibreNull() As Boolean
            Return Me.IsNull(Me.tablePlanilla_Detalle.DiasLibreColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDiasLibreNull()
            Me(Me.tablePlanilla_Detalle.DiasLibreColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetPlanilla_DeduccionesRows() As Planilla_DeduccionesRow()
            If (Me.Table.ChildRelations("Planilla_DetallePlanilla_Deducciones") Is Nothing) Then
                Return New Planilla_DeduccionesRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("Planilla_DetallePlanilla_Deducciones")),Planilla_DeduccionesRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetDeduccion_EmpleadoRows() As Deduccion_EmpleadoRow()
            If (Me.Table.ChildRelations("Planilla_DetalleDeduccion_Empleado") Is Nothing) Then
                Return New Deduccion_EmpleadoRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("Planilla_DetalleDeduccion_Empleado")),Deduccion_EmpleadoRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Deduccion_EmpleadoRow
        Inherits Global.System.Data.DataRow
        
        Private tableDeduccion_Empleado As Deduccion_EmpleadoDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDeduccion_Empleado = CType(Me.Table,Deduccion_EmpleadoDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Id_Deduccion() As Long
            Get
                Return CType(Me(Me.tableDeduccion_Empleado.Id_DeduccionColumn),Long)
            End Get
            Set
                Me(Me.tableDeduccion_Empleado.Id_DeduccionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Id_Detalle() As Long
            Get
                Return CType(Me(Me.tableDeduccion_Empleado.Id_DetalleColumn),Long)
            End Get
            Set
                Me(Me.tableDeduccion_Empleado.Id_DetalleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CCSS() As Double
            Get
                Return CType(Me(Me.tableDeduccion_Empleado.CCSSColumn),Double)
            End Get
            Set
                Me(Me.tableDeduccion_Empleado.CCSSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ALIMENTACION() As Double
            Get
                Return CType(Me(Me.tableDeduccion_Empleado.ALIMENTACIONColumn),Double)
            End Get
            Set
                Me(Me.tableDeduccion_Empleado.ALIMENTACIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CAMISETAS() As Double
            Get
                Return CType(Me(Me.tableDeduccion_Empleado.CAMISETASColumn),Double)
            End Get
            Set
                Me(Me.tableDeduccion_Empleado.CAMISETASColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PENSION() As Double
            Get
                Return CType(Me(Me.tableDeduccion_Empleado.PENSIONColumn),Double)
            End Get
            Set
                Me(Me.tableDeduccion_Empleado.PENSIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodMoneda() As Integer
            Get
                Return CType(Me(Me.tableDeduccion_Empleado.CodMonedaColumn),Integer)
            End Get
            Set
                Me(Me.tableDeduccion_Empleado.CodMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Planilla_DetalleRow() As Planilla_DetalleRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Planilla_DetalleDeduccion_Empleado")),Planilla_DetalleRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Planilla_DetalleDeduccion_Empleado"))
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class AdelantoPruebaRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As AdelantoPruebaRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As AdelantoPruebaRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As AdelantoPruebaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ConsultaSaldosRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ConsultaSaldosRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ConsultaSaldosRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ConsultaSaldosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Facturas_CobrarRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Facturas_CobrarRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Facturas_CobrarRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Facturas_CobrarRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class abonoccobrarRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As abonoccobrarRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As abonoccobrarRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As abonoccobrarRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class AccionPersonalRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As AccionPersonalRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As AccionPersonalRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As AccionPersonalRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class AdelantosRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As AdelantosRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As AdelantosRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As AdelantosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Adelantos_DetalleRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Adelantos_DetalleRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Adelantos_DetalleRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Adelantos_DetalleRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class DeduccionesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As DeduccionesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As DeduccionesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As DeduccionesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class detalle_abonoccobrarRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As detalle_abonoccobrarRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As detalle_abonoccobrarRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As detalle_abonoccobrarRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class EmpleadoRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As EmpleadoRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As EmpleadoRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As EmpleadoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Empleado_DeduccionesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Empleado_DeduccionesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Empleado_DeduccionesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Empleado_DeduccionesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Horas_OrdinariasRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Horas_OrdinariasRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Horas_OrdinariasRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Horas_OrdinariasRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class HorasTrabajadasRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As HorasTrabajadasRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As HorasTrabajadasRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As HorasTrabajadasRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class MonedaRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As MonedaRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As MonedaRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As MonedaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ParametroRentaRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ParametroRentaRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ParametroRentaRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ParametroRentaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PlanillaRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PlanillaRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PlanillaRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PlanillaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Planilla_DeduccionesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Planilla_DeduccionesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Planilla_DeduccionesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Planilla_DeduccionesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Planilla_DetalleRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Planilla_DetalleRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Planilla_DetalleRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Planilla_DetalleRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Deduccion_EmpleadoRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Deduccion_EmpleadoRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Deduccion_EmpleadoRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Deduccion_EmpleadoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
